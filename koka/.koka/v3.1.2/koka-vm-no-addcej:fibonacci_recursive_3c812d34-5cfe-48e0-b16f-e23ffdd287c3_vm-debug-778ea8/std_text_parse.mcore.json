{"metadata": {"generated by": "Koka","koka version": "3.1.2","program name": "std/text/parse"},"includes": [],"definitions": [{"name": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_types.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_hnd.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/exn","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_exn.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/bool","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_bool.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/order","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_order.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/char","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_char.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/int","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_int.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/vector","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_vector.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/string","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_string.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_sslice.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/list","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_list.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/maybe","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_maybe.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/either","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_either.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/tuple","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_tuple.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/show","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_show.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/debug","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_debug.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/delayed","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_delayed.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/console","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_console.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/undiv","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_undiv.rpyeffect"}}}, {"name": {"op": "Var","id": "std/text/parse/parse/@cfc","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/text/parse/parse"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "parse@0","type": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "parse@0","type": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse"}},"type_tag": "std/text/parse/parse","clauses": [{"tag": "std/text/parse/@Hnd-parse","params": [{"op": "Var","id": "@\"@cfc\"0","type": {"op": "Int"}}, {"op": "Var","id": "@\"@fun-current-input\"1","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@ctl-fail\"2","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}, {"op": "Var","id": "@\"@ctl-pick\"3","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@fun-satisfy\"4","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@cfc\"0","type": {"op": "Int"}},"annotation": "genTest: normal: (@x: int) -> {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"parse@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/clause0<sslice/sslice,std/text/parse/parse,298,299>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@1: forall<a> hnd/clause1<string,a,std/text/parse/parse,298,299>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@2: hnd/clause0<bool,std/text/parse/parse,298,299>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,298,299>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"parse@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a> fn(parse@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>){\n  (match (parse@0) {\n    ((@skip std/text/parse/@Hnd-parse((@x: int) : int, (@pat@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@1: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n       -> @x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/parse/@cfc\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/parse/@cfc"]}, {"name": {"op": "Var","id": "std/text/parse/parse/@fun-current-input","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/text/parse/parse"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "parse@0","type": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "parse@0","type": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse"}},"type_tag": "std/text/parse/parse","clauses": [{"tag": "std/text/parse/@Hnd-parse","params": [{"op": "Var","id": "@\"@cfc\"5","type": {"op": "Int"}}, {"op": "Var","id": "@\"@fun-current-input\"6","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@ctl-fail\"7","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}, {"op": "Var","id": "@\"@ctl-pick\"8","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@fun-satisfy\"9","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@fun-current-input\"6","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"annotation": "genTest: normal: (@x: hnd/clause0<sslice/sslice,std/text/parse/parse,322,323>) -> {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"parse@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"5\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"5\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@x: hnd/clause0<sslice/sslice,std/text/parse/parse,322,323>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"6\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@1: forall<a> hnd/clause1<string,a,std/text/parse/parse,322,323>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"7\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"8\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@2: hnd/clause0<bool,std/text/parse/parse,322,323>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,322,323>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"9\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"parse@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"5\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"8\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a> fn(parse@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>){\n  (match (parse@0) {\n    ((@skip std/text/parse/@Hnd-parse((@pat@0: int) : int, (@x: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@1: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n       -> @x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/parse/@fun-current-input\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/parse/@fun-current-input"]}, {"name": {"op": "Var","id": "std/text/parse/parse/@ctl-fail","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/text/parse/parse"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "parse@0","type": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "parse@0","type": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse"}},"type_tag": "std/text/parse/parse","clauses": [{"tag": "std/text/parse/@Hnd-parse","params": [{"op": "Var","id": "@\"@cfc\"10","type": {"op": "Int"}}, {"op": "Var","id": "@\"@fun-current-input\"11","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@ctl-fail\"12","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}, {"op": "Var","id": "@\"@ctl-pick\"13","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@fun-satisfy\"14","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@ctl-fail\"12","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"annotation": "genTest: normal: (@x: forall<a> hnd/clause1<string,a,std/text/parse/parse,351,352>) -> {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"12\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}"},"annotation": "genExpr: @x<a>"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"parse@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"10\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"10\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/clause0<sslice/sslice,std/text/parse/parse,351,352>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"12\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@x: forall<a> hnd/clause1<string,a,std/text/parse/parse,351,352>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"12\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@2: hnd/clause0<bool,std/text/parse/parse,351,352>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"13\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,351,352>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"parse@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"10\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"12\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a,b> fn(parse@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>){\n  (match (parse@0) {\n    ((@skip std/text/parse/@Hnd-parse((@pat@0: int) : int, (@pat@1: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@x: forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,c,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,c,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3: (forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(c, sslice/sslice)>,(maybe :: V -> V)<c>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(c, sslice/sslice)>,(maybe :: V -> V)<c>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n       -> @x<b>;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/parse/@ctl-fail\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/parse/@ctl-fail"]}, {"name": {"op": "Var","id": "std/text/parse/parse/@ctl-pick","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/text/parse/parse"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "parse@0","type": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "parse@0","type": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse"}},"type_tag": "std/text/parse/parse","clauses": [{"tag": "std/text/parse/@Hnd-parse","params": [{"op": "Var","id": "@\"@cfc\"15","type": {"op": "Int"}}, {"op": "Var","id": "@\"@fun-current-input\"16","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@ctl-fail\"17","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}, {"op": "Var","id": "@\"@ctl-pick\"18","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@fun-satisfy\"19","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@ctl-pick\"18","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"annotation": "genTest: normal: (@x: hnd/clause0<bool,std/text/parse/parse,379,380>) -> {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"parse@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"15\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/clause0<sslice/sslice,std/text/parse/parse,379,380>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"16\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"17\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@2: forall<a> hnd/clause1<string,a,std/text/parse/parse,379,380>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@x: hnd/clause0<bool,std/text/parse/parse,379,380>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"19\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,379,380>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"19\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"parse@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"15\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"17\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"19\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a> fn(parse@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>){\n  (match (parse@0) {\n    ((@skip std/text/parse/@Hnd-parse((@pat@0: int) : int, (@pat@1: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@x: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n       -> @x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/parse/@ctl-pick\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/parse/@ctl-pick"]}, {"name": {"op": "Var","id": "std/text/parse/parse/@fun-satisfy","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/text/parse/parse"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "parse@0","type": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "parse@0","type": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse"}},"type_tag": "std/text/parse/parse","clauses": [{"tag": "std/text/parse/@Hnd-parse","params": [{"op": "Var","id": "@\"@cfc\"20","type": {"op": "Int"}}, {"op": "Var","id": "@\"@fun-current-input\"21","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@ctl-fail\"22","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}, {"op": "Var","id": "@\"@ctl-pick\"23","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@fun-satisfy\"24","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@fun-satisfy\"24","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"annotation": "genTest: normal: (@x: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,408,409>) -> {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"24\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}"},"annotation": "genExpr: @x<a>"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"parse@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"20\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"20\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/clause0<sslice/sslice,std/text/parse/parse,408,409>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"21\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"22\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@2: forall<a> hnd/clause1<string,a,std/text/parse/parse,408,409>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"22\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@3: hnd/clause0<bool,std/text/parse/parse,408,409>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"23\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"24\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@x: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,408,409>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"parse@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"20\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"22\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"24\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a,b> fn(parse@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>){\n  (match (parse@0) {\n    ((@skip std/text/parse/@Hnd-parse((@pat@0: int) : int, (@pat@1: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2: forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,c,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,c,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@x: (forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(c, sslice/sslice)>,(maybe :: V -> V)<c>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(c, sslice/sslice)>,(maybe :: V -> V)<c>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n       -> @x<b>;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/parse/@fun-satisfy\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/parse/@fun-satisfy"]}, {"name": {"op": "Var","id": "std/text/parse/parse-error/rest","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"}},"type_tag": "std/text/parse/parse-error","clauses": [{"tag": "std/text/parse/ParseOk","params": [{"op": "Var","id": "@\"result\"25","type": {"op": "Top"}}, {"op": "Var","id": "@\"rest\"26","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"rest\"26","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@1: string), (@pat@2: int), (@pat@3: int)) : sslice/sslice ) as @x: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"27","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"28","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"29","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"rest\"26","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@1: string), (@pat@2: int), (@pat@3: int)) : sslice/sslice ) as @x: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"25\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 436) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@1: string), (@pat@2: int), (@pat@3: int)) : sslice/sslice ) as @x: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"26\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"27\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"27\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"28\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"28\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"29\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"29\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@1: string), (@pat@2: int), (@pat@3: int)) : sslice/sslice ) as @x: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"26\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"27\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"28\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"29\",\"type\": {\"op\": \"Int\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}: \"std/text/parse/parse-error\".\"std/text/parse/ParseOk\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"25\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"}},"type_tag": "std/text/parse/parse-error","clauses": [{"tag": "std/text/parse/ParseError","params": [{"op": "Var","id": "@\"msg\"30","type": {"op": "String"}}, {"op": "Var","id": "@\"rest\"31","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"rest\"31","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as @x@0: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"32","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"33","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"34","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"rest\"31","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as @x@0: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}"},"annotation": "genExpr: @x@0"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}),(@pat@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"msg\\\"30\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@5: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"msg\\\\\\\"30\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as @x@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"32\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"32\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"33\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"33\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"34\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"34\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as @x@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"32\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"33\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"34\",\"type\": {\"op\": \"Int\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}: \"std/text/parse/parse-error\".\"std/text/parse/ParseError\"(({\"op\": \"Var\",\"id\": \"@\\\"msg\\\"30\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(@this: (std/text/parse/parse-error :: V -> V)<a>){\n  (match (@this) {\n    ((std/text/parse/ParseOk((@pat@0: a) : a, ((@skip std/core/sslice/Sslice((@pat@1: string) : string, (@pat@2: int) : int, (@pat@3: int) : int) : sslice/sslice ) as @x: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat: ((std/text/parse/parse-error :: V -> V)<a>))\n       -> @x;\n    ((@skip std/text/parse/ParseError((@pat@5: string) : string, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as @x@0: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat@4: ((std/text/parse/parse-error :: V -> V)<a>))\n       -> @x@0;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/parse-error/rest\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/parse-error/rest"]}, {"name": {"op": "Var","id": "std/text/parse/is-parseOk","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "parse-error","type": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "parse-error","type": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"}},"type_tag": "std/text/parse/parse-error","clauses": [{"tag": "std/text/parse/ParseOk","params": [{"op": "Var","id": "@\"result\"35","type": {"op": "Top"}}, {"op": "Var","id": "@\"rest\"36","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"rest\"36","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"36\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"37","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"38","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"39","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"parse-error\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"35\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 445) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"35\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"36\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"36\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"37\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"37\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"38\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"38\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"39\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@4: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"39\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"36\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"36\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"37\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"38\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"39\",\"type\": {\"op\": \"Int\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"parse-error\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}: \"std/text/parse/parse-error\".\"std/text/parse/ParseOk\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"35\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"36\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}))"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"parse-error\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(parse-error: (std/text/parse/parse-error :: V -> V)<a>){\n  (match (parse-error) {\n    ((std/text/parse/ParseOk((@pat@0: a) : a, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat: ((std/text/parse/parse-error :: V -> V)<a>))\n       -> std/core/types/True;\n    (@pat@5: ((std/text/parse/parse-error :: V -> V)<a>))\n       -> std/core/types/False;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/is-parseOk\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/is-parseOk"]}, {"name": {"op": "Var","id": "std/text/parse/is-parseError","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "parse-error","type": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "parse-error","type": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"}},"type_tag": "std/text/parse/parse-error","clauses": [{"tag": "std/text/parse/ParseError","params": [{"op": "Var","id": "@\"msg\"40","type": {"op": "String"}}, {"op": "Var","id": "@\"rest\"41","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"rest\"41","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"41\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"42","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"43","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"44","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"parse-error\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"msg\\\"40\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"msg\\\\\\\"40\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"41\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"41\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"42\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"42\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"43\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"43\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"44\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@4: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"44\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"41\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"41\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"42\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"43\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"44\",\"type\": {\"op\": \"Int\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"parse-error\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}: \"std/text/parse/parse-error\".\"std/text/parse/ParseError\"(({\"op\": \"Var\",\"id\": \"@\\\"msg\\\"40\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"41\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}))"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"parse-error\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(parse-error: (std/text/parse/parse-error :: V -> V)<a>){\n  (match (parse-error) {\n    ((std/text/parse/ParseError((@pat@0: string) : string, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat: ((std/text/parse/parse-error :: V -> V)<a>))\n       -> std/core/types/True;\n    (@pat@5: ((std/text/parse/parse-error :: V -> V)<a>))\n       -> std/core/types/False;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/is-parseError\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/is-parseError"]}, {"name": {"op": "Var","id": "std/text/parse/@tag-parse","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/Htag","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Htag<(std/text/parse/parse :: (E, V) -> V)>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "parse@parse"},"annotation": "genExpr: \"parse@parse\""}]},"annotation": "genExpr: std/core/hnd/Htag<(std/text/parse/parse :: (E, V) -> V)>(\"parse@parse\")"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/@tag-parse\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}"},"export_as": ["std/text/parse/@tag-parse"]}, {"name": {"op": "Var","id": "std/text/parse/@handle-parse","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/text/parse/parse"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse"}}, {"op": "Var","id": "ret","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@hhandle","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@hhandle<a,(e :: E),<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/@tag-parse","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}},"annotation": "genExpr: std/text/parse/@tag-parse"}, {"op": "DebugWrap","inner": {"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse"}},"annotation": "genExpr: hnd"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ret","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: ret"}, {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: action"}]},"annotation": "genExpr: std/core/hnd/@hhandle<a,(e :: E),<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V),a>(std/text/parse/@tag-parse, hnd, ret, action)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),b> fn<(e :: E)>(hnd: (std/text/parse/parse :: (E, V) -> V)<(e :: E),b>, ret: (res : a) -> (e :: E) b, action: () -> <(std/text/parse/parse :: (E, V) -> V)|(e :: E)> a){\n  std/core/hnd/@hhandle<a,(e :: E),<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V),b>(std/text/parse/@tag-parse, hnd, ret, action);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/@handle-parse\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/@handle-parse"]}, {"name": {"op": "Var","id": "std/text/parse/@select-current-input","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/text/parse/parse"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse"}},"type_tag": "std/text/parse/parse","clauses": [{"tag": "std/text/parse/@Hnd-parse","params": [{"op": "Var","id": "@\"@cfc\"45","type": {"op": "Int"}}, {"op": "Var","id": "@\"@fun-current-input\"46","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@ctl-fail\"47","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}, {"op": "Var","id": "@\"@ctl-pick\"48","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@fun-satisfy\"49","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@fun-current-input\"46","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"annotation": "genTest: normal: (@fun-current-input: hnd/clause0<sslice/sslice,std/text/parse/parse,537,538>) -> {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"46\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}"},"annotation": "genExpr: @fun-current-input"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"45\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"45\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@fun-current-input,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"46\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@fun-current-input: hnd/clause0<sslice/sslice,std/text/parse/parse,537,538>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"46\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"47\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@1: forall<a> hnd/clause1<string,a,std/text/parse/parse,537,538>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"47\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"48\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@2: hnd/clause0<bool,std/text/parse/parse,537,538>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"48\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"49\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,537,538>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"49\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"45\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"46\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"47\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"48\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"49\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a> fn(hnd: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>){\n  (match (hnd) {\n    ((@skip std/text/parse/@Hnd-parse((@pat@0: int) : int, (@fun-current-input: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@1: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n       -> @fun-current-input;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/@select-current-input\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/@select-current-input"]}, {"name": {"op": "Var","id": "std/text/parse/@select-fail","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/text/parse/parse"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse"}},"type_tag": "std/text/parse/parse","clauses": [{"tag": "std/text/parse/@Hnd-parse","params": [{"op": "Var","id": "@\"@cfc\"50","type": {"op": "Int"}}, {"op": "Var","id": "@\"@fun-current-input\"51","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@ctl-fail\"52","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}, {"op": "Var","id": "@\"@ctl-pick\"53","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@fun-satisfy\"54","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@ctl-fail\"52","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"annotation": "genTest: normal: (@ctl-fail: forall<a> hnd/clause1<string,a,std/text/parse/parse,567,568>) -> {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"52\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}"},"annotation": "genExpr: @ctl-fail<a>"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"50\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"50\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"51\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/clause0<sslice/sslice,std/text/parse/parse,567,568>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"51\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@ctl-fail,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"52\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@ctl-fail: forall<a> hnd/clause1<string,a,std/text/parse/parse,567,568>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"52\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"53\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@2: hnd/clause0<bool,std/text/parse/parse,567,568>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"53\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"54\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,567,568>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"54\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"50\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"51\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"52\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"53\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"54\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),b> fn(hnd: (std/text/parse/parse :: (E, V) -> V)<(e :: E),b>){\n  (match (hnd) {\n    ((@skip std/text/parse/@Hnd-parse((@pat@0: int) : int, (@pat@1: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>, (@ctl-fail: forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,c,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>) : forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,c,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>, (@pat@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>, (@pat@3: (forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(c, sslice/sslice)>,(maybe :: V -> V)<c>,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>)) : (forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(c, sslice/sslice)>,(maybe :: V -> V)<c>,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),b> ) as @pat: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),b>))\n       -> @ctl-fail<a>;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/@select-fail\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/@select-fail"]}, {"name": {"op": "Var","id": "std/text/parse/@select-pick","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/text/parse/parse"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse"}},"type_tag": "std/text/parse/parse","clauses": [{"tag": "std/text/parse/@Hnd-parse","params": [{"op": "Var","id": "@\"@cfc\"55","type": {"op": "Int"}}, {"op": "Var","id": "@\"@fun-current-input\"56","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@ctl-fail\"57","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}, {"op": "Var","id": "@\"@ctl-pick\"58","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@fun-satisfy\"59","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@ctl-pick\"58","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"annotation": "genTest: normal: (@ctl-pick: hnd/clause0<bool,std/text/parse/parse,594,595>) -> {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"58\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}"},"annotation": "genExpr: @ctl-pick"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"55\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"55\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"56\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/clause0<sslice/sslice,std/text/parse/parse,594,595>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"56\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"57\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@2: forall<a> hnd/clause1<string,a,std/text/parse/parse,594,595>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"57\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@ctl-pick,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"58\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-pick: hnd/clause0<bool,std/text/parse/parse,594,595>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"58\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"59\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,594,595>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"59\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"55\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"56\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"57\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"58\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"59\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a> fn(hnd: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>){\n  (match (hnd) {\n    ((@skip std/text/parse/@Hnd-parse((@pat@0: int) : int, (@pat@1: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-pick: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n       -> @ctl-pick;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/@select-pick\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/@select-pick"]}, {"name": {"op": "Var","id": "std/text/parse/@select-satisfy","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/text/parse/parse"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse"}},"type_tag": "std/text/parse/parse","clauses": [{"tag": "std/text/parse/@Hnd-parse","params": [{"op": "Var","id": "@\"@cfc\"60","type": {"op": "Int"}}, {"op": "Var","id": "@\"@fun-current-input\"61","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@ctl-fail\"62","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}, {"op": "Var","id": "@\"@ctl-pick\"63","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@fun-satisfy\"64","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@fun-satisfy\"64","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"annotation": "genTest: normal: (@fun-satisfy: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,624,625>) -> {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"64\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}"},"annotation": "genExpr: @fun-satisfy<a>"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"60\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"60\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"61\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/clause0<sslice/sslice,std/text/parse/parse,624,625>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"61\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"62\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@2: forall<a> hnd/clause1<string,a,std/text/parse/parse,624,625>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"62\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"63\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@3: hnd/clause0<bool,std/text/parse/parse,624,625>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"63\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@fun-satisfy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"64\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-satisfy: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,624,625>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"64\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"60\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"61\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"62\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"63\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"64\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),b> fn(hnd: (std/text/parse/parse :: (E, V) -> V)<(e :: E),b>){\n  (match (hnd) {\n    ((@skip std/text/parse/@Hnd-parse((@pat@0: int) : int, (@pat@1: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>, (@pat@2: forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,c,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>) : forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,c,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>, (@pat@3: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>, (@fun-satisfy: (forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(c, sslice/sslice)>,(maybe :: V -> V)<c>,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>)) : (forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(c, sslice/sslice)>,(maybe :: V -> V)<c>,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),b> ) as @pat: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),b>))\n       -> @fun-satisfy<a>;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/@select-satisfy\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/@select-satisfy"]}, {"name": {"op": "Var","id": "std/text/parse/either","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"}],"return": {"op": "Ptr","extern_ptr_name": "\"either\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "perr","type": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "perr","type": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"}},"type_tag": "std/text/parse/parse-error","clauses": [{"tag": "std/text/parse/ParseOk","params": [{"op": "Var","id": "@\"result\"65","type": {"op": "Top"}}, {"op": "Var","id": "@\"rest\"66","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"rest\"66","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@1: string), (@pat@2: int), (@pat@3: int)) : sslice/sslice ) as @pat@0: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"66\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"67","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"68","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"69","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"either\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Right","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"either\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Right<string,a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"result\"65","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 669) -> {\"op\": \"Var\",\"id\": \"@\\\"result\\\"65\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}]},"annotation": "genExpr: std/core/types/Right<string,a>(x)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"perr\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"65\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 669) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"65\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"66\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@1: string), (@pat@2: int), (@pat@3: int)) : sslice/sslice ) as @pat@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"66\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"67\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"67\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"68\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"68\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"69\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"69\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"66\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@1: string), (@pat@2: int), (@pat@3: int)) : sslice/sslice ) as @pat@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"66\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"67\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"68\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"69\",\"type\": {\"op\": \"Int\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"perr\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}: \"std/text/parse/parse-error\".\"std/text/parse/ParseOk\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"65\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"66\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "perr","type": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"}},"type_tag": "std/text/parse/parse-error","clauses": [{"tag": "std/text/parse/ParseError","params": [{"op": "Var","id": "@\"msg\"70","type": {"op": "String"}}, {"op": "Var","id": "@\"rest\"71","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"rest\"71","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as @pat@5: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"71\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"72","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"73","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"74","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"either\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Left","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"either\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Left<string,a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"msg\"70","type": {"op": "String"}},"annotation": "genTest: normal: (msg: string) -> {\"op\": \"Var\",\"id\": \"@\\\"msg\\\"70\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: msg"}]},"annotation": "genExpr: std/core/types/Left<string,a>(msg)"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"perr\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}),(msg,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"msg\\\"70\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (msg: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"msg\\\\\\\"70\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"71\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as @pat@5: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"71\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"72\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"72\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"73\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"73\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"74\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"74\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"71\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as @pat@5: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"71\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"72\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"73\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"74\",\"type\": {\"op\": \"Int\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"perr\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}: \"std/text/parse/parse-error\".\"std/text/parse/ParseError\"(({\"op\": \"Var\",\"id\": \"@\\\"msg\\\"70\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"71\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(perr: (std/text/parse/parse-error :: V -> V)<a>){\n  (match (perr) {\n    ((std/text/parse/ParseOk((x: a) : a, ((@skip std/core/sslice/Sslice((@pat@1: string) : string, (@pat@2: int) : int, (@pat@3: int) : int) : sslice/sslice ) as @pat@0: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat: ((std/text/parse/parse-error :: V -> V)<a>))\n       -> std/core/types/Right<string,a>(x);\n    ((@skip std/text/parse/ParseError((msg: string) : string, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as @pat@5: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat@4: ((std/text/parse/parse-error :: V -> V)<a>))\n       -> std/core/types/Left<string,a>(msg);\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/either\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"either\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/either"]}, {"name": {"op": "Var","id": "std/text/parse/fail","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "msg","type": {"op": "String"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "ev@10083","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"elt\" (fun Pure (ptr int) ptr)) (\"promote_ptr\" ((qualified $\"import$std/core/hnd\":ptr \"getCurrentEvv\" (fun Effectful () ptr)))) $arg0:int)","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/types/@make-ssize_t(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}},"annotation": "genExpr: std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"ev@10083\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}"},"export_as": ["ev@10083"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev@10083","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"75","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"76","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"77","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"78","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hnd\"77","type": {"op": "Top"}},"annotation": "genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"77\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/text/parse/parse","clauses": [{"tag": "std/text/parse/@Hnd-parse","params": [{"op": "Var","id": "@\"@cfc\"79","type": {"op": "Int"}}, {"op": "Var","id": "@\"@fun-current-input\"80","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@ctl-fail\"81","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}, {"op": "Var","id": "@\"@ctl-pick\"82","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@fun-satisfy\"83","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x84","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"value": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@ctl-fail\"81","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"annotation": "genTest: normal: (@ctl-fail: forall<a> hnd/clause1<string,a,std/text/parse/parse,1007,1008>) -> {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"81\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x84","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"type_tag": "std/core/hnd/clause1","clauses": [{"tag": "std/core/hnd/Clause1","params": [{"op": "Var","id": "@\"clause\"85","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"85","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (f: (hnd/marker<1007,1008>, hnd/ev<std/text/parse/parse>, string) -> 1007 722) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"85\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"marker\"76","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genTest: normal: (m: hnd/marker<1007,1008>) -> {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"76\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev@10083","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev@10083"}, {"op": "DebugWrap","inner": {"op": "Var","id": "msg","type": {"op": "String"}},"annotation": "genExpr: msg"}]},"annotation": "genExpr: f(m, ev@10083, msg)"}}]},"annotation": "genBranch: [(@pat@2@1,{\"op\": \"Var\",\"id\": \"@x84\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"85\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1007,1008>, hnd/ev<std/text/parse/parse>, string) -> 1007 722) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"85\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x84\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"85\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((@ctl-fail<a>)) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (1007 :: E) 722) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(e :: E),b> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,722,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>))\n     -> f(m, ev@10083, msg);\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"77\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"77\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"79\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"79\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"80\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/clause0<sslice/sslice,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"80\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@ctl-fail,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"81\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@ctl-fail: forall<a> hnd/clause1<string,a,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"81\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"82\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@2@0: hnd/clause0<bool,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"82\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"83\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"77\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"77\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"79\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"80\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"81\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"82\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (h) {\n  ((@skip std/text/parse/@Hnd-parse((@pat@0@0: int) : int, (@pat@1@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((std/text/parse/parse :: (E, V) -> V)<(1007 :: E),1008>))\n     -> (match ((@ctl-fail<a>)) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (1007 :: E) 722) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(e :: E),b> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,722,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>))\n         -> f(m, ev@10083, msg);\n    });\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10083\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"75\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<std/text/parse/parse>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"75\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"76\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"76\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"77\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"77\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"78\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev@10083\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"75\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"76\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"77\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(std/text/parse/parse :: (E, V) -> V)>(msg: string){\n  val ev@10083 : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>\n        = std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n  (match (ev@10083) {\n    ((@skip std/core/hnd/Ev<(e :: E),b>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),b>) : (hnd/marker :: (E, V) -> V)<(e :: E),b>, (h: (std/text/parse/parse :: (E, V) -> V)<(e :: E),b>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),b>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n       -> (match (h) {\n        ((@skip std/text/parse/@Hnd-parse((@pat@0@0: int) : int, (@pat@1@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>, (@ctl-fail: forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,c,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>) : forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,c,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>, (@pat@2@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>, (@pat@3: (forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(c, sslice/sslice)>,(maybe :: V -> V)<c>,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>)) : (forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(c, sslice/sslice)>,(maybe :: V -> V)<c>,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),b> ) as @pat@2: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),b>))\n           -> (match ((@ctl-fail<a>)) {\n            ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) a) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(e :: E),b> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>))\n               -> f(m, ev@10083, msg);\n          });\n      });\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/fail\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/fail"]}, {"name": {"op": "Var","id": "std/text/parse/satisfy","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "pred","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "ev@10086","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"elt\" (fun Pure (ptr int) ptr)) (\"promote_ptr\" ((qualified $\"import$std/core/hnd\":ptr \"getCurrentEvv\" (fun Effectful () ptr)))) $arg0:int)","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/types/@make-ssize_t(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}},"annotation": "genExpr: std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"ev@10086\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}"},"export_as": ["ev@10086"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev@10086","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"86","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"87","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"88","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"89","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hnd\"88","type": {"op": "Top"}},"annotation": "genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"88\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/text/parse/parse","clauses": [{"tag": "std/text/parse/@Hnd-parse","params": [{"op": "Var","id": "@\"@cfc\"90","type": {"op": "Int"}}, {"op": "Var","id": "@\"@fun-current-input\"91","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@ctl-fail\"92","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}, {"op": "Var","id": "@\"@ctl-pick\"93","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@fun-satisfy\"94","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x95","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"value": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@fun-satisfy\"94","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"annotation": "genTest: normal: (@fun-satisfy: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,1007,1008>) -> {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"94\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x95","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"type_tag": "std/core/hnd/clause1","clauses": [{"tag": "std/core/hnd/Clause1","params": [{"op": "Var","id": "@\"clause\"96","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"96","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (f: (hnd/marker<1007,1008>, hnd/ev<std/text/parse/parse>, (sslice/sslice) -> maybe<(777, sslice/sslice)>) -> 1007 maybe<777>) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"96\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"marker\"87","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genTest: normal: (m: hnd/marker<1007,1008>) -> {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"87\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev@10086","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev@10086"}, {"op": "DebugWrap","inner": {"op": "Var","id": "pred","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: pred"}]},"annotation": "genExpr: f(m, ev@10086, pred)"}}]},"annotation": "genBranch: [(@pat@2@1,{\"op\": \"Var\",\"id\": \"@x95\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"96\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1007,1008>, hnd/ev<std/text/parse/parse>, (sslice/sslice) -> maybe<(777, sslice/sslice)>) -> 1007 maybe<777>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"96\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x95\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"96\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((@fun-satisfy<a>)) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (sslice/sslice) -> (maybe :: V -> V)<(777, sslice/sslice)>) -> (1007 :: E) (maybe :: V -> V)<777>) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>) -> (e :: E) (maybe :: V -> V)<a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(e :: E),b> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(777, sslice/sslice)>,(maybe :: V -> V)<777>,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>))\n     -> f(m, ev@10086, pred);\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"88\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"88\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"90\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"90\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"91\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/clause0<sslice/sslice,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"91\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"92\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@2@0: forall<a> hnd/clause1<string,a,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"92\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"93\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@3: hnd/clause0<bool,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"93\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@fun-satisfy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"94\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-satisfy: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"94\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"88\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"88\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"90\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"91\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"92\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"93\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"94\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (h) {\n  ((@skip std/text/parse/@Hnd-parse((@pat@0@0: int) : int, (@pat@1@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@0: forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@fun-satisfy: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((std/text/parse/parse :: (E, V) -> V)<(1007 :: E),1008>))\n     -> (match ((@fun-satisfy<a>)) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (sslice/sslice) -> (maybe :: V -> V)<(777, sslice/sslice)>) -> (1007 :: E) (maybe :: V -> V)<777>) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>) -> (e :: E) (maybe :: V -> V)<a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(e :: E),b> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(777, sslice/sslice)>,(maybe :: V -> V)<777>,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>))\n         -> f(m, ev@10086, pred);\n    });\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10086\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"86\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<std/text/parse/parse>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"86\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"87\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"87\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"88\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"88\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"89\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"89\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev@10086\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"86\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"87\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"88\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"89\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(std/text/parse/parse :: (E, V) -> V)>(pred: (sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>){\n  val ev@10086 : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>\n        = std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n  (match (ev@10086) {\n    ((@skip std/core/hnd/Ev<(e :: E),b>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),b>) : (hnd/marker :: (E, V) -> V)<(e :: E),b>, (h: (std/text/parse/parse :: (E, V) -> V)<(e :: E),b>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),b>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n       -> (match (h) {\n        ((@skip std/text/parse/@Hnd-parse((@pat@0@0: int) : int, (@pat@1@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>, (@pat@2@0: forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,c,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>) : forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,c,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>, (@pat@3: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>, (@fun-satisfy: (forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(c, sslice/sslice)>,(maybe :: V -> V)<c>,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>)) : (forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(c, sslice/sslice)>,(maybe :: V -> V)<c>,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),b> ) as @pat@2: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),b>))\n           -> (match ((@fun-satisfy<a>)) {\n            ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>) -> (e :: E) (maybe :: V -> V)<a>) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>) -> (e :: E) (maybe :: V -> V)<a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(e :: E),b> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>))\n               -> f(m, ev@10086, pred);\n          });\n      });\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/satisfy\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/satisfy"]}, {"name": {"op": "Var","id": "std/text/parse/satisfy-fail","type": {"op": "Function","params": [{"op": "String"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "msg","type": {"op": "String"}}, {"op": "Var","id": "pred","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "ev@10089","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"elt\" (fun Pure (ptr int) ptr)) (\"promote_ptr\" ((qualified $\"import$std/core/hnd\":ptr \"getCurrentEvv\" (fun Effectful () ptr)))) $arg0:int)","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/types/@make-ssize_t(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}},"annotation": "genExpr: std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"ev@10089\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}"},"export_as": ["ev@10089"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev@10089","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"97","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"98","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"99","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"100","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hnd\"99","type": {"op": "Top"}},"annotation": "genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"99\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/text/parse/parse","clauses": [{"tag": "std/text/parse/@Hnd-parse","params": [{"op": "Var","id": "@\"@cfc\"101","type": {"op": "Int"}}, {"op": "Var","id": "@\"@fun-current-input\"102","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@ctl-fail\"103","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}, {"op": "Var","id": "@\"@ctl-pick\"104","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@fun-satisfy\"105","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x106","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"value": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@fun-satisfy\"105","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"annotation": "genTest: normal: (@fun-satisfy: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,1007,1008>) -> {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"105\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x106","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"type_tag": "std/core/hnd/clause1","clauses": [{"tag": "std/core/hnd/Clause1","params": [{"op": "Var","id": "@\"clause\"107","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x108","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"107","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (f: (hnd/marker<1007,1008>, hnd/ev<std/text/parse/parse>, (sslice/sslice) -> maybe<(810, sslice/sslice)>) -> 1007 maybe<810>) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"107\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"marker\"98","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genTest: normal: (m: hnd/marker<1007,1008>) -> {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"98\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev@10089","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev@10089"}, {"op": "DebugWrap","inner": {"op": "Var","id": "pred","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: pred"}]},"annotation": "genExpr: f(m, ev@10089, pred)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x108","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "ev@0@10092","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"elt\" (fun Pure (ptr int) ptr)) (\"promote_ptr\" ((qualified $\"import$std/core/hnd\":ptr \"getCurrentEvv\" (fun Effectful () ptr)))) $arg0:int)","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/types/@make-ssize_t(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}},"annotation": "genExpr: std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"ev@0@10092\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}"},"export_as": ["ev@0@10092"]}],"body": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev@0@10092","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"109","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"110","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"111","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"112","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hnd\"111","type": {"op": "Top"}},"annotation": "genTest: normal: (h@0: std/text/parse/parse<1007,1008>) -> {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"111\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/text/parse/parse","clauses": [{"tag": "std/text/parse/@Hnd-parse","params": [{"op": "Var","id": "@\"@cfc\"113","type": {"op": "Int"}}, {"op": "Var","id": "@\"@fun-current-input\"114","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@ctl-fail\"115","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}, {"op": "Var","id": "@\"@ctl-pick\"116","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@fun-satisfy\"117","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x118","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"value": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@ctl-fail\"115","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"annotation": "genTest: normal: (@ctl-fail: forall<a> hnd/clause1<string,a,std/text/parse/parse,1007,1008>) -> {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"115\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x118","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"type_tag": "std/core/hnd/clause1","clauses": [{"tag": "std/core/hnd/Clause1","params": [{"op": "Var","id": "@\"clause\"119","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"119","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (f@0: (hnd/marker<1007,1008>, hnd/ev<std/text/parse/parse>, string) -> 1007 810) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"119\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: f@0"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"marker\"110","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genTest: normal: (m@0: hnd/marker<1007,1008>) -> {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"110\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"annotation": "genExpr: m@0"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev@0@10092","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev@0@10092"}, {"op": "DebugWrap","inner": {"op": "Var","id": "msg","type": {"op": "String"}},"annotation": "genExpr: msg"}]},"annotation": "genExpr: f@0(m@0, ev@0@10092, msg)"}}]},"annotation": "genBranch: [(@pat@2@0@0,{\"op\": \"Var\",\"id\": \"@x118\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}),(f@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"119\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f@0: (hnd/marker<1007,1008>, hnd/ev<std/text/parse/parse>, string) -> 1007 810) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"119\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x118\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"119\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((@ctl-fail<a>)) {\n  ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (1007 :: E) 810) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(e :: E),b> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,810,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>))\n     -> f@0(m@0, ev@0@10092, msg);\n}"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"111\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"111\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"113\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"113\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"114\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1@1: hnd/clause0<sslice/sslice,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"114\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@ctl-fail,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"115\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@ctl-fail: forall<a> hnd/clause1<string,a,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"115\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@2@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"116\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@2@2: hnd/clause0<bool,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"116\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"117\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3@1: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"117\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"111\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"111\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"113\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"114\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"115\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"116\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"117\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (h@0) {\n  ((@skip std/text/parse/@Hnd-parse((@pat@0@1: int) : int, (@pat@1@1: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((std/text/parse/parse :: (E, V) -> V)<(1007 :: E),1008>))\n     -> (match ((@ctl-fail<a>)) {\n      ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (1007 :: E) 810) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(e :: E),b> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,810,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>))\n         -> f@0(m@0, ev@0@10092, msg);\n    });\n}"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"ev@0@10092\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"109\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0: hnd/htag<std/text/parse/parse>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"109\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"110\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m@0: hnd/marker<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"110\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"111\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"111\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"112\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1@0@0: hnd/evv<1007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"112\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev@0@10092\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"109\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"110\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"111\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"112\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (ev@0@10092) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1@0@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n     -> (match (h@0) {\n      ((@skip std/text/parse/@Hnd-parse((@pat@0@1: int) : int, (@pat@1@1: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n         -> (match ((@ctl-fail<b>)) {\n          ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) 810) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) b) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,810,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n             -> f@0(m@0, ev@0@10092, msg);\n        });\n    });\n}"}},"annotation": "genExpr: val ev@0@10092 : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>\n      = std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\nmatch (ev@0@10092) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1@0@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n     -> (match (h@0) {\n      ((@skip std/text/parse/@Hnd-parse((@pat@0@1: int) : int, (@pat@1@1: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n         -> (match ((@ctl-fail<b>)) {\n          ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) 810) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) b) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,810,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n             -> f@0(m@0, ev@0@10092, msg);\n        });\n    });\n}"}}]},"annotation": "genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"@x108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x108","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"120","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"120","type": {"op": "Top"}},"annotation": "genTest: normal: (x@1: 810) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"120\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x@1"}}]},"annotation": "genBranch: [(@pat@0@1@0,{\"op\": \"Var\",\"id\": \"@x108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"120\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1: 810) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"120\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"120\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((f(m, ev@10089, pred))) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@3@0: ((maybe :: V -> V)<810>))\n     -> val ev@0@10092 : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>\n              = std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n    (match (ev@0@10092) {\n      ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1@0@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n         -> (match (h@0) {\n          ((@skip std/text/parse/@Hnd-parse((@pat@0@1: int) : int, (@pat@1@1: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n             -> (match ((@ctl-fail<b>)) {\n              ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) 810) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) b) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,810,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n                 -> f@0(m@0, ev@0@10092, msg);\n            });\n        });\n    });\n  ((@skip std/core/types/Just((x@1: 810) : a) : (maybe :: V -> V)<a> ) as @pat@0@1@0: ((maybe :: V -> V)<810>))\n     -> x@1;\n}"}}]},"annotation": "genBranch: [(@pat@2@1,{\"op\": \"Var\",\"id\": \"@x106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"107\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1007,1008>, hnd/ev<std/text/parse/parse>, (sslice/sslice) -> maybe<(810, sslice/sslice)>) -> 1007 maybe<810>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"107\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"107\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((@fun-satisfy<a>)) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (sslice/sslice) -> (maybe :: V -> V)<(810, sslice/sslice)>) -> (1007 :: E) (maybe :: V -> V)<810>) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>) -> (e :: E) (maybe :: V -> V)<a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(e :: E),b> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(810, sslice/sslice)>,(maybe :: V -> V)<810>,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>))\n     -> (match ((f(m, ev@10089, pred))) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@3@0: ((maybe :: V -> V)<810>))\n         -> val ev@0@10092 : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>\n                  = std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n        (match (ev@0@10092) {\n          ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1@0@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n             -> (match (h@0) {\n              ((@skip std/text/parse/@Hnd-parse((@pat@0@1: int) : int, (@pat@1@1: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n                 -> (match ((@ctl-fail<b>)) {\n                  ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) 810) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) b) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,810,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n                     -> f@0(m@0, ev@0@10092, msg);\n                });\n            });\n        });\n      ((@skip std/core/types/Just((x@1: 810) : a) : (maybe :: V -> V)<a> ) as @pat@0@1@0: ((maybe :: V -> V)<810>))\n         -> x@1;\n    });\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"99\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"99\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"101\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"101\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"102\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/clause0<sslice/sslice,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"102\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"103\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@2@0: forall<a> hnd/clause1<string,a,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"103\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"104\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@3: hnd/clause0<bool,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"104\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@fun-satisfy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"105\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-satisfy: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"105\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"99\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"99\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"101\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"102\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"103\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"104\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"105\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (h) {\n  ((@skip std/text/parse/@Hnd-parse((@pat@0@0: int) : int, (@pat@1@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@0: forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@fun-satisfy: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((std/text/parse/parse :: (E, V) -> V)<(1007 :: E),1008>))\n     -> (match ((@fun-satisfy<a>)) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (sslice/sslice) -> (maybe :: V -> V)<(810, sslice/sslice)>) -> (1007 :: E) (maybe :: V -> V)<810>) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>) -> (e :: E) (maybe :: V -> V)<a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(e :: E),b> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(810, sslice/sslice)>,(maybe :: V -> V)<810>,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>))\n         -> (match ((f(m, ev@10089, pred))) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@3@0: ((maybe :: V -> V)<810>))\n             -> val ev@0@10092 : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>\n                      = std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n            (match (ev@0@10092) {\n              ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1@0@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n                 -> (match (h@0) {\n                  ((@skip std/text/parse/@Hnd-parse((@pat@0@1: int) : int, (@pat@1@1: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n                     -> (match ((@ctl-fail<b>)) {\n                      ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) 810) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) b) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,810,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n                         -> f@0(m@0, ev@0@10092, msg);\n                    });\n                });\n            });\n          ((@skip std/core/types/Just((x@1: 810) : a) : (maybe :: V -> V)<a> ) as @pat@0@1@0: ((maybe :: V -> V)<810>))\n             -> x@1;\n        });\n    });\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10089\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"97\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<std/text/parse/parse>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"97\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"98\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"98\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"99\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"99\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"100\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev@10089\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"97\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"98\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"99\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn<(std/text/parse/parse :: (E, V) -> V)>(msg: string, pred: (sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>){\n  val ev@10089 : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>\n        = std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n  (match (ev@10089) {\n    ((@skip std/core/hnd/Ev<(e :: E),b>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),b>) : (hnd/marker :: (E, V) -> V)<(e :: E),b>, (h: (std/text/parse/parse :: (E, V) -> V)<(e :: E),b>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),b>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n       -> (match (h) {\n        ((@skip std/text/parse/@Hnd-parse((@pat@0@0: int) : int, (@pat@1@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>, (@pat@2@0: forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,c,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>) : forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,c,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>, (@pat@3: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>, (@fun-satisfy: (forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(c, sslice/sslice)>,(maybe :: V -> V)<c>,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>)) : (forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(c, sslice/sslice)>,(maybe :: V -> V)<c>,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),b> ) as @pat@2: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),b>))\n           -> (match ((@fun-satisfy<a>)) {\n            ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>) -> (e :: E) (maybe :: V -> V)<a>) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>) -> (e :: E) (maybe :: V -> V)<a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(e :: E),b> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>))\n               -> (match ((f(m, ev@10089, pred))) {\n                ((std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@3@0: ((maybe :: V -> V)<a>))\n                   -> val ev@0@10092 : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>\n                            = std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n                  (match (ev@0@10092) {\n                    ((@skip std/core/hnd/Ev<(e :: E),b>((@pat@0@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),b>) : (hnd/marker :: (E, V) -> V)<(e :: E),b>, (h@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),b>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),b>, (@pat@1@0@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n                       -> (match (h@0) {\n                        ((@skip std/text/parse/@Hnd-parse((@pat@0@1: int) : int, (@pat@1@1: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>, (@ctl-fail: forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,c,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>) : forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,c,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>, (@pat@2@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>, (@pat@3@1: (forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(c, sslice/sslice)>,(maybe :: V -> V)<c>,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>)) : (forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(c, sslice/sslice)>,(maybe :: V -> V)<c>,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),b> ) as @pat@5: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),b>))\n                           -> (match ((@ctl-fail<a>)) {\n                            ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) a) : ((hnd/marker :: (E, V) -> V)<(e :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(e :: E),b> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(e :: E),b>))\n                               -> f@0(m@0, ev@0@10092, msg);\n                          });\n                      });\n                  });\n                ((@skip std/core/types/Just((x@1: a) : a) : (maybe :: V -> V)<a> ) as @pat@0@1@0: ((maybe :: V -> V)<a>))\n                   -> x@1;\n              });\n          });\n      });\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/satisfy-fail\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/satisfy-fail"]}, {"name": {"op": "Var","id": "std/text/parse/char-is","type": {"op": "Function","params": [{"op": "String"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Bool"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"char\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "msg","type": {"op": "String"}}, {"op": "Var","id": "pred","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Bool"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/satisfy-fail","type": {"op": "Function","params": [{"op": "String"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/satisfy-fail<char>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "msg","type": {"op": "String"}},"annotation": "genExpr: msg"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x121","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/next","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/next"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice"}]},"annotation": "genExpr: std/core/sslice/next(slice)"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x121","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"122","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"122","type": {"op": "Top"}},"annotation": "genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"122\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"123","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"124","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "pred","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: pred"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"123","type": {"op": "Top"}},"annotation": "genTest: normal: (c: char) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"123\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: c"}]},"annotation": "genExpr: pred(c)"},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<(char, sslice/sslice)>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<char,sslice/sslice>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"123","type": {"op": "Top"}},"annotation": "genTest: normal: (c: char) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"123\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: c"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"124","type": {"op": "Top"}},"annotation": "genTest: normal: (rest: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"124\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: rest"}]},"annotation": "genExpr: std/core/types/Tuple2<char,sslice/sslice>(c, rest)"}]},"annotation": "genExpr: std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)))"}}}],"default": {"op": "AlternativeFail"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x121\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"122\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"122\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"123\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"123\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"124\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"124\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"122\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"122\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"123\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"124\",\"type\": {\"op\": \"Top\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x121\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"122\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<(char, sslice/sslice)>"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x121\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(slice: sslice/sslice){\n  match ((std/core/sslice/next(slice))) {\n    ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n       | pred(c) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n    (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n       -> std/core/types/Nothing<(char, sslice/sslice)>;\n  };\n}"}]},"annotation": "genExpr: std/text/parse/satisfy-fail<char>(msg, (fn(slice: sslice/sslice){\n    (match ((std/core/sslice/next(slice))) {\n      ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         | pred(c) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n      (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         -> std/core/types/Nothing<(char, sslice/sslice)>;\n    });\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(std/text/parse/parse :: (E, V) -> V)>(msg: string, pred: (char) -> bool){\n  std/text/parse/satisfy-fail<char>(msg, (fn(slice: sslice/sslice){\n      (match ((std/core/sslice/next(slice))) {\n        ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n           | pred(c) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n        (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n           -> std/core/types/Nothing<(char, sslice/sslice)>;\n      });\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/char-is\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/char-is"]}, {"name": {"op": "Var","id": "std/text/parse/alpha","type": {"op": "Function","params": [],"return": {"op": "Ptr","extern_ptr_name": "\"char\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/satisfy-fail","type": {"op": "Function","params": [{"op": "String"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/satisfy-fail<char>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "alpha"},"annotation": "genExpr: \"alpha\""}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x125","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/next","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/next"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice"}]},"annotation": "genExpr: std/core/sslice/next(slice)"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x125","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"126","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"126","type": {"op": "Top"}},"annotation": "genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"126\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"127","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"128","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/char","type": {"op": "Ptr"}},"name": "std/core/char/is-alpha","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: std/core/char/is-alpha"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"127","type": {"op": "Top"}},"annotation": "genTest: normal: (c: char) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"127\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: c"}]},"annotation": "genExpr: std/core/char/is-alpha(c)"},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<(char, sslice/sslice)>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<char,sslice/sslice>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"127","type": {"op": "Top"}},"annotation": "genTest: normal: (c: char) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"127\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: c"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"128","type": {"op": "Top"}},"annotation": "genTest: normal: (rest: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"128\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: rest"}]},"annotation": "genExpr: std/core/types/Tuple2<char,sslice/sslice>(c, rest)"}]},"annotation": "genExpr: std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)))"}}}],"default": {"op": "AlternativeFail"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x125\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"126\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"126\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"127\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"127\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"128\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"128\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"126\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"126\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"127\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"128\",\"type\": {\"op\": \"Top\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x125\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"126\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<(char, sslice/sslice)>"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x125\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(slice: sslice/sslice){\n  match ((std/core/sslice/next(slice))) {\n    ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n       | std/core/char/is-alpha(c) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n    (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n       -> std/core/types/Nothing<(char, sslice/sslice)>;\n  };\n}"}]},"annotation": "genExpr: std/text/parse/satisfy-fail<char>(\"alpha\", (fn(slice: sslice/sslice){\n    (match ((std/core/sslice/next(slice))) {\n      ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         | std/core/char/is-alpha(c) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n      (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         -> std/core/types/Nothing<(char, sslice/sslice)>;\n    });\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(std/text/parse/parse :: (E, V) -> V)>(){\n  std/text/parse/satisfy-fail<char>(\"alpha\", (fn(slice: sslice/sslice){\n      (match ((std/core/sslice/next(slice))) {\n        ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n           | std/core/char/is-alpha(c) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n        (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n           -> std/core/types/Nothing<(char, sslice/sslice)>;\n      });\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/alpha\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/alpha"]}, {"name": {"op": "Var","id": "std/text/parse/alpha-num","type": {"op": "Function","params": [],"return": {"op": "Ptr","extern_ptr_name": "\"char\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/satisfy-fail","type": {"op": "Function","params": [{"op": "String"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/satisfy-fail<char>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "alpha-num"},"annotation": "genExpr: \"alpha-num\""}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x129","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/next","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/next"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice"}]},"annotation": "genExpr: std/core/sslice/next(slice)"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x129","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"130","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"130","type": {"op": "Top"}},"annotation": "genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"130\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"131","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"132","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/char","type": {"op": "Ptr"}},"name": "std/core/char/is-alpha-num","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: std/core/char/is-alpha-num"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"131","type": {"op": "Top"}},"annotation": "genTest: normal: (c: char) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"131\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: c"}]},"annotation": "genExpr: std/core/char/is-alpha-num(c)"},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<(char, sslice/sslice)>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<char,sslice/sslice>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"131","type": {"op": "Top"}},"annotation": "genTest: normal: (c: char) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"131\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: c"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"132","type": {"op": "Top"}},"annotation": "genTest: normal: (rest: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"132\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: rest"}]},"annotation": "genExpr: std/core/types/Tuple2<char,sslice/sslice>(c, rest)"}]},"annotation": "genExpr: std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)))"}}}],"default": {"op": "AlternativeFail"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x129\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"130\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"130\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"131\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"131\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"132\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"132\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"130\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"130\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"131\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"132\",\"type\": {\"op\": \"Top\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x129\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"130\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<(char, sslice/sslice)>"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x129\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(slice: sslice/sslice){\n  match ((std/core/sslice/next(slice))) {\n    ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n       | std/core/char/is-alpha-num(c) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n    (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n       -> std/core/types/Nothing<(char, sslice/sslice)>;\n  };\n}"}]},"annotation": "genExpr: std/text/parse/satisfy-fail<char>(\"alpha-num\", (fn(slice: sslice/sslice){\n    (match ((std/core/sslice/next(slice))) {\n      ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         | std/core/char/is-alpha-num(c) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n      (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         -> std/core/types/Nothing<(char, sslice/sslice)>;\n    });\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(std/text/parse/parse :: (E, V) -> V)>(){\n  std/text/parse/satisfy-fail<char>(\"alpha-num\", (fn(slice: sslice/sslice){\n      (match ((std/core/sslice/next(slice))) {\n        ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n           | std/core/char/is-alpha-num(c) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n        (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n           -> std/core/types/Nothing<(char, sslice/sslice)>;\n      });\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/alpha-num\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/alpha-num"]}, {"name": {"op": "Var","id": "std/text/parse/char","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Ptr","extern_ptr_name": "\"char\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "msg@10006","type": {"op": "String"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "\'"},"annotation": "genExpr: \"\\x27\""}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/show","type": {"op": "Ptr"}},"name": "std/core/show/show-char","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/show/show-char"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}},"annotation": "genExpr: c"}]},"annotation": "genExpr: std/core/show/show-char(c)"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "\'"},"annotation": "genExpr: \"\\x27\""}]},"annotation": "genExpr: std/core/types/(++)((std/core/show/show-char(c)), \"\\x27\")"}]},"annotation": "genExpr: std/core/types/(++)(\"\\x27\", (std/core/types/(++)((std/core/show/show-char(c)), \"\\x27\")))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"msg@10006\",\"type\": {\"op\": \"String\"}}"},"export_as": ["msg@10006"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/satisfy-fail","type": {"op": "Function","params": [{"op": "String"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/satisfy-fail<char>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "msg@10006","type": {"op": "String"}},"annotation": "genExpr: msg@10006"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x133","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/next","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/next"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice"}]},"annotation": "genExpr: std/core/sslice/next(slice)"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x133","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"134","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"134","type": {"op": "Top"}},"annotation": "genTest: normal: ((std/core/types/Tuple2((c@0: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"134\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"135","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"136","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "DebugWrap","inner": {"op": "Primitive","name": "(#1 == #2)","args": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"135","type": {"op": "Top"}},"annotation": "genTest: normal: (c@0: char) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"135\",\"type\": {\"op\": \"Top\"}}"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/char/(==)(c, c@0)"},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<(char, sslice/sslice)>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<char,sslice/sslice>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"135","type": {"op": "Top"}},"annotation": "genTest: normal: (c@0: char) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"135\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: c@0"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"136","type": {"op": "Top"}},"annotation": "genTest: normal: (rest: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"136\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: rest"}]},"annotation": "genExpr: std/core/types/Tuple2<char,sslice/sslice>(c@0, rest)"}]},"annotation": "genExpr: std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c@0, rest)))"}}}],"default": {"op": "AlternativeFail"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"134\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c@0: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"134\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"135\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c@0: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"135\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"136\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"136\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"134\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c@0: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"134\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"135\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"136\",\"type\": {\"op\": \"Top\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"134\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<(char, sslice/sslice)>"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(slice: sslice/sslice){\n  match ((std/core/sslice/next(slice))) {\n    ((std/core/types/Just(((std/core/types/Tuple2((c@0: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n       | std/core/char/(==)(c, c@0) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c@0, rest)));\n    (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n       -> std/core/types/Nothing<(char, sslice/sslice)>;\n  };\n}"}]},"annotation": "genExpr: std/text/parse/satisfy-fail<char>(msg@10006, (fn(slice: sslice/sslice){\n    (match ((std/core/sslice/next(slice))) {\n      ((std/core/types/Just(((std/core/types/Tuple2((c@0: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         | std/core/char/(==)(c, c@0) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c@0, rest)));\n      (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         -> std/core/types/Nothing<(char, sslice/sslice)>;\n    });\n  }))"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(std/text/parse/parse :: (E, V) -> V)>(c: char){\n  val msg@10006 : string\n        = std/core/types/(++)(\"\\x27\", (std/core/types/(++)((std/core/show/show-char(c)), \"\\x27\")));\n  std/text/parse/satisfy-fail<char>(msg@10006, (fn(slice: sslice/sslice){\n      (match ((std/core/sslice/next(slice))) {\n        ((std/core/types/Just(((std/core/types/Tuple2((c@0: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n           | std/core/char/(==)(c, c@0) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c@0, rest)));\n        (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n           -> std/core/types/Nothing<(char, sslice/sslice)>;\n      });\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/char\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/char"]}, {"name": {"op": "Var","id": "std/text/parse/next-while0","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Bool"},"purity": "Effectful"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}, {"op": "Var","id": "pred","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Bool"},"purity": "Effectful"}}, {"op": "Var","id": "acc","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x137","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/next","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/next"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice"}]},"annotation": "genExpr: std/core/sslice/next(slice)"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x137","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"138","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"138","type": {"op": "Top"}},"annotation": "genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"138\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"139","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"140","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "pred","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: pred"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"139","type": {"op": "Top"}},"annotation": "genTest: normal: (c: char) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"139\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: c"}]},"annotation": "genExpr: pred(c)"},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/next-while0","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Bool"},"purity": "Effectful"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/next-while0"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"140","type": {"op": "Top"}},"annotation": "genTest: normal: (rest: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"140\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: rest"}, {"op": "DebugWrap","inner": {"op": "Var","id": "pred","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: pred"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<char>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"139","type": {"op": "Top"}},"annotation": "genTest: normal: (c: char) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"139\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: c"}, {"op": "DebugWrap","inner": {"op": "Var","id": "acc","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: acc"}]},"annotation": "genExpr: std/core/types/Cons<char>(c, acc)"}]},"annotation": "genExpr: std/text/parse/next-while0(rest, pred, (std/core/types/Cons<char>(c, acc)))"}}}],"default": {"op": "AlternativeFail"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"138\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"138\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"139\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"139\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"140\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"140\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"138\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"138\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"139\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"140\",\"type\": {\"op\": \"Top\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"138\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/list","type": {"op": "Ptr"}},"name": "std/core/list/@lift-reverse-append@4790","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-reverse-append@4790<char>"},"args": [{"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<char>"}, {"op": "DebugWrap","inner": {"op": "Var","id": "acc","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: acc"}]},"annotation": "genExpr: std/core/list/@lift-reverse-append@4790<char>((std/core/types/Nil<char>), acc)"}, {"op": "DebugWrap","inner": {"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice"}]},"annotation": "genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>((std/core/list/@lift-reverse-append@4790<char>((std/core/types/Nil<char>), acc)), slice)"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(slice: sslice/sslice, pred: (char) -> bool, acc: (list :: V -> V)<char>){\n  match ((std/core/sslice/next(slice))) {\n    ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n       | pred(c) -> std/text/parse/next-while0(rest, pred, (std/core/types/Cons<char>(c, acc)));\n    (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n       -> std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>((std/core/list/@lift-reverse-append@4790<char>((std/core/types/Nil<char>), acc)), slice);\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/next-while0\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/next-while0"]}, {"name": {"op": "Var","id": "std/text/parse/chars-are","type": {"op": "Function","params": [{"op": "String"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Bool"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "msg","type": {"op": "String"}}, {"op": "Var","id": "pred","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Bool"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/satisfy-fail","type": {"op": "Function","params": [{"op": "String"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/satisfy-fail<(list :: V -> V)<char>>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "msg","type": {"op": "String"}},"annotation": "genExpr: msg"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x141","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/next-while0","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Bool"},"purity": "Effectful"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/next-while0"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice"}, {"op": "DebugWrap","inner": {"op": "Var","id": "pred","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: pred"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<char>"}]},"annotation": "genExpr: std/text/parse/next-while0(slice, pred, (std/core/types/Nil<char>))"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x141","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"142","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"143","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"142","type": {"op": "Top"}},"annotation": "genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"142\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"143","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"143\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"144","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"145","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"146","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x141\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"142\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"142\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"143\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"143\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"144\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"144\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"145\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"145\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"146\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@4: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"146\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"143\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"143\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"144\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"145\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"146\",\"type\": {\"op\": \"Int\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"142\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"142\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x141\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"142\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"143\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x141","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"147","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"148","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"148","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"148\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"149","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"150","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"151","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"147","type": {"op": "Top"}},"annotation": "genTest: normal: (xs: list<char>) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"147\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: xs"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"148","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"148\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: rest"}]},"annotation": "genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)"}]},"annotation": "genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x141\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"147\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"147\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"148\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"149\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"149\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"150\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"150\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"151\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"151\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"148\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"149\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"150\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"151\",\"type\": {\"op\": \"Int\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x141\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"147\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"148\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(slice: sslice/sslice){\n  match ((std/text/parse/next-while0(slice, pred, (std/core/types/Nil<char>)))) {\n    ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n       -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n    ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n       -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n  };\n}"}]},"annotation": "genExpr: std/text/parse/satisfy-fail<(list :: V -> V)<char>>(msg, (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, pred, (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(std/text/parse/parse :: (E, V) -> V)>(msg: string, pred: (char) -> bool){\n  std/text/parse/satisfy-fail<(list :: V -> V)<char>>(msg, (fn(slice: sslice/sslice){\n      (match ((std/text/parse/next-while0(slice, pred, (std/core/types/Nil<char>)))) {\n        ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n           -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n        ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n           -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n      });\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/chars-are\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/chars-are"]}, {"name": {"op": "Var","id": "std/text/parse/pick","type": {"op": "Function","params": [],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "ev@10095","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"elt\" (fun Pure (ptr int) ptr)) (\"promote_ptr\" ((qualified $\"import$std/core/hnd\":ptr \"getCurrentEvv\" (fun Effectful () ptr)))) $arg0:int)","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/types/@make-ssize_t(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}},"annotation": "genExpr: std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"ev@10095\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}"},"export_as": ["ev@10095"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev@10095","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"152","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"153","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"154","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"155","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hnd\"154","type": {"op": "Top"}},"annotation": "genTest: normal: (h: std/text/parse/parse<1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"154\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/text/parse/parse","clauses": [{"tag": "std/text/parse/@Hnd-parse","params": [{"op": "Var","id": "@\"@cfc\"156","type": {"op": "Int"}}, {"op": "Var","id": "@\"@fun-current-input\"157","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@ctl-fail\"158","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}, {"op": "Var","id": "@\"@ctl-pick\"159","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@fun-satisfy\"160","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@ctl-pick\"159","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"annotation": "genTest: normal: (@ctl-pick: hnd/clause0<bool,std/text/parse/parse,1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"159\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}"},"type_tag": "std/core/hnd/clause0","clauses": [{"tag": "std/core/hnd/Clause0","params": [{"op": "Var","id": "@\"clause\"161","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:(debugWrap \"cast-clause0\" $arg0:top)","args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"161","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<std/text/parse/parse>) -> 1005 bool) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"161\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: f"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f)"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"marker\"153","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genTest: normal: (m: hnd/marker<1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev@10095","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev@10095"}]},"annotation": "genExpr: std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f)(m, ev@10095)"}}]},"annotation": "genBranch: [(@pat@2@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"159\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-pick: hnd/clause0<bool,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"159\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"161\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<std/text/parse/parse>) -> 1005 bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"161\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"159\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-pick: hnd/clause0<bool,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"159\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"161\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@ctl-pick) {\n  ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f)(m, ev@10095);\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"154\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"154\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"156\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"156\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"157\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/clause0<sslice/sslice,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"157\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"158\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@2@0: forall<a> hnd/clause1<string,a,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"158\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@ctl-pick,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"159\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-pick: hnd/clause0<bool,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"159\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"160\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"160\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"154\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"154\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"156\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"157\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"158\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"159\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"160\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (h) {\n  ((@skip std/text/parse/@Hnd-parse((@pat@0@0: int) : int, (@pat@1@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@0: forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-pick: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((std/text/parse/parse :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match (@ctl-pick) {\n      ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f)(m, ev@10095);\n    });\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10095\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"152\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<std/text/parse/parse>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"152\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"153\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"154\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"154\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"155\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"155\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev@10095\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"152\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"154\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"155\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(std/text/parse/parse :: (E, V) -> V)>(){\n  val ev@10095 : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>\n        = std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n  match (ev@10095) {\n    ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n       -> (match (h) {\n        ((@skip std/text/parse/@Hnd-parse((@pat@0@0: int) : int, (@pat@1@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@0: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-pick: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n           -> (match (@ctl-pick) {\n            ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n               -> std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f)(m, ev@10095);\n          });\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/pick\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/pick"]}, {"name": {"op": "Var","id": "std/text/parse/choose","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "ps","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ps","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@open-at1","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@open-at1<string,a,(std/text/parse/parse :: (E, V) -> V),<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@evv-index","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@evv-index<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/@tag-parse","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}},"annotation": "genExpr: std/text/parse/@tag-parse"}]},"annotation": "genExpr: std/core/hnd/@evv-index<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V)>(std/text/parse/@tag-parse)"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "msg","type": {"op": "String"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "ev@10097","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"elt\" (fun Pure (ptr int) ptr)) (\"promote_ptr\" ((qualified $\"import$std/core/hnd\":ptr \"getCurrentEvv\" (fun Effectful () ptr)))) $arg0:int)","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/types/@make-ssize_t(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}},"annotation": "genExpr: std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"ev@10097\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}"},"export_as": ["ev@10097"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev@10097","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"162","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"163","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"164","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"165","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hnd\"164","type": {"op": "Top"}},"annotation": "genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"164\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/text/parse/parse","clauses": [{"tag": "std/text/parse/@Hnd-parse","params": [{"op": "Var","id": "@\"@cfc\"166","type": {"op": "Int"}}, {"op": "Var","id": "@\"@fun-current-input\"167","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@ctl-fail\"168","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}, {"op": "Var","id": "@\"@ctl-pick\"169","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@fun-satisfy\"170","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x171","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"value": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@ctl-fail\"168","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"annotation": "genTest: normal: (@ctl-fail: forall<a> hnd/clause1<string,a,std/text/parse/parse,1007,1008>) -> {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"168\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x171","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"type_tag": "std/core/hnd/clause1","clauses": [{"tag": "std/core/hnd/Clause1","params": [{"op": "Var","id": "@\"clause\"172","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"172","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (f: (hnd/marker<1007,1008>, hnd/ev<std/text/parse/parse>, string) -> 1007 1144) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"172\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"marker\"163","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genTest: normal: (m: hnd/marker<1007,1008>) -> {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"163\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev@10097","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev@10097"}, {"op": "DebugWrap","inner": {"op": "Var","id": "msg","type": {"op": "String"}},"annotation": "genExpr: msg"}]},"annotation": "genExpr: f(m, ev@10097, msg)"}}]},"annotation": "genBranch: [(@pat@2@1,{\"op\": \"Var\",\"id\": \"@x171\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"172\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1007,1008>, hnd/ev<std/text/parse/parse>, string) -> 1007 1144) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"172\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x171\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"172\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((@ctl-fail<a>)) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (1007 :: E) 1144) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) b) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,1144,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>))\n     -> f(m, ev@10097, msg);\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"164\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"164\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"166\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"166\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"167\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/clause0<sslice/sslice,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"167\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@ctl-fail,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"168\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@ctl-fail: forall<a> hnd/clause1<string,a,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"168\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"169\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@2@0: hnd/clause0<bool,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"169\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"170\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"170\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"164\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"164\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"166\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"167\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"168\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"169\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"170\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (h) {\n  ((@skip std/text/parse/@Hnd-parse((@pat@0@1: int) : int, (@pat@1@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((std/text/parse/parse :: (E, V) -> V)<(1007 :: E),1008>))\n     -> (match ((@ctl-fail<a>)) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (1007 :: E) 1144) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) b) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,1144,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>))\n         -> f(m, ev@10097, msg);\n    });\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"ev@10097\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"162\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@0: hnd/htag<std/text/parse/parse>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"162\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"163\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"163\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"164\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"164\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"165\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"165\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev@10097\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"162\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"163\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"164\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"165\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(std/text/parse/parse :: (E, V) -> V)>(msg: string){\n  val ev@10097 : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>\n        = std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n  match (ev@10097) {\n    ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@0: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n       -> (match (h) {\n        ((@skip std/text/parse/@Hnd-parse((@pat@0@1: int) : int, (@pat@1@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n           -> (match ((@ctl-fail<b>)) {\n            ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) 1144) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) c) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,c,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,1144,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n               -> f(m, ev@10097, msg);\n          });\n      });\n  };\n}"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "no further alternatives"},"annotation": "genExpr: \"no further alternatives\""}]},"annotation": "genExpr: std/core/hnd/@open-at1<string,a,(std/text/parse/parse :: (E, V) -> V),<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>((std/core/hnd/@evv-index<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V)>(std/text/parse/@tag-parse)), (fn<(std/text/parse/parse :: (E, V) -> V)>(msg: string){\n    val ev@10097 : ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>)\n          = (std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n    (match (ev@10097) {\n      ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@0: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n         -> (match (h) {\n          ((@skip std/text/parse/@Hnd-parse((@pat@0@1: int) : int, (@pat@1@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n             -> (match ((@ctl-fail<b>)) {\n              ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) 1144) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) c) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,c,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,1144,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n                 -> f(m, ev@10097, msg);\n            });\n        });\n    });\n  }), \"no further alternatives\")"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ps","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"173","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"174","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"174","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: ((std/core/types/Nil() : list<std/text/parse/parser<e,a>> ) as @pat@1@0@0: list<std/text/parse/parser<1145,1144>>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"174\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"173","type": {"op": "Top"}},"annotation": "genTest: normal: (p: std/text/parse/parser<1145,1144>) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"173\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: p"},"args": []},"annotation": "genExpr: p()"}}]},"annotation": "genBranch: [(@pat@0@1@0,{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(p,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"173\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (p: std/text/parse/parser<1145,1144>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"173\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"174\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<std/text/parse/parser<e,a>> ) as @pat@1@0@0: list<std/text/parse/parser<1145,1144>>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"174\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"174\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<std/text/parse/parser<e,a>> ) as @pat@1@0@0: list<std/text/parse/parser<1145,1144>>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"174\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"173\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"174\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ps","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"175","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"176","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x177","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@open-at0","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@open-at0<bool,(std/text/parse/parse :: (E, V) -> V),<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@evv-index","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@evv-index<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/@tag-parse","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}},"annotation": "genExpr: std/text/parse/@tag-parse"}]},"annotation": "genExpr: std/core/hnd/@evv-index<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V)>(std/text/parse/@tag-parse)"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "ev@0@10100","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"elt\" (fun Pure (ptr int) ptr)) (\"promote_ptr\" ((qualified $\"import$std/core/hnd\":ptr \"getCurrentEvv\" (fun Effectful () ptr)))) $arg0:int)","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/types/@make-ssize_t(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}},"annotation": "genExpr: std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"ev@0@10100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}"},"export_as": ["ev@0@10100"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev@0@10100","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"178","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"179","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"180","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"181","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hnd\"180","type": {"op": "Top"}},"annotation": "genTest: normal: (h@0: std/text/parse/parse<1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"180\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/text/parse/parse","clauses": [{"tag": "std/text/parse/@Hnd-parse","params": [{"op": "Var","id": "@\"@cfc\"182","type": {"op": "Int"}}, {"op": "Var","id": "@\"@fun-current-input\"183","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@ctl-fail\"184","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}, {"op": "Var","id": "@\"@ctl-pick\"185","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@fun-satisfy\"186","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@ctl-pick\"185","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"annotation": "genTest: normal: (@ctl-pick: hnd/clause0<bool,std/text/parse/parse,1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"185\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}"},"type_tag": "std/core/hnd/clause0","clauses": [{"tag": "std/core/hnd/Clause0","params": [{"op": "Var","id": "@\"clause\"187","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:(debugWrap \"cast-clause0\" $arg0:top)","args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"187","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (f@0: (hnd/marker<1005,1006>, hnd/ev<std/text/parse/parse>) -> 1005 bool) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"187\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: f@0"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f@0)"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"marker\"179","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genTest: normal: (m@0: hnd/marker<1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"179\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"annotation": "genExpr: m@0"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev@0@10100","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev@0@10100"}]},"annotation": "genExpr: std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f@0)(m@0, ev@0@10100)"}}]},"annotation": "genBranch: [(@pat@2@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"185\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-pick: hnd/clause0<bool,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"185\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(f@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"187\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f@0: (hnd/marker<1005,1006>, hnd/ev<std/text/parse/parse>) -> 1005 bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"187\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"185\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-pick: hnd/clause0<bool,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"185\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"187\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@ctl-pick) {\n  ((@skip std/core/hnd/Clause0((f@0: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f@0)(m@0, ev@0@10100);\n}"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"180\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: std/text/parse/parse<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"180\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"182\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"182\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"183\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1@2: hnd/clause0<sslice/sslice,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"183\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@2@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"184\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@2@2: forall<a> hnd/clause1<string,a,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"184\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@ctl-pick,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"185\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-pick: hnd/clause0<bool,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"185\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"186\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3@1: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"186\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"180\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: std/text/parse/parse<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"180\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"182\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"183\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"184\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"185\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"186\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (h@0) {\n  ((@skip std/text/parse/@Hnd-parse((@pat@0@3: int) : int, (@pat@1@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-pick: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@4: ((std/text/parse/parse :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match (@ctl-pick) {\n      ((@skip std/core/hnd/Clause0((f@0: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f@0)(m@0, ev@0@10100);\n    });\n}"}}]},"annotation": "genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"ev@0@10100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"178\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@2: hnd/htag<std/text/parse/parse>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"178\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"179\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m@0: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"179\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"180\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: std/text/parse/parse<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"180\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"181\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1@1: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"181\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev@0@10100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"178\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"179\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"180\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"181\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(std/text/parse/parse :: (E, V) -> V)>(){\n  val ev@0@10100 : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>\n        = std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n  match (ev@0@10100) {\n    ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@2: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@3@0: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n       -> (match (h@0) {\n        ((@skip std/text/parse/@Hnd-parse((@pat@0@3: int) : int, (@pat@1@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-pick: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@4: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n           -> (match (@ctl-pick) {\n            ((@skip std/core/hnd/Clause0((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n               -> std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f@0)(m@0, ev@0@10100);\n          });\n      });\n  };\n}"}]},"annotation": "genExpr: std/core/hnd/@open-at0<bool,(std/text/parse/parse :: (E, V) -> V),<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>((std/core/hnd/@evv-index<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V)>(std/text/parse/@tag-parse)), (fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    val ev@0@10100 : ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>)\n          = (std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n    (match (ev@0@10100) {\n      ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@2: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@3@0: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n         -> (match (h@0) {\n          ((@skip std/text/parse/@Hnd-parse((@pat@0@3: int) : int, (@pat@1@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-pick: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@4: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n             -> (match (@ctl-pick) {\n              ((@skip std/core/hnd/Clause0((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n                 -> std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f@0)(m@0, ev@0@10100);\n            });\n        });\n    });\n  }))"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x177","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"175","type": {"op": "Top"}},"annotation": "genTest: normal: (p@0: std/text/parse/parser<1145,1144>) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"175\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: p@0"},"args": []},"annotation": "genExpr: p@0()"}}]},"annotation": "genBranch: [(@pat@3@0@0,{\"op\": \"Var\",\"id\": \"@x177\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x177","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/choose","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/choose<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"176","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (pp: list<std/text/parse/parser<1145,1144>>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"176\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: pp"}]},"annotation": "genExpr: std/text/parse/choose<a,(e :: E)>(pp)"}}]},"annotation": "genBranch: [(@pat@4@0,{\"op\": \"Var\",\"id\": \"@x177\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/hnd/@open-at0<bool,(std/text/parse/parse :: (E, V) -> V),<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>((std/core/hnd/@evv-index<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V)>(std/text/parse/@tag-parse)), (fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    val ev@0@10100 : ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>)\n          = (std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n    (match (ev@0@10100) {\n      ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@2: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@3@0: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n         -> (match (h@0) {\n          ((@skip std/text/parse/@Hnd-parse((@pat@0@3: int) : int, (@pat@1@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-pick: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@4: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n             -> (match (@ctl-pick) {\n              ((@skip std/core/hnd/Clause0((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n                 -> std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f@0)(m@0, ev@0@10100);\n            });\n        });\n    });\n  })))) {\n  ((std/core/types/True() : bool ) as @pat@3@0@0: bool)\n     -> p@0();\n  ((@skip std/core/types/False() : bool ) as @pat@4@0: bool)\n     -> std/text/parse/choose<a,(e :: E)>(pp);\n}"}}]},"annotation": "genBranch: [(@pat@2@0@0,{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(p@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"175\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (p@0: std/text/parse/parser<1145,1144>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"175\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(pp,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"176\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (pp: list<std/text/parse/parser<1145,1144>>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"176\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"175\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"176\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>(ps: (list :: V -> V)<(std/text/parse/parser :: (E, V) -> V)<(e :: E),a>>){\n  (match (ps) {\n    ((std/core/types/Nil() : (list :: V -> V)<(std/text/parse/parser :: (E, V) -> V)<(e :: E),a>> ) as @pat: ((list :: V -> V)<(std/text/parse/parser :: (E, V) -> V)<(e :: E),a>>))\n       -> std/core/hnd/@open-at1<string,a,(std/text/parse/parse :: (E, V) -> V),<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>((std/core/hnd/@evv-index<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V)>(std/text/parse/@tag-parse)), (fn<(std/text/parse/parse :: (E, V) -> V)>(msg: string){\n          val ev@10097 : ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>)\n                = (std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n          (match (ev@10097) {\n            ((@skip std/core/hnd/Ev<(e1 :: E),b>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e1 :: E),b>) : (hnd/marker :: (E, V) -> V)<(e1 :: E),b>, (h: (std/text/parse/parse :: (E, V) -> V)<(e1 :: E),b>) : (std/text/parse/parse :: (E, V) -> V)<(e1 :: E),b>, (@pat@1: (hnd/evv :: E -> V)<(e1 :: E)>) : (hnd/evv :: E -> V)<(e1 :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@0: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n               -> (match (h) {\n                ((@skip std/text/parse/@Hnd-parse((@pat@0@1: int) : int, (@pat@1@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e1 :: E),b>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e1 :: E),b>, (@ctl-fail: forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,c,(std/text/parse/parse :: (E, V) -> V),(e1 :: E),b>) : forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,c,(std/text/parse/parse :: (E, V) -> V),(e1 :: E),b>, (@pat@2@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e1 :: E),b>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e1 :: E),b>, (@pat@3: (forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(c, sslice/sslice)>,(maybe :: V -> V)<c>,(std/text/parse/parse :: (E, V) -> V),(e1 :: E),b>)) : (forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(c, sslice/sslice)>,(maybe :: V -> V)<c>,(std/text/parse/parse :: (E, V) -> V),(e1 :: E),b>)) : (std/text/parse/parse :: (E, V) -> V)<(e1 :: E),b> ) as @pat@2: ((std/text/parse/parse :: (E, V) -> V)<(e1 :: E),b>))\n                   -> (match ((@ctl-fail<a>)) {\n                    ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(e1 :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e1 :: E) a) : ((hnd/marker :: (E, V) -> V)<(e1 :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e1 :: E) a) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(e1 :: E),b> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(e1 :: E),b>))\n                       -> f(m, ev@10097, msg);\n                  });\n              });\n          });\n        }), \"no further alternatives\");\n    ((@skip std/core/types/Cons((p: (std/text/parse/parser :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parser :: (E, V) -> V)<(e :: E),a>, ((std/core/types/Nil() : (list :: V -> V)<(std/text/parse/parser :: (E, V) -> V)<(e :: E),a>> ) as @pat@1@0@0: (list :: V -> V)<(std/text/parse/parser :: (E, V) -> V)<(e :: E),a>>) : (list :: V -> V)<(std/text/parse/parser :: (E, V) -> V)<(e :: E),a>>) : (list :: V -> V)<(std/text/parse/parser :: (E, V) -> V)<(e :: E),a>> ) as @pat@0@1@0: ((list :: V -> V)<(std/text/parse/parser :: (E, V) -> V)<(e :: E),a>>))\n       -> p();\n    ((@skip std/core/types/Cons((p@0: (std/text/parse/parser :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parser :: (E, V) -> V)<(e :: E),a>, (pp: (list :: V -> V)<(std/text/parse/parser :: (E, V) -> V)<(e :: E),a>>) : (list :: V -> V)<(std/text/parse/parser :: (E, V) -> V)<(e :: E),a>>) : (list :: V -> V)<(std/text/parse/parser :: (E, V) -> V)<(e :: E),a>> ) as @pat@2@0@0: ((list :: V -> V)<(std/text/parse/parser :: (E, V) -> V)<(e :: E),a>>))\n       -> (match ((std/core/hnd/@open-at0<bool,(std/text/parse/parse :: (E, V) -> V),<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>((std/core/hnd/@evv-index<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V)>(std/text/parse/@tag-parse)), (fn<(std/text/parse/parse :: (E, V) -> V)>(){\n          val ev@0@10100 : ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>)\n                = (std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n          (match (ev@0@10100) {\n            ((@skip std/core/hnd/Ev<(e1 :: E),b>((@pat@0@2: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e1 :: E),b>) : (hnd/marker :: (E, V) -> V)<(e1 :: E),b>, (h@0: (std/text/parse/parse :: (E, V) -> V)<(e1 :: E),b>) : (std/text/parse/parse :: (E, V) -> V)<(e1 :: E),b>, (@pat@1@1: (hnd/evv :: E -> V)<(e1 :: E)>) : (hnd/evv :: E -> V)<(e1 :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@3@0: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n               -> (match (h@0) {\n                ((@skip std/text/parse/@Hnd-parse((@pat@0@3: int) : int, (@pat@1@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e1 :: E),b>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e1 :: E),b>, (@pat@2@2: forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,c,(std/text/parse/parse :: (E, V) -> V),(e1 :: E),b>) : forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,c,(std/text/parse/parse :: (E, V) -> V),(e1 :: E),b>, (@ctl-pick: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e1 :: E),b>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e1 :: E),b>, (@pat@3@1: (forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(c, sslice/sslice)>,(maybe :: V -> V)<c>,(std/text/parse/parse :: (E, V) -> V),(e1 :: E),b>)) : (forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(c, sslice/sslice)>,(maybe :: V -> V)<c>,(std/text/parse/parse :: (E, V) -> V),(e1 :: E),b>)) : (std/text/parse/parse :: (E, V) -> V)<(e1 :: E),b> ) as @pat@4: ((std/text/parse/parse :: (E, V) -> V)<(e1 :: E),b>))\n                   -> (match (@ctl-pick) {\n                    ((@skip std/core/hnd/Clause0((f@0: ((hnd/marker :: (E, V) -> V)<(e1 :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e1 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e1 :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e1 :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e1 :: E),b> ) as @pat@2@1@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e1 :: E),b>))\n                       -> std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e1 :: E),(std/text/parse/parse :: (E, V) -> V),b>(f@0)(m@0, ev@0@10100);\n                  });\n              });\n          });\n        })))) {\n        ((std/core/types/True() : bool ) as @pat@3@0@0: bool)\n           -> p@0();\n        ((@skip std/core/types/False() : bool ) as @pat@4@0: bool)\n           -> std/text/parse/choose<a,(e :: E)>(pp);\n      });\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/choose\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/choose"]}, {"name": {"op": "Var","id": "std/text/parse/count-acc","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Var","id": "acc","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "p","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLte(Int, Int): Boolean","args": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/list","type": {"op": "Ptr"}},"name": "std/core/list/@lift-reverse-append@4790","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-reverse-append@4790<a>"},"args": [{"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}, {"op": "DebugWrap","inner": {"op": "Var","id": "acc","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: acc"}]},"annotation": "genExpr: std/core/list/@lift-reverse-append@4790<a>((std/core/types/Nil<a>), acc)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLte(Int, Int): Boolean","args": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "x","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "p","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: p"},"args": []},"annotation": "genExpr: p()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["x"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/count-acc","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/count-acc<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub(n, 1)"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "Var","id": "acc","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: acc"}]},"annotation": "genExpr: std/core/types/Cons<a>(x, acc)"}, {"op": "DebugWrap","inner": {"op": "Var","id": "p","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: p"}]},"annotation": "genExpr: std/text/parse/count-acc<a,(e :: E)>((std/core/int/int-sub(n, 1)), (std/core/types/Cons<a>(x, acc)), p)"}},"annotation": "genExpr: val x : a\n      = p();\nstd/text/parse/count-acc<a,(e :: E)>((std/core/int/int-sub(n, 1)), (std/core/types/Cons<a>(x, acc)), p)"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>(n: int, acc: (list :: V -> V)<a>, p: (std/text/parse/parser :: (E, V) -> V)<(e :: E),a>){\n  (match ((std/core/int/(<=)(n, 0))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/list/@lift-reverse-append@4790<a>((std/core/types/Nil<a>), acc);\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> val x : a\n                = p();\n      std/text/parse/count-acc<a,(e :: E)>((std/core/int/int-sub(n, 1)), (std/core/types/Cons<a>(x, acc)), p);\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/count-acc\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/count-acc"]}, {"name": {"op": "Var","id": "std/text/parse/count","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Var","id": "p","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/count-acc","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/count-acc<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "n","type": {"op": "Int"}},"annotation": "genExpr: n"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}, {"op": "DebugWrap","inner": {"op": "Var","id": "p","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: p"}]},"annotation": "genExpr: std/text/parse/count-acc<a,(e :: E)>(n, (std/core/types/Nil<a>), p)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>(n: int, p: (std/text/parse/parser :: (E, V) -> V)<(e :: E),a>){\n  std/text/parse/count-acc<a,(e :: E)>(n, (std/core/types/Nil<a>), p);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/count\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/count"]}, {"name": {"op": "Var","id": "std/text/parse/current-input","type": {"op": "Function","params": [],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "ev@10102","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"elt\" (fun Pure (ptr int) ptr)) (\"promote_ptr\" ((qualified $\"import$std/core/hnd\":ptr \"getCurrentEvv\" (fun Effectful () ptr)))) $arg0:int)","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/types/@make-ssize_t(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}},"annotation": "genExpr: std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"ev@10102\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}"},"export_as": ["ev@10102"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev@10102","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"188","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"189","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"190","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"191","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hnd\"190","type": {"op": "Top"}},"annotation": "genTest: normal: (h: std/text/parse/parse<1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"190\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/text/parse/parse","clauses": [{"tag": "std/text/parse/@Hnd-parse","params": [{"op": "Var","id": "@\"@cfc\"192","type": {"op": "Int"}}, {"op": "Var","id": "@\"@fun-current-input\"193","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@ctl-fail\"194","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}, {"op": "Var","id": "@\"@ctl-pick\"195","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@fun-satisfy\"196","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@fun-current-input\"193","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"annotation": "genTest: normal: (@fun-current-input: hnd/clause0<sslice/sslice,std/text/parse/parse,1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"193\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}"},"type_tag": "std/core/hnd/clause0","clauses": [{"tag": "std/core/hnd/Clause0","params": [{"op": "Var","id": "@\"clause\"197","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:(debugWrap \"cast-clause0\" $arg0:top)","args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"197","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<std/text/parse/parse>) -> 1005 sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"197\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: f"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/hnd/cast-clause0<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f)"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"marker\"189","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genTest: normal: (m: hnd/marker<1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"189\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev@10102","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev@10102"}]},"annotation": "genExpr: std/core/hnd/cast-clause0<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f)(m, ev@10102)"}}]},"annotation": "genBranch: [(@pat@2@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"193\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@fun-current-input: hnd/clause0<sslice/sslice,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"193\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"197\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<std/text/parse/parse>) -> 1005 sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"197\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"193\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@fun-current-input: hnd/clause0<sslice/sslice,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"193\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"197\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@fun-current-input) {\n  ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (1005 :: E) sslice/sslice) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) sslice/sslice) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f)(m, ev@10102);\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"190\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"190\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"192\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"192\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@fun-current-input,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"193\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@fun-current-input: hnd/clause0<sslice/sslice,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"193\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"194\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@1@0: forall<a> hnd/clause1<string,a,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"194\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"195\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@2@0: hnd/clause0<bool,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"195\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"196\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"196\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"190\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"190\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"192\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"193\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"194\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"195\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"196\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (h) {\n  ((@skip std/text/parse/@Hnd-parse((@pat@0@0: int) : int, (@fun-current-input: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@1@0: forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((std/text/parse/parse :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match (@fun-current-input) {\n      ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (1005 :: E) sslice/sslice) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) sslice/sslice) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f)(m, ev@10102);\n    });\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10102\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"188\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<std/text/parse/parse>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"188\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"189\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"189\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"190\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"190\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"191\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"191\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev@10102\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"188\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"189\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"190\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"191\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(std/text/parse/parse :: (E, V) -> V)>(){\n  val ev@10102 : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>\n        = std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n  match (ev@10102) {\n    ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n       -> (match (h) {\n        ((@skip std/text/parse/@Hnd-parse((@pat@0@0: int) : int, (@fun-current-input: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@1@0: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n           -> (match (@fun-current-input) {\n            ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) sslice/sslice) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) sslice/sslice) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n               -> std/core/hnd/cast-clause0<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f)(m, ev@10102);\n          });\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/current-input\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/current-input"]}, {"name": {"op": "Var","id": "std/text/parse/digit","type": {"op": "Function","params": [],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "c@0@0","type": {"op": "Ptr","extern_ptr_name": "\"char\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/satisfy-fail","type": {"op": "Function","params": [{"op": "String"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/satisfy-fail<char>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "digit"},"annotation": "genExpr: \"digit\""}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x198","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/next","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/next"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice"}]},"annotation": "genExpr: std/core/sslice/next(slice)"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x198","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"199","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"199","type": {"op": "Top"}},"annotation": "genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"199\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"200","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"201","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 >= #2)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"200","type": {"op": "Top"}},"annotation": "genTest: normal: (c: char) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"200\",\"type\": {\"op\": \"Top\"}}"}, {"op": "Literal","type": {"op": "String"},"value": "0"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "(#1 <= #2)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"200","type": {"op": "Top"}},"annotation": "genTest: normal: (c: char) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"200\",\"type\": {\"op\": \"Top\"}}"}, {"op": "Literal","type": {"op": "String"},"value": "9"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/char/(<=)(c, '9')"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"200\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"200\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"0\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@0@0,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"200\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"200\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"0\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/char/(>=)(c, '0'))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> std/core/char/(<=)(c, '9');\n  (@pat@0@0: bool)\n     -> std/core/types/False;\n}"},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<(char, sslice/sslice)>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<char,sslice/sslice>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"200","type": {"op": "Top"}},"annotation": "genTest: normal: (c: char) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"200\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: c"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"201","type": {"op": "Top"}},"annotation": "genTest: normal: (rest: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"201\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: rest"}]},"annotation": "genExpr: std/core/types/Tuple2<char,sslice/sslice>(c, rest)"}]},"annotation": "genExpr: std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)))"}}}],"default": {"op": "AlternativeFail"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x198\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"199\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"199\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"200\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"200\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"201\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"201\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"199\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"199\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"200\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"201\",\"type\": {\"op\": \"Top\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x198\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"199\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<(char, sslice/sslice)>"}}]},"annotation": "genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"@x198\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(slice: sslice/sslice){\n  match ((std/core/sslice/next(slice))) {\n    ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n       | (match ((std/core/char/(>=)(c, '0'))) {\n        ((std/core/types/True() : bool ) as @pat@1: bool)\n           -> std/core/char/(<=)(c, '9');\n        (@pat@0@0: bool)\n           -> std/core/types/False;\n      }) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n    (@pat@1@0: ((maybe :: V -> V)<(char, sslice/sslice)>))\n       -> std/core/types/Nothing<(char, sslice/sslice)>;\n  };\n}"}]},"annotation": "genExpr: std/text/parse/satisfy-fail<char>(\"digit\", (fn(slice: sslice/sslice){\n    (match ((std/core/sslice/next(slice))) {\n      ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         | (match ((std/core/char/(>=)(c, '0'))) {\n          ((std/core/types/True() : bool ) as @pat@1: bool)\n             -> std/core/char/(<=)(c, '9');\n          (@pat@0@0: bool)\n             -> std/core/types/False;\n        }) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n      (@pat@1@0: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         -> std/core/types/Nothing<(char, sslice/sslice)>;\n    });\n  }))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"c@0@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}"},"export_as": ["c@0@0"]}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "#1","args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@open-none2","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@open-none2<char,char,char,(total :: E),(std/text/parse/parse :: (E, V) -> V)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "c@1","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Var","id": "d","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "x@10002","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "#1","args": [{"op": "Var","id": "c@1","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/char/int(c@1)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"x@10002\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["x@10002"]}, {"name": {"op": "Var","id": "y@10003","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "#1","args": [{"op": "Var","id": "d","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/char/int(d)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y@10003\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["y@10003"]}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "(#1)","args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "Var","id": "x@10002","type": {"op": "Int"}}, {"op": "Var","id": "y@10003","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub(x@10002, y@10003)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}},"annotation": "genExpr: std/core/char/int/char((std/core/int/int-sub(x@10002, y@10003)))"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(c@1: char, d: char){\n  val x@10002 : int;\n  val y@10003 : int;\n  std/core/char/int/char((std/core/int/int-sub(x@10002, y@10003)));\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "c@0@0","type": {"op": "Ptr","extern_ptr_name": "\"char\""}},"annotation": "genExpr: c@0@0"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "0"},"annotation": "genExpr: '0'"}]},"annotation": "genExpr: std/core/hnd/@open-none2<char,char,char,(total :: E),(std/text/parse/parse :: (E, V) -> V)>((fn(c@1: char, d: char){\n    val x@10002 : int;\n    val y@10003 : int;\n    (std/core/char/int/char((std/core/int/int-sub(x@10002, y@10003))));\n  }), c@0@0, '0')"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/char/int((std/core/hnd/@open-none2<char,char,char,(total :: E),(std/text/parse/parse :: (E, V) -> V)>((fn(c@1: char, d: char){\n    val x@10002 : int;\n    val y@10003 : int;\n    (std/core/char/int/char((std/core/int/int-sub(x@10002, y@10003))));\n  }), c@0@0, '0')))"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(std/text/parse/parse :: (E, V) -> V)>(){\n  val c@0@0 : char\n        = std/text/parse/satisfy-fail<char>(\"digit\", (fn(slice: sslice/sslice){\n            (match ((std/core/sslice/next(slice))) {\n              ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n                 | (match ((std/core/char/(>=)(c, '0'))) {\n                  ((std/core/types/True() : bool ) as @pat@1: bool)\n                     -> std/core/char/(<=)(c, '9');\n                  (@pat@0@0: bool)\n                     -> std/core/types/False;\n                }) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n              (@pat@1@0: ((maybe :: V -> V)<(char, sslice/sslice)>))\n                 -> std/core/types/Nothing<(char, sslice/sslice)>;\n            });\n          }));\n  std/core/char/int((std/core/hnd/@open-none2<char,char,char,(total :: E),(std/text/parse/parse :: (E, V) -> V)>((fn(c@1: char, d: char){\n      val x@10002 : int;\n      val y@10003 : int;\n      (std/core/char/int/char((std/core/int/int-sub(x@10002, y@10003))));\n    }), c@0@0, '0')));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/digit\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/digit"]}, {"name": {"op": "Var","id": "std/text/parse/digits","type": {"op": "Function","params": [],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/string","type": {"op": "Ptr"}},"name": "std/core/string/listchar/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/string/listchar/string"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/satisfy-fail","type": {"op": "Function","params": [{"op": "String"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/satisfy-fail<(list :: V -> V)<char>>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "digit"},"annotation": "genExpr: \"digit\""}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x198","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/next-while0","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Bool"},"purity": "Effectful"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/next-while0"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/char","type": {"op": "Ptr"}},"name": "std/core/char/is-digit","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: std/core/char/is-digit"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<char>"}]},"annotation": "genExpr: std/text/parse/next-while0(slice, std/core/char/is-digit, (std/core/types/Nil<char>))"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x198","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"199","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"200","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"199","type": {"op": "Top"}},"annotation": "genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"199\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"200","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"200\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"201","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"202","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"203","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x198\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"199\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"199\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"200\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"200\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"201\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"201\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"202\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"202\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"203\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@4: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"203\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"200\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"200\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"201\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"202\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"203\",\"type\": {\"op\": \"Int\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"199\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"199\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x198\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"199\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"200\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x198","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"204","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"205","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"205","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"205\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"206","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"207","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"208","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"204","type": {"op": "Top"}},"annotation": "genTest: normal: (xs: list<char>) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"204\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: xs"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"205","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"205\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: rest"}]},"annotation": "genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)"}]},"annotation": "genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x198\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"204\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"204\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"205\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"205\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"206\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"206\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"207\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"207\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"208\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"208\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"205\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"205\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"206\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"207\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"208\",\"type\": {\"op\": \"Int\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x198\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"204\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"205\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(slice: sslice/sslice){\n  match ((std/text/parse/next-while0(slice, std/core/char/is-digit, (std/core/types/Nil<char>)))) {\n    ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n       -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n    ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n       -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n  };\n}"}]},"annotation": "genExpr: std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"digit\", (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, std/core/char/is-digit, (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))"}]},"annotation": "genExpr: std/core/string/listchar/string((std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"digit\", (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, std/core/char/is-digit, (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(std/text/parse/parse :: (E, V) -> V)>(){\n  std/core/string/listchar/string((std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"digit\", (fn(slice: sslice/sslice){\n      (match ((std/text/parse/next-while0(slice, std/core/char/is-digit, (std/core/types/Nil<char>)))) {\n        ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n           -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n        ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n           -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n      });\n    }))));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/digits\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/digits"]}, {"name": {"op": "Var","id": "std/text/parse/(||)","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "p1","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "p2","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x209","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@open-at0","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@open-at0<bool,(std/text/parse/parse :: (E, V) -> V),<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@evv-index","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@evv-index<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/@tag-parse","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}},"annotation": "genExpr: std/text/parse/@tag-parse"}]},"annotation": "genExpr: std/core/hnd/@evv-index<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V)>(std/text/parse/@tag-parse)"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "ev@10104","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"elt\" (fun Pure (ptr int) ptr)) (\"promote_ptr\" ((qualified $\"import$std/core/hnd\":ptr \"getCurrentEvv\" (fun Effectful () ptr)))) $arg0:int)","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/types/@make-ssize_t(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}},"annotation": "genExpr: std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"ev@10104\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}"},"export_as": ["ev@10104"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev@10104","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"210","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"211","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"212","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"213","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hnd\"212","type": {"op": "Top"}},"annotation": "genTest: normal: (h: std/text/parse/parse<1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"212\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/text/parse/parse","clauses": [{"tag": "std/text/parse/@Hnd-parse","params": [{"op": "Var","id": "@\"@cfc\"214","type": {"op": "Int"}}, {"op": "Var","id": "@\"@fun-current-input\"215","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@ctl-fail\"216","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}, {"op": "Var","id": "@\"@ctl-pick\"217","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@fun-satisfy\"218","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@ctl-pick\"217","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"annotation": "genTest: normal: (@ctl-pick: hnd/clause0<bool,std/text/parse/parse,1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"217\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}"},"type_tag": "std/core/hnd/clause0","clauses": [{"tag": "std/core/hnd/Clause0","params": [{"op": "Var","id": "@\"clause\"219","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:(debugWrap \"cast-clause0\" $arg0:top)","args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"219","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<std/text/parse/parse>) -> 1005 bool) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"219\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: f"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f)"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"marker\"211","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genTest: normal: (m: hnd/marker<1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"211\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev@10104","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev@10104"}]},"annotation": "genExpr: std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f)(m, ev@10104)"}}]},"annotation": "genBranch: [(@pat@2@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"217\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-pick: hnd/clause0<bool,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"217\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"219\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<std/text/parse/parse>) -> 1005 bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"219\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"217\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-pick: hnd/clause0<bool,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"217\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"219\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@ctl-pick) {\n  ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f)(m, ev@10104);\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"212\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"212\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"214\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"214\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"215\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/clause0<sslice/sslice,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"215\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"216\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@2@0: forall<a> hnd/clause1<string,a,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"216\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@ctl-pick,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"217\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-pick: hnd/clause0<bool,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"217\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"218\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"218\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"212\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"212\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"214\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"215\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"216\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"217\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"218\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (h) {\n  ((@skip std/text/parse/@Hnd-parse((@pat@0@0: int) : int, (@pat@1@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@0: forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-pick: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((std/text/parse/parse :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match (@ctl-pick) {\n      ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f)(m, ev@10104);\n    });\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10104\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"210\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<std/text/parse/parse>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"210\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"211\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"211\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"212\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"212\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"213\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"213\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev@10104\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"210\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"211\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"212\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"213\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(std/text/parse/parse :: (E, V) -> V)>(){\n  val ev@10104 : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>\n        = std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n  match (ev@10104) {\n    ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n       -> (match (h) {\n        ((@skip std/text/parse/@Hnd-parse((@pat@0@0: int) : int, (@pat@1@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@0: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-pick: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n           -> (match (@ctl-pick) {\n            ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n               -> std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f)(m, ev@10104);\n          });\n      });\n  };\n}"}]},"annotation": "genExpr: std/core/hnd/@open-at0<bool,(std/text/parse/parse :: (E, V) -> V),<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>((std/core/hnd/@evv-index<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V)>(std/text/parse/@tag-parse)), (fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    val ev@10104 : ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>)\n          = (std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n    (match (ev@10104) {\n      ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n         -> (match (h) {\n          ((@skip std/text/parse/@Hnd-parse((@pat@0@0: int) : int, (@pat@1@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@0: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-pick: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n             -> (match (@ctl-pick) {\n              ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n                 -> std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),(std/text/parse/parse :: (E, V) -> V),a>(f)(m, ev@10104);\n            });\n        });\n    });\n  }))"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x209","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "p1","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: p1"},"args": []},"annotation": "genExpr: p1()"}}]},"annotation": "genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"@x209\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x209","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "p2","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: p2"},"args": []},"annotation": "genExpr: p2()"}}]},"annotation": "genBranch: [(@pat@0@0@0,{\"op\": \"Var\",\"id\": \"@x209\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>(p1: (std/text/parse/parser :: (E, V) -> V)<(e :: E),a>, p2: (std/text/parse/parser :: (E, V) -> V)<(e :: E),a>){\n  (match ((std/core/hnd/@open-at0<bool,(std/text/parse/parse :: (E, V) -> V),<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>((std/core/hnd/@evv-index<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V)>(std/text/parse/@tag-parse)), (fn<(std/text/parse/parse :: (E, V) -> V)>(){\n      val ev@10104 : ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>)\n            = (std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0))));\n      (match (ev@10104) {\n        ((@skip std/core/hnd/Ev<(e1 :: E),b>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e1 :: E),b>) : (hnd/marker :: (E, V) -> V)<(e1 :: E),b>, (h: (std/text/parse/parse :: (E, V) -> V)<(e1 :: E),b>) : (std/text/parse/parse :: (E, V) -> V)<(e1 :: E),b>, (@pat@1: (hnd/evv :: E -> V)<(e1 :: E)>) : (hnd/evv :: E -> V)<(e1 :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n           -> (match (h) {\n            ((@skip std/text/parse/@Hnd-parse((@pat@0@0: int) : int, (@pat@1@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e1 :: E),b>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e1 :: E),b>, (@pat@2@0: forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,c,(std/text/parse/parse :: (E, V) -> V),(e1 :: E),b>) : forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,c,(std/text/parse/parse :: (E, V) -> V),(e1 :: E),b>, (@ctl-pick: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e1 :: E),b>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e1 :: E),b>, (@pat@3: (forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(c, sslice/sslice)>,(maybe :: V -> V)<c>,(std/text/parse/parse :: (E, V) -> V),(e1 :: E),b>)) : (forall<c> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(c, sslice/sslice)>,(maybe :: V -> V)<c>,(std/text/parse/parse :: (E, V) -> V),(e1 :: E),b>)) : (std/text/parse/parse :: (E, V) -> V)<(e1 :: E),b> ) as @pat@2: ((std/text/parse/parse :: (E, V) -> V)<(e1 :: E),b>))\n               -> (match (@ctl-pick) {\n                ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e1 :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e1 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e1 :: E),b>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) -> (e1 :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e1 :: E),b> ) as @pat@2@1: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e1 :: E),b>))\n                   -> std/core/hnd/cast-clause0<bool,(std/text/parse/parse :: (E, V) -> V),(e1 :: E),(std/text/parse/parse :: (E, V) -> V),b>(f)(m, ev@10104);\n              });\n          });\n      });\n    })))) {\n    ((std/core/types/True() : bool ) as @pat@3@0: bool)\n       -> p1();\n    ((@skip std/core/types/False() : bool ) as @pat@0@0@0: bool)\n       -> p2();\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/(||)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/(||)"]}, {"name": {"op": "Var","id": "std/text/parse/optional","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "default","type": {"op": "Top"}}, {"op": "Var","id": "p","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/(||)","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/(||)<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "p","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: p"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "Var","id": "default","type": {"op": "Top"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>(){\n  default;\n}"}]},"annotation": "genExpr: std/text/parse/(||)<a,(e :: E)>(p, (fn<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>(){\n    default;\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>(default: a, p: (std/text/parse/parser :: (E, V) -> V)<(e :: E),a>){\n  std/text/parse/(||)<a,(e :: E)>(p, (fn<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>(){\n      default;\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/optional\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/optional"]}, {"name": {"op": "Var","id": "std/text/parse/digits0","type": {"op": "Function","params": [],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/(||)","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/(||)<string,(total :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/string","type": {"op": "Ptr"}},"name": "std/core/string/listchar/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/string/listchar/string"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/satisfy-fail","type": {"op": "Function","params": [{"op": "String"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/satisfy-fail<(list :: V -> V)<char>>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "digit"},"annotation": "genExpr: \"digit\""}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x220","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/next-while0","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Bool"},"purity": "Effectful"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/next-while0"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/char","type": {"op": "Ptr"}},"name": "std/core/char/is-digit","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: std/core/char/is-digit"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<char>"}]},"annotation": "genExpr: std/text/parse/next-while0(slice, std/core/char/is-digit, (std/core/types/Nil<char>))"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x220","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"221","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"222","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"221","type": {"op": "Top"}},"annotation": "genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"221\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"222","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"222\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"223","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"224","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"225","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x220\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"221\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"221\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"222\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"222\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"223\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"223\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"224\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"224\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"225\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@4: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"225\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"222\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"222\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"223\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"224\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"225\",\"type\": {\"op\": \"Int\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"221\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"221\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x220\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"221\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"222\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x220","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"226","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"227","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"227","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"227\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"228","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"229","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"230","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"226","type": {"op": "Top"}},"annotation": "genTest: normal: (xs: list<char>) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"226\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: xs"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"227","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"227\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: rest"}]},"annotation": "genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)"}]},"annotation": "genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x220\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"226\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"226\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"227\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"227\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"228\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"228\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"229\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"229\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"230\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"230\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"227\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"227\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"228\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"229\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"230\",\"type\": {\"op\": \"Int\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x220\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"226\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"227\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(slice: sslice/sslice){\n  match ((std/text/parse/next-while0(slice, std/core/char/is-digit, (std/core/types/Nil<char>)))) {\n    ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n       -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n    ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n       -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n  };\n}"}]},"annotation": "genExpr: std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"digit\", (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, std/core/char/is-digit, (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))"}]},"annotation": "genExpr: std/core/string/listchar/string((std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"digit\", (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, std/core/char/is-digit, (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(std/text/parse/parse :: (E, V) -> V)>(){\n  std/core/string/listchar/string((std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"digit\", (fn(slice: sslice/sslice){\n      (match ((std/text/parse/next-while0(slice, std/core/char/is-digit, (std/core/types/Nil<char>)))) {\n        ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n           -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n        ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n           -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n      });\n    }))));\n}"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "Literal","type": {"op": "String"},"value": "0"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(std/text/parse/parse :: (E, V) -> V)>(){\n  \"0\";\n}"}]},"annotation": "genExpr: std/text/parse/(||)<string,(total :: E)>((fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    (std/core/string/listchar/string((std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"digit\", (fn(slice: sslice/sslice){\n        (match ((std/text/parse/next-while0(slice, std/core/char/is-digit, (std/core/types/Nil<char>)))) {\n          ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n             -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n          ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n             -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n        });\n      })))));\n  }), (fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    \"0\";\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(std/text/parse/parse :: (E, V) -> V)>(){\n  std/text/parse/(||)<string,(total :: E)>((fn<(std/text/parse/parse :: (E, V) -> V)>(){\n      (std/core/string/listchar/string((std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"digit\", (fn(slice: sslice/sslice){\n          (match ((std/text/parse/next-while0(slice, std/core/char/is-digit, (std/core/types/Nil<char>)))) {\n            ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n               -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n            ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n               -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n          });\n        })))));\n    }), (fn<(std/text/parse/parse :: (E, V) -> V)>(){\n      \"0\";\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/digits0\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/digits0"]}, {"name": {"op": "Var","id": "std/text/parse/eof","type": {"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "ev@10106","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"elt\" (fun Pure (ptr int) ptr)) (\"promote_ptr\" ((qualified $\"import$std/core/hnd\":ptr \"getCurrentEvv\" (fun Effectful () ptr)))) $arg0:int)","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/types/@make-ssize_t(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}},"annotation": "genExpr: std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"ev@10106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}"},"export_as": ["ev@10106"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev@10106","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"231","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"232","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"233","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"234","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hnd\"233","type": {"op": "Top"}},"annotation": "genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"233\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/text/parse/parse","clauses": [{"tag": "std/text/parse/@Hnd-parse","params": [{"op": "Var","id": "@\"@cfc\"235","type": {"op": "Int"}}, {"op": "Var","id": "@\"@fun-current-input\"236","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@ctl-fail\"237","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}, {"op": "Var","id": "@\"@ctl-pick\"238","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@fun-satisfy\"239","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x240","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"value": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@fun-satisfy\"239","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"annotation": "genTest: normal: (@fun-satisfy: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,1007,1008>) -> {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"239\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x240","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"type_tag": "std/core/hnd/clause1","clauses": [{"tag": "std/core/hnd/Clause1","params": [{"op": "Var","id": "@\"clause\"241","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x242","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"241","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (f: (hnd/marker<1007,1008>, hnd/ev<std/text/parse/parse>, (sslice/sslice) -> maybe<((), sslice/sslice)>) -> 1007 maybe<()>) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"241\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"marker\"232","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genTest: normal: (m: hnd/marker<1007,1008>) -> {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"232\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev@10106","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev@10106"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "b@10013","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixGt(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "s","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"243","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"244","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"245","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"len\"245","type": {"op": "Int"}},"annotation": "genTest: normal: (@x: int) -> {\"op\": \"Var\",\"id\": \"@\\\"len\\\"245\",\"type\": {\"op\": \"Int\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat@1@0@0,{\"op\": \"Var\",\"id\": \"s\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}),(@pat@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"243\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"243\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"244\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1@0@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"244\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"245\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"245\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"s\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"243\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"244\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"245\",\"type\": {\"op\": \"Int\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (s) {\n  ((@skip std/core/sslice/Sslice((@pat@0@0@0: string) : string, (@pat@1@0@0@0: int) : int, (@x: int) : int) : sslice/sslice ) as @pat@1@0@0: sslice/sslice)\n     -> @x;\n}"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/int/(>)((match (s) {\n    ((@skip std/core/sslice/Sslice((@pat@0@0@0: string) : string, (@pat@1@0@0@0: int) : int, (@x: int) : int) : sslice/sslice ) as @pat@1@0@0: sslice/sslice)\n       -> @x;\n  }), 0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"b@10013\",\"type\": {\"op\": \"Bool\"}}"},"export_as": ["b@10013"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "b@10013","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<((), sslice/sslice)>"}}]},"annotation": "genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"b@10013\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "b@10013","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<((), sslice/sslice)>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<(),sslice/sslice>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Unit"}},"annotation": "genExpr: std/core/types/Unit"}, {"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: s"}]},"annotation": "genExpr: std/core/types/Tuple2<(),sslice/sslice>(std/core/types/Unit, s)"}]},"annotation": "genExpr: std/core/types/Just<((), sslice/sslice)>((std/core/types/Tuple2<(),sslice/sslice>(std/core/types/Unit, s)))"}}]},"annotation": "genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"b@10013\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(s: sslice/sslice){\n  val b@10013 : bool\n        = std/core/int/(>)((match (s) {\n            ((@skip std/core/sslice/Sslice((@pat@0@0@0: string) : string, (@pat@1@0@0@0: int) : int, (@x: int) : int) : sslice/sslice ) as @pat@1@0@0: sslice/sslice)\n               -> @x;\n          }), 0);\n  match (b@10013) {\n    ((std/core/types/True() : bool ) as @pat@3@0: bool)\n       -> std/core/types/Nothing<((), sslice/sslice)>;\n    ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n       -> std/core/types/Just<((), sslice/sslice)>((std/core/types/Tuple2<(),sslice/sslice>(std/core/types/Unit, s)));\n  };\n}"}]},"annotation": "genExpr: f(m, ev@10106, (fn(s: sslice/sslice){\n    val b@10013 : bool\n          = (std/core/int/(>)((match (s) {\n              ((@skip std/core/sslice/Sslice((@pat@0@0@0: string) : string, (@pat@1@0@0@0: int) : int, (@x: int) : int) : sslice/sslice ) as @pat@1@0@0: sslice/sslice)\n                 -> @x;\n            }), 0));\n    (match (b@10013) {\n      ((std/core/types/True() : bool ) as @pat@3@0: bool)\n         -> std/core/types/Nothing<((), sslice/sslice)>;\n      ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n         -> std/core/types/Just<((), sslice/sslice)>((std/core/types/Tuple2<(),sslice/sslice>(std/core/types/Unit, s)));\n    });\n  }))"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x242","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "ev@0@10109","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"elt\" (fun Pure (ptr int) ptr)) (\"promote_ptr\" ((qualified $\"import$std/core/hnd\":ptr \"getCurrentEvv\" (fun Effectful () ptr)))) $arg0:int)","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/types/@make-ssize_t(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}},"annotation": "genExpr: std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"ev@0@10109\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}"},"export_as": ["ev@0@10109"]}],"body": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev@0@10109","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"243","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"244","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"245","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"246","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hnd\"245","type": {"op": "Top"}},"annotation": "genTest: normal: (h@0: std/text/parse/parse<1007,1008>) -> {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"245\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/text/parse/parse","clauses": [{"tag": "std/text/parse/@Hnd-parse","params": [{"op": "Var","id": "@\"@cfc\"247","type": {"op": "Int"}}, {"op": "Var","id": "@\"@fun-current-input\"248","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@ctl-fail\"249","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}, {"op": "Var","id": "@\"@ctl-pick\"250","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@\"@fun-satisfy\"251","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x252","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"value": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@ctl-fail\"249","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"annotation": "genTest: normal: (@ctl-fail: forall<a> hnd/clause1<string,a,std/text/parse/parse,1007,1008>) -> {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"249\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x252","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}},"type_tag": "std/core/hnd/clause1","clauses": [{"tag": "std/core/hnd/Clause1","params": [{"op": "Var","id": "@\"clause\"253","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"253","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (f@0: (hnd/marker<1007,1008>, hnd/ev<std/text/parse/parse>, string) -> 1007 ()) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"253\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: f@0"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"marker\"244","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genTest: normal: (m@0: hnd/marker<1007,1008>) -> {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"244\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"annotation": "genExpr: m@0"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev@0@10109","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev@0@10109"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "expecting end-of-input"},"annotation": "genExpr: \"expecting end-of-input\""}]},"annotation": "genExpr: f@0(m@0, ev@0@10109, \"expecting end-of-input\")"}}]},"annotation": "genBranch: [(@pat@2@0@0,{\"op\": \"Var\",\"id\": \"@x252\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}),(f@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"253\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f@0: (hnd/marker<1007,1008>, hnd/ev<std/text/parse/parse>, string) -> 1007 ()) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"253\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x252\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"253\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((@ctl-fail<()>)) {\n  ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (1007 :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,(),(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,(),(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>))\n     -> f@0(m@0, ev@0@10109, \"expecting end-of-input\");\n}"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"245\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"245\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"247\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"247\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"248\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1@3: hnd/clause0<sslice/sslice,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"248\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@ctl-fail,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"249\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@ctl-fail: forall<a> hnd/clause1<string,a,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"249\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@2@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"250\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@2@2: hnd/clause0<bool,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"250\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@3@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"251\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@3@1: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"251\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"245\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"245\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"247\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"248\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"249\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"250\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"251\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (h@0) {\n  ((@skip std/text/parse/@Hnd-parse((@pat@0@3: int) : int, (@pat@1@3: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((std/text/parse/parse :: (E, V) -> V)<(1007 :: E),1008>))\n     -> (match ((@ctl-fail<()>)) {\n      ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (1007 :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,(),(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,(),(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>))\n         -> f@0(m@0, ev@0@10109, \"expecting end-of-input\");\n    });\n}"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"ev@0@10109\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"243\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@2: hnd/htag<std/text/parse/parse>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"243\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"244\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m@0: hnd/marker<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"244\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"245\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h@0: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"245\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"246\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1@2: hnd/evv<1007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"246\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev@0@10109\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"243\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"244\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"245\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"246\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (ev@0@10109) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@2: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n     -> (match (h@0) {\n      ((@skip std/text/parse/@Hnd-parse((@pat@0@3: int) : int, (@pat@1@3: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n         -> (match ((@ctl-fail<()>)) {\n          ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,(),(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,(),(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n             -> f@0(m@0, ev@0@10109, \"expecting end-of-input\");\n        });\n    });\n}"}},"annotation": "genExpr: val ev@0@10109 : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>\n      = std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\nmatch (ev@0@10109) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@2: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n     -> (match (h@0) {\n      ((@skip std/text/parse/@Hnd-parse((@pat@0@3: int) : int, (@pat@1@3: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n         -> (match ((@ctl-fail<()>)) {\n          ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,(),(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,(),(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n             -> f@0(m@0, ev@0@10109, \"expecting end-of-input\");\n        });\n    });\n}"}}]},"annotation": "genBranch: [(@pat@1@1,{\"op\": \"Var\",\"id\": \"@x242\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x242\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x242","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"254","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"254","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/types/Unit() : () ) as @pat@3@0@0: ()) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"254\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/types/unit","clauses": [{"tag": "std/core/types/Unit","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Unit"}},"annotation": "genExpr: std/core/types/Unit"}}]},"annotation": "genBranch: [(@pat@2@0@0@0,{\"op\": \"Var\",\"id\": \"@x242\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@3@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"254\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/types/Unit() : () ) as @pat@3@0@0: ()) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"254\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"254\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/types/Unit() : () ) as @pat@3@0@0: ()) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"254\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/unit\".\"std/core/types/Unit\"(())"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x242\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"254\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((f(m, ev@10106, (fn(s: sslice/sslice){\n    val b@10013 : bool\n          = (std/core/int/(>)((match (s) {\n              ((@skip std/core/sslice/Sslice((@pat@0@0@0: string) : string, (@pat@1@0@0@0: int) : int, (@x: int) : int) : sslice/sslice ) as @pat@1@0@0: sslice/sslice)\n                 -> @x;\n            }), 0));\n    (match (b@10013) {\n      ((std/core/types/True() : bool ) as @pat@3@0: bool)\n         -> std/core/types/Nothing<((), sslice/sslice)>;\n      ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n         -> std/core/types/Just<((), sslice/sslice)>((std/core/types/Tuple2<(),sslice/sslice>(std/core/types/Unit, s)));\n    });\n  })))) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<()> ) as @pat@1@1: ((maybe :: V -> V)<()>))\n     -> val ev@0@10109 : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>\n              = std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n    (match (ev@0@10109) {\n      ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@2: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n         -> (match (h@0) {\n          ((@skip std/text/parse/@Hnd-parse((@pat@0@3: int) : int, (@pat@1@3: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n             -> (match ((@ctl-fail<()>)) {\n              ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,(),(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,(),(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n                 -> f@0(m@0, ev@0@10109, \"expecting end-of-input\");\n            });\n        });\n    });\n  ((@skip std/core/types/Just(((@skip std/core/types/Unit() : () ) as @pat@3@0@0: ()) : ()) : (maybe :: V -> V)<()> ) as @pat@2@0@0@0: ((maybe :: V -> V)<()>))\n     -> std/core/types/Unit;\n}"}}]},"annotation": "genBranch: [(@pat@2@1,{\"op\": \"Var\",\"id\": \"@x240\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"241\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1007,1008>, hnd/ev<std/text/parse/parse>, (sslice/sslice) -> maybe<((), sslice/sslice)>) -> 1007 maybe<()>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"241\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x240\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"241\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((@fun-satisfy<()>)) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (sslice/sslice) -> (maybe :: V -> V)<((), sslice/sslice)>) -> (1007 :: E) (maybe :: V -> V)<()>) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (sslice/sslice) -> (maybe :: V -> V)<((), sslice/sslice)>) -> (e :: E) (maybe :: V -> V)<()>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<((), sslice/sslice)>,(maybe :: V -> V)<()>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<((), sslice/sslice)>,(maybe :: V -> V)<()>,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>))\n     -> (match ((f(m, ev@10106, (fn(s: sslice/sslice){\n        val b@10013 : bool\n              = (std/core/int/(>)((match (s) {\n                  ((@skip std/core/sslice/Sslice((@pat@0@0@0: string) : string, (@pat@1@0@0@0: int) : int, (@x: int) : int) : sslice/sslice ) as @pat@1@0@0: sslice/sslice)\n                     -> @x;\n                }), 0));\n        (match (b@10013) {\n          ((std/core/types/True() : bool ) as @pat@3@0: bool)\n             -> std/core/types/Nothing<((), sslice/sslice)>;\n          ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n             -> std/core/types/Just<((), sslice/sslice)>((std/core/types/Tuple2<(),sslice/sslice>(std/core/types/Unit, s)));\n        });\n      })))) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<()> ) as @pat@1@1: ((maybe :: V -> V)<()>))\n         -> val ev@0@10109 : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>\n                  = std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n        (match (ev@0@10109) {\n          ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@2: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n             -> (match (h@0) {\n              ((@skip std/text/parse/@Hnd-parse((@pat@0@3: int) : int, (@pat@1@3: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n                 -> (match ((@ctl-fail<()>)) {\n                  ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,(),(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,(),(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n                     -> f@0(m@0, ev@0@10109, \"expecting end-of-input\");\n                });\n            });\n        });\n      ((@skip std/core/types/Just(((@skip std/core/types/Unit() : () ) as @pat@3@0@0: ()) : ()) : (maybe :: V -> V)<()> ) as @pat@2@0@0@0: ((maybe :: V -> V)<()>))\n         -> std/core/types/Unit;\n    });\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"233\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"233\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"235\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"235\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"236\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/clause0<sslice/sslice,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-current-input\\\\\\\"236\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"237\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@2@0: forall<a> hnd/clause1<string,a,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-fail\\\\\\\"237\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"238\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@3: hnd/clause0<bool,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-pick\\\\\\\"238\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(@fun-satisfy,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"239\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-satisfy: forall<a> hnd/clause1<(sslice/sslice) -> maybe<(a, sslice/sslice)>,maybe<a>,std/text/parse/parse,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-satisfy\\\\\\\"239\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"233\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"233\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/text/parse/parse\".\"std/text/parse/@Hnd-parse\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"235\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-current-input\\\"236\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-fail\\\"237\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-pick\\\"238\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-satisfy\\\"239\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (h) {\n  ((@skip std/text/parse/@Hnd-parse((@pat@0@0: int) : int, (@pat@1@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@0: forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,a,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@fun-satisfy: (forall<a> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((std/text/parse/parse :: (E, V) -> V)<(1007 :: E),1008>))\n     -> (match ((@fun-satisfy<()>)) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (sslice/sslice) -> (maybe :: V -> V)<((), sslice/sslice)>) -> (1007 :: E) (maybe :: V -> V)<()>) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (sslice/sslice) -> (maybe :: V -> V)<((), sslice/sslice)>) -> (e :: E) (maybe :: V -> V)<()>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<((), sslice/sslice)>,(maybe :: V -> V)<()>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<((), sslice/sslice)>,(maybe :: V -> V)<()>,(std/text/parse/parse :: (E, V) -> V),(1007 :: E),1008>))\n         -> (match ((f(m, ev@10106, (fn(s: sslice/sslice){\n            val b@10013 : bool\n                  = (std/core/int/(>)((match (s) {\n                      ((@skip std/core/sslice/Sslice((@pat@0@0@0: string) : string, (@pat@1@0@0@0: int) : int, (@x: int) : int) : sslice/sslice ) as @pat@1@0@0: sslice/sslice)\n                         -> @x;\n                    }), 0));\n            (match (b@10013) {\n              ((std/core/types/True() : bool ) as @pat@3@0: bool)\n                 -> std/core/types/Nothing<((), sslice/sslice)>;\n              ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n                 -> std/core/types/Just<((), sslice/sslice)>((std/core/types/Tuple2<(),sslice/sslice>(std/core/types/Unit, s)));\n            });\n          })))) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<()> ) as @pat@1@1: ((maybe :: V -> V)<()>))\n             -> val ev@0@10109 : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>\n                      = std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n            (match (ev@0@10109) {\n              ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@2: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n                 -> (match (h@0) {\n                  ((@skip std/text/parse/@Hnd-parse((@pat@0@3: int) : int, (@pat@1@3: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n                     -> (match ((@ctl-fail<()>)) {\n                      ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,(),(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,(),(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n                         -> f@0(m@0, ev@0@10109, \"expecting end-of-input\");\n                    });\n                });\n            });\n          ((@skip std/core/types/Just(((@skip std/core/types/Unit() : () ) as @pat@3@0@0: ()) : ()) : (maybe :: V -> V)<()> ) as @pat@2@0@0@0: ((maybe :: V -> V)<()>))\n             -> std/core/types/Unit;\n        });\n    });\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"231\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<std/text/parse/parse>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"231\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"232\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"232\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"233\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: std/text/parse/parse<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"233\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"234\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"234\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev@10106\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"231\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"232\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"233\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"234\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(std/text/parse/parse :: (E, V) -> V)>(){\n  val ev@10106 : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>\n        = std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n  match (ev@10106) {\n    ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n       -> (match (h) {\n        ((@skip std/text/parse/@Hnd-parse((@pat@0@0: int) : int, (@pat@1@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@0: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@fun-satisfy: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n           -> (match ((@fun-satisfy<()>)) {\n            ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (sslice/sslice) -> (maybe :: V -> V)<((), sslice/sslice)>) -> (e :: E) (maybe :: V -> V)<()>) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (sslice/sslice) -> (maybe :: V -> V)<((), sslice/sslice)>) -> (e :: E) (maybe :: V -> V)<()>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<((), sslice/sslice)>,(maybe :: V -> V)<()>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@1: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<((), sslice/sslice)>,(maybe :: V -> V)<()>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n               -> (match ((f(m, ev@10106, (fn(s: sslice/sslice){\n                  val b@10013 : bool\n                        = (std/core/int/(>)((match (s) {\n                            ((@skip std/core/sslice/Sslice((@pat@0@0@0: string) : string, (@pat@1@0@0@0: int) : int, (@x: int) : int) : sslice/sslice ) as @pat@1@0@0: sslice/sslice)\n                               -> @x;\n                          }), 0));\n                  (match (b@10013) {\n                    ((std/core/types/True() : bool ) as @pat@3@0: bool)\n                       -> std/core/types/Nothing<((), sslice/sslice)>;\n                    ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n                       -> std/core/types/Just<((), sslice/sslice)>((std/core/types/Tuple2<(),sslice/sslice>(std/core/types/Unit, s)));\n                  });\n                })))) {\n                ((std/core/types/Nothing() : (maybe :: V -> V)<()> ) as @pat@1@1: ((maybe :: V -> V)<()>))\n                   -> val ev@0@10109 : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>\n                            = std/core/hnd/@evv-at<(std/text/parse/parse :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n                  (match (ev@0@10109) {\n                    ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@2: (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, (m@0: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h@0: (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a>, (@pat@1@2: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)> ) as @pat@4: ((hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>))\n                       -> (match (h@0) {\n                        ((@skip std/text/parse/@Hnd-parse((@pat@0@3: int) : int, (@pat@1@3: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<sslice/sslice,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@ctl-fail: forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,b,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@2@2: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>, (@pat@3@1: (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (forall<b> (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(e :: E),a>)) : (std/text/parse/parse :: (E, V) -> V)<(e :: E),a> ) as @pat@5: ((std/text/parse/parse :: (E, V) -> V)<(e :: E),a>))\n                           -> (match ((@ctl-fail<()>)) {\n                            ((@skip std/core/hnd/Clause1((f@0: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, string) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,(),(std/text/parse/parse :: (E, V) -> V),(e :: E),a> ) as @pat@2@0@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<string,(),(std/text/parse/parse :: (E, V) -> V),(e :: E),a>))\n                               -> f@0(m@0, ev@0@10109, \"expecting end-of-input\");\n                          });\n                      });\n                  });\n                ((@skip std/core/types/Just(((@skip std/core/types/Unit() : () ) as @pat@3@0@0: ()) : ()) : (maybe :: V -> V)<()> ) as @pat@2@0@0@0: ((maybe :: V -> V)<()>))\n                   -> std/core/types/Unit;\n              });\n          });\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/eof\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/eof"]}, {"name": {"op": "Var","id": "std/text/parse/hex-digits","type": {"op": "Function","params": [],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/string","type": {"op": "Ptr"}},"name": "std/core/string/listchar/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/string/listchar/string"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/satisfy-fail","type": {"op": "Function","params": [{"op": "String"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/satisfy-fail<(list :: V -> V)<char>>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "digit"},"annotation": "genExpr: \"digit\""}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x255","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/next-while0","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Bool"},"purity": "Effectful"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/next-while0"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/char","type": {"op": "Ptr"}},"name": "std/core/char/is-hex-digit","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: std/core/char/is-hex-digit"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<char>"}]},"annotation": "genExpr: std/text/parse/next-while0(slice, std/core/char/is-hex-digit, (std/core/types/Nil<char>))"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x255","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"256","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"257","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"256","type": {"op": "Top"}},"annotation": "genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"256\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"257","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"257\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"258","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"259","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"260","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x255\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"256\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"256\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"257\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"257\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"258\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"258\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"259\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"259\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"260\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@4: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"260\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"257\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"257\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"258\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"259\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"260\",\"type\": {\"op\": \"Int\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"256\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"256\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x255\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"256\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"257\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x255","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"261","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"262","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"262","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"262\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"263","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"264","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"265","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"261","type": {"op": "Top"}},"annotation": "genTest: normal: (xs: list<char>) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"261\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: xs"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"262","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"262\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: rest"}]},"annotation": "genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)"}]},"annotation": "genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x255\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"261\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"261\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"262\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"262\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"263\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"263\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"264\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"264\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"265\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"265\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"262\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"262\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"263\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"264\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"265\",\"type\": {\"op\": \"Int\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x255\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"261\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"262\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(slice: sslice/sslice){\n  match ((std/text/parse/next-while0(slice, std/core/char/is-hex-digit, (std/core/types/Nil<char>)))) {\n    ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n       -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n    ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n       -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n  };\n}"}]},"annotation": "genExpr: std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"digit\", (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, std/core/char/is-hex-digit, (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))"}]},"annotation": "genExpr: std/core/string/listchar/string((std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"digit\", (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, std/core/char/is-hex-digit, (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(std/text/parse/parse :: (E, V) -> V)>(){\n  std/core/string/listchar/string((std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"digit\", (fn(slice: sslice/sslice){\n      (match ((std/text/parse/next-while0(slice, std/core/char/is-hex-digit, (std/core/types/Nil<char>)))) {\n        ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n           -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n        ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n           -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n      });\n    }))));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/hex-digits\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/hex-digits"]}, {"name": {"op": "Var","id": "std/text/parse/many-acc","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "p","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "acc","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/(||)","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/(||)<(list :: V -> V)<a>,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "x","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "p","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: p"},"args": []},"annotation": "genExpr: p()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["x"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/many-acc","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/many-acc<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "p","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: p"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "Var","id": "acc","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: acc"}]},"annotation": "genExpr: std/core/types/Cons<a>(x, acc)"}]},"annotation": "genExpr: std/text/parse/many-acc<a,(e :: E)>(p, (std/core/types/Cons<a>(x, acc)))"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>(){\n  val x : a\n        = p();\n  std/text/parse/many-acc<a,(e :: E)>(p, (std/core/types/Cons<a>(x, acc)));\n}"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/list","type": {"op": "Ptr"}},"name": "std/core/list/@lift-reverse-append@4790","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-reverse-append@4790<a>"},"args": [{"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}, {"op": "DebugWrap","inner": {"op": "Var","id": "acc","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: acc"}]},"annotation": "genExpr: std/core/list/@lift-reverse-append@4790<a>((std/core/types/Nil<a>), acc)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>(){\n  std/core/list/@lift-reverse-append@4790<a>((std/core/types/Nil<a>), acc);\n}"}]},"annotation": "genExpr: std/text/parse/(||)<(list :: V -> V)<a>,(e :: E)>((fn<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>(){\n    val x : a\n          = (p());\n    (std/text/parse/many-acc<a,(e :: E)>(p, (std/core/types/Cons<a>(x, acc))));\n  }), (fn<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>(){\n    (std/core/list/@lift-reverse-append@4790<a>((std/core/types/Nil<a>), acc));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>(p: (std/text/parse/parser :: (E, V) -> V)<(e :: E),a>, acc: (list :: V -> V)<a>){\n  std/text/parse/(||)<(list :: V -> V)<a>,(e :: E)>((fn<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>(){\n      val x : a\n            = (p());\n      (std/text/parse/many-acc<a,(e :: E)>(p, (std/core/types/Cons<a>(x, acc))));\n    }), (fn<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>(){\n      (std/core/list/@lift-reverse-append@4790<a>((std/core/types/Nil<a>), acc));\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/many-acc\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/many-acc"]}, {"name": {"op": "Var","id": "std/text/parse/many","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "p","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/many-acc","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/many-acc<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "p","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: p"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}]},"annotation": "genExpr: std/text/parse/many-acc<a,(e :: E)>(p, (std/core/types/Nil<a>))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>(p: (std/text/parse/parser :: (E, V) -> V)<(e :: E),a>){\n  std/text/parse/many-acc<a,(e :: E)>(p, (std/core/types/Nil<a>));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/many\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/many"]}, {"name": {"op": "Var","id": "std/text/parse/many1","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "p","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<a>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "p","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: p"},"args": []},"annotation": "genExpr: p()"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/many-acc","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/many-acc<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "p","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: p"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<a>"}]},"annotation": "genExpr: std/text/parse/many-acc<a,(e :: E)>(p, (std/core/types/Nil<a>))"}]},"annotation": "genExpr: std/core/types/Cons<a>((p()), (std/text/parse/many-acc<a,(e :: E)>(p, (std/core/types/Nil<a>))))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>(p: (std/text/parse/parser :: (E, V) -> V)<(e :: E),a>){\n  std/core/types/Cons<a>((p()), (std/text/parse/many-acc<a,(e :: E)>(p, (std/core/types/Nil<a>))));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/many1\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/many1"]}, {"name": {"op": "Var","id": "std/text/parse/maybe","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "perr","type": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "perr","type": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"}},"type_tag": "std/text/parse/parse-error","clauses": [{"tag": "std/text/parse/ParseOk","params": [{"op": "Var","id": "@\"result\"266","type": {"op": "Top"}}, {"op": "Var","id": "@\"rest\"267","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"rest\"267","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@1@0: string), (@pat@2@0: int), (@pat@3: int)) : sslice/sslice ) as @pat@0@0: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"267\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"268","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"269","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"270","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"result\"266","type": {"op": "Top"}},"annotation": "genTest: normal: (x@0: 1598) -> {\"op\": \"Var\",\"id\": \"@\\\"result\\\"266\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x@0"}]},"annotation": "genExpr: std/core/types/Just<a>(x@0)"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"perr\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"266\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: 1598) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"266\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"267\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@1@0: string), (@pat@2@0: int), (@pat@3: int)) : sslice/sslice ) as @pat@0@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"267\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"268\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"268\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"269\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@2@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"269\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"270\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"270\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"267\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@1@0: string), (@pat@2@0: int), (@pat@3: int)) : sslice/sslice ) as @pat@0@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"267\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"268\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"269\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"270\",\"type\": {\"op\": \"Int\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"perr\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}: \"std/text/parse/parse-error\".\"std/text/parse/ParseOk\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"266\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"267\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "perr","type": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"}},"type_tag": "std/text/parse/parse-error","clauses": [{"tag": "std/text/parse/ParseError","params": [{"op": "Var","id": "@\"msg\"271","type": {"op": "String"}}, {"op": "Var","id": "@\"rest\"272","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"rest\"272","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as @pat@5: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"272\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"273","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"274","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"275","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<a>"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"perr\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}),(msg,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"msg\\\"271\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (msg: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"msg\\\\\\\"271\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"272\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as @pat@5: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"272\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"273\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"273\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"274\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"274\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"275\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"275\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"272\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as @pat@5: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"272\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"273\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"274\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"275\",\"type\": {\"op\": \"Int\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"perr\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}: \"std/text/parse/parse-error\".\"std/text/parse/ParseError\"(({\"op\": \"Var\",\"id\": \"@\\\"msg\\\"271\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"272\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(perr: (std/text/parse/parse-error :: V -> V)<a>){\n  (match (perr) {\n    ((std/text/parse/ParseOk((x@0: a) : a, ((@skip std/core/sslice/Sslice((@pat@1@0: string) : string, (@pat@2@0: int) : int, (@pat@3: int) : int) : sslice/sslice ) as @pat@0@0: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat@2: ((std/text/parse/parse-error :: V -> V)<a>))\n       -> std/core/types/Just<a>(x@0);\n    ((@skip std/text/parse/ParseError((msg: string) : string, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as @pat@5: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat@4: ((std/text/parse/parse-error :: V -> V)<a>))\n       -> std/core/types/Nothing<a>;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/maybe\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/maybe"]}, {"name": {"op": "Var","id": "std/text/parse/next-match","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}, {"op": "Var","id": "cs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "cs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<sslice/sslice>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice"}]},"annotation": "genExpr: std/core/types/Just<sslice/sslice>(slice)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"cs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"cs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "cs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"276","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"277","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x278","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/next","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/next"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice"}]},"annotation": "genExpr: std/core/sslice/next(slice)"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x278","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"279","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"279","type": {"op": "Top"}},"annotation": "genTest: normal: ((std/core/types/Tuple2((d: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@2: (char, sslice/sslice)) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"279\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"280","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"281","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "DebugWrap","inner": {"op": "Primitive","name": "(#1 == #2)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"276","type": {"op": "Top"}},"annotation": "genTest: normal: (c: char) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"276\",\"type\": {\"op\": \"Top\"}}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"280","type": {"op": "Top"}},"annotation": "genTest: normal: (d: char) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"280\",\"type\": {\"op\": \"Top\"}}"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/char/(==)(c, d)"},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/next-match","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/next-match"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"281","type": {"op": "Top"}},"annotation": "genTest: normal: (rest: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"281\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: rest"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"277","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (cc: list<char>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"277\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: cc"}]},"annotation": "genExpr: std/text/parse/next-match(rest, cc)"}}}],"default": {"op": "AlternativeFail"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x278\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"279\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((d: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@2: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"279\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(d,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"280\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (d: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"280\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"281\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"281\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"279\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((d: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@2: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"279\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"280\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"281\",\"type\": {\"op\": \"Top\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x278\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"279\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<sslice/sslice>"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x278\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/sslice/next(slice))) {\n  ((std/core/types/Just(((std/core/types/Tuple2((d: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@2: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n     | std/core/char/(==)(c, d) -> std/text/parse/next-match(rest, cc);\n  (@pat@3: ((maybe :: V -> V)<(char, sslice/sslice)>))\n     -> std/core/types/Nothing<sslice/sslice>;\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"cs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"276\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"276\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(cc,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"277\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (cc: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"277\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"cs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"276\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"277\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(slice: sslice/sslice, cs: (list :: V -> V)<char>){\n  match (cs) {\n    ((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat: ((list :: V -> V)<char>))\n       -> std/core/types/Just<sslice/sslice>(slice);\n    ((@skip std/core/types/Cons((c: char) : char, (cc: (list :: V -> V)<char>) : (list :: V -> V)<char>) : (list :: V -> V)<char> ) as @pat@0: ((list :: V -> V)<char>))\n       -> (match ((std/core/sslice/next(slice))) {\n        ((std/core/types/Just(((std/core/types/Tuple2((d: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@2: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n           | std/core/char/(==)(c, d) -> std/text/parse/next-match(rest, cc);\n        (@pat@3: ((maybe :: V -> V)<(char, sslice/sslice)>))\n           -> std/core/types/Nothing<sslice/sslice>;\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/next-match\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/next-match"]}, {"name": {"op": "Var","id": "std/text/parse/no-digit","type": {"op": "Function","params": [],"return": {"op": "Ptr","extern_ptr_name": "\"char\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/satisfy-fail","type": {"op": "Function","params": [{"op": "String"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/satisfy-fail<char>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "not a digit"},"annotation": "genExpr: \"not a digit\""}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x282","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/next","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/next"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice"}]},"annotation": "genExpr: std/core/sslice/next(slice)"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x282","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"283","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"283","type": {"op": "Top"}},"annotation": "genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"283\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"284","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"285","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "b@10027","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "(#1 >= #2)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"284","type": {"op": "Top"}},"annotation": "genTest: normal: (c: char) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"284\",\"type\": {\"op\": \"Top\"}}"}, {"op": "Literal","type": {"op": "String"},"value": "0"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "(#1 <= #2)","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"284","type": {"op": "Top"}},"annotation": "genTest: normal: (c: char) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"284\",\"type\": {\"op\": \"Top\"}}"}, {"op": "Literal","type": {"op": "String"},"value": "9"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/char/(<=)(c, '9')"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"284\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"284\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"0\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@0@1,{\"op\": \"Primitive\",\"name\": \"(#1 >= #2)\",\"args\": [{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"284\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"284\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"0\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/char/(>=)(c, '0'))) {\n  ((std/core/types/True() : bool ) as @pat@3: bool)\n     -> std/core/char/(<=)(c, '9');\n  (@pat@0@1: bool)\n     -> std/core/types/False;\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"b@10027\",\"type\": {\"op\": \"Bool\"}}"},"export_as": ["b@10027"]}],"body": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "b@10027","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"b@10027\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "b@10027","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"b@10027\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (b@10027) {\n  ((std/core/types/True() : bool ) as @pat@2: bool)\n     -> std/core/types/False;\n  ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n     -> std/core/types/True;\n}"}},"annotation": "genExpr: val b@10027 : bool\n      = match ((std/core/char/(>=)(c, '0'))) {\n        ((std/core/types/True() : bool ) as @pat@3: bool)\n           -> std/core/char/(<=)(c, '9');\n        (@pat@0@1: bool)\n           -> std/core/types/False;\n      };\nmatch (b@10027) {\n  ((std/core/types/True() : bool ) as @pat@2: bool)\n     -> std/core/types/False;\n  ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n     -> std/core/types/True;\n}"},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<(char, sslice/sslice)>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<char,sslice/sslice>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"284","type": {"op": "Top"}},"annotation": "genTest: normal: (c: char) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"284\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: c"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"285","type": {"op": "Top"}},"annotation": "genTest: normal: (rest: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"285\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: rest"}]},"annotation": "genExpr: std/core/types/Tuple2<char,sslice/sslice>(c, rest)"}]},"annotation": "genExpr: std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)))"}}}],"default": {"op": "AlternativeFail"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x282\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"283\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"283\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"284\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"284\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"285\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"285\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"283\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"283\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"284\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"285\",\"type\": {\"op\": \"Top\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x282\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"283\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<(char, sslice/sslice)>"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x282\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(slice: sslice/sslice){\n  match ((std/core/sslice/next(slice))) {\n    ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n       | val b@10027 : bool\n               = (match ((std/core/char/(>=)(c, '0'))) {\n                 ((std/core/types/True() : bool ) as @pat@3: bool)\n                    -> std/core/char/(<=)(c, '9');\n                 (@pat@0@1: bool)\n                    -> std/core/types/False;\n               });\n      (match (b@10027) {\n        ((std/core/types/True() : bool ) as @pat@2: bool)\n           -> std/core/types/False;\n        ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n           -> std/core/types/True;\n      }) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n    (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n       -> std/core/types/Nothing<(char, sslice/sslice)>;\n  };\n}"}]},"annotation": "genExpr: std/text/parse/satisfy-fail<char>(\"not a digit\", (fn(slice: sslice/sslice){\n    (match ((std/core/sslice/next(slice))) {\n      ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         | val b@10027 : bool\n                 = (match ((std/core/char/(>=)(c, '0'))) {\n                   ((std/core/types/True() : bool ) as @pat@3: bool)\n                      -> std/core/char/(<=)(c, '9');\n                   (@pat@0@1: bool)\n                      -> std/core/types/False;\n                 });\n        (match (b@10027) {\n          ((std/core/types/True() : bool ) as @pat@2: bool)\n             -> std/core/types/False;\n          ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n             -> std/core/types/True;\n        }) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n      (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         -> std/core/types/Nothing<(char, sslice/sslice)>;\n    });\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(std/text/parse/parse :: (E, V) -> V)>(){\n  std/text/parse/satisfy-fail<char>(\"not a digit\", (fn(slice: sslice/sslice){\n      (match ((std/core/sslice/next(slice))) {\n        ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n           | val b@10027 : bool\n                   = (match ((std/core/char/(>=)(c, '0'))) {\n                     ((std/core/types/True() : bool ) as @pat@3: bool)\n                        -> std/core/char/(<=)(c, '9');\n                     (@pat@0@1: bool)\n                        -> std/core/types/False;\n                   });\n          (match (b@10027) {\n            ((std/core/types/True() : bool ) as @pat@2: bool)\n               -> std/core/types/False;\n            ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n               -> std/core/types/True;\n          }) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n        (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n           -> std/core/types/Nothing<(char, sslice/sslice)>;\n      });\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/no-digit\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/no-digit"]}, {"name": {"op": "Var","id": "std/text/parse/none-of","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "\"char\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "chars","type": {"op": "String"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/satisfy-fail","type": {"op": "Function","params": [{"op": "String"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/satisfy-fail<char>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x286","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/next","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/next"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice"}]},"annotation": "genExpr: std/core/sslice/next(slice)"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x286","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"287","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"287","type": {"op": "Top"}},"annotation": "genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"287\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"288","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"289","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "b@10031","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/string/contains","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "chars","type": {"op": "String"}},"annotation": "genExpr: chars"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/string","type": {"op": "Ptr"}},"name": "std/core/string/char/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/string/char/string"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"288","type": {"op": "Top"}},"annotation": "genTest: normal: (c: char) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"288\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: c"}]},"annotation": "genExpr: std/core/string/char/string(c)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/string/contains(chars, (std/core/string/char/string(c)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"b@10031\",\"type\": {\"op\": \"Bool\"}}"},"export_as": ["b@10031"]}],"body": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "b@10031","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"b@10031\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "b@10031","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"b@10031\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (b@10031) {\n  ((std/core/types/True() : bool ) as @pat@2: bool)\n     -> std/core/types/False;\n  ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n     -> std/core/types/True;\n}"}},"annotation": "genExpr: val b@10031 : bool\n      = std/core/string/contains(chars, (std/core/string/char/string(c)));\nmatch (b@10031) {\n  ((std/core/types/True() : bool ) as @pat@2: bool)\n     -> std/core/types/False;\n  ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n     -> std/core/types/True;\n}"},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<(char, sslice/sslice)>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<char,sslice/sslice>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"288","type": {"op": "Top"}},"annotation": "genTest: normal: (c: char) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"288\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: c"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"289","type": {"op": "Top"}},"annotation": "genTest: normal: (rest: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"289\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: rest"}]},"annotation": "genExpr: std/core/types/Tuple2<char,sslice/sslice>(c, rest)"}]},"annotation": "genExpr: std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)))"}}}],"default": {"op": "AlternativeFail"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x286\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"287\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"287\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"288\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"288\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"289\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"289\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"287\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"287\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"288\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"289\",\"type\": {\"op\": \"Top\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x286\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"287\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<(char, sslice/sslice)>"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x286\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(slice: sslice/sslice){\n  match ((std/core/sslice/next(slice))) {\n    ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n       | val b@10031 : bool\n               = std/core/string/contains(chars, (std/core/string/char/string(c)));\n      (match (b@10031) {\n        ((std/core/types/True() : bool ) as @pat@2: bool)\n           -> std/core/types/False;\n        ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n           -> std/core/types/True;\n      }) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n    (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n       -> std/core/types/Nothing<(char, sslice/sslice)>;\n  };\n}"}]},"annotation": "genExpr: std/text/parse/satisfy-fail<char>(\"\", (fn(slice: sslice/sslice){\n    (match ((std/core/sslice/next(slice))) {\n      ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         | val b@10031 : bool\n                 = std/core/string/contains(chars, (std/core/string/char/string(c)));\n        (match (b@10031) {\n          ((std/core/types/True() : bool ) as @pat@2: bool)\n             -> std/core/types/False;\n          ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n             -> std/core/types/True;\n        }) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n      (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         -> std/core/types/Nothing<(char, sslice/sslice)>;\n    });\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(std/text/parse/parse :: (E, V) -> V)>(chars: string){\n  std/text/parse/satisfy-fail<char>(\"\", (fn(slice: sslice/sslice){\n      (match ((std/core/sslice/next(slice))) {\n        ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n           | val b@10031 : bool\n                   = std/core/string/contains(chars, (std/core/string/char/string(c)));\n          (match (b@10031) {\n            ((std/core/types/True() : bool ) as @pat@2: bool)\n               -> std/core/types/False;\n            ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n               -> std/core/types/True;\n          }) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n        (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n           -> std/core/types/Nothing<(char, sslice/sslice)>;\n      });\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/none-of\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/none-of"]}, {"name": {"op": "Var","id": "std/text/parse/none-of-many1","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "chars","type": {"op": "String"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/string","type": {"op": "Ptr"}},"name": "std/core/string/listchar/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/string/listchar/string"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/satisfy-fail","type": {"op": "Function","params": [{"op": "String"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/satisfy-fail<(list :: V -> V)<char>>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x290","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/next-while0","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Bool"},"purity": "Effectful"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/next-while0"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "b@10034","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/string/contains","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "chars","type": {"op": "String"}},"annotation": "genExpr: chars"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/string","type": {"op": "Ptr"}},"name": "std/core/string/char/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/string/char/string"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "c","type": {"op": "Ptr","extern_ptr_name": "\"char\""}},"annotation": "genExpr: c"}]},"annotation": "genExpr: std/core/string/char/string(c)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/string/contains(chars, (std/core/string/char/string(c)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"b@10034\",\"type\": {\"op\": \"Bool\"}}"},"export_as": ["b@10034"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "b@10034","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@9,{\"op\": \"Var\",\"id\": \"b@10034\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "b@10034","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"b@10034\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(c: char){\n  val b@10034 : bool\n        = std/core/string/contains(chars, (std/core/string/char/string(c)));\n  match (b@10034) {\n    ((std/core/types/True() : bool ) as @pat@9: bool)\n       -> std/core/types/False;\n    ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n       -> std/core/types/True;\n  };\n}"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<char>"}]},"annotation": "genExpr: std/text/parse/next-while0(slice, (fn(c: char){\n    val b@10034 : bool\n          = (std/core/string/contains(chars, (std/core/string/char/string(c))));\n    (match (b@10034) {\n      ((std/core/types/True() : bool ) as @pat@9: bool)\n         -> std/core/types/False;\n      ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n         -> std/core/types/True;\n    });\n  }), (std/core/types/Nil<char>))"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x290","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"291","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"292","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"291","type": {"op": "Top"}},"annotation": "genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"291\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"292","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"292\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"293","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"294","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"295","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x290\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"291\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"291\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"292\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"292\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"293\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"293\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"294\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"294\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"295\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@4: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"295\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"292\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"292\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"293\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"294\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"295\",\"type\": {\"op\": \"Int\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"291\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"291\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x290\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"291\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"292\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x290","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"296","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"297","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"297","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"297\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"298","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"299","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"300","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"296","type": {"op": "Top"}},"annotation": "genTest: normal: (xs: list<char>) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"296\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: xs"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"297","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"297\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: rest"}]},"annotation": "genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)"}]},"annotation": "genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x290\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"296\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"296\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"297\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"297\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"298\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"298\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"299\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"299\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"300\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"300\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"297\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"297\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"298\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"299\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"300\",\"type\": {\"op\": \"Int\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x290\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"296\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"297\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(slice: sslice/sslice){\n  match ((std/text/parse/next-while0(slice, (fn(c: char){\n      val b@10034 : bool\n            = (std/core/string/contains(chars, (std/core/string/char/string(c))));\n      (match (b@10034) {\n        ((std/core/types/True() : bool ) as @pat@9: bool)\n           -> std/core/types/False;\n        ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n           -> std/core/types/True;\n      });\n    }), (std/core/types/Nil<char>)))) {\n    ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n       -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n    ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n       -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n  };\n}"}]},"annotation": "genExpr: std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"\", (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, (fn(c: char){\n        val b@10034 : bool\n              = (std/core/string/contains(chars, (std/core/string/char/string(c))));\n        (match (b@10034) {\n          ((std/core/types/True() : bool ) as @pat@9: bool)\n             -> std/core/types/False;\n          ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n             -> std/core/types/True;\n        });\n      }), (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))"}]},"annotation": "genExpr: std/core/string/listchar/string((std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"\", (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, (fn(c: char){\n        val b@10034 : bool\n              = (std/core/string/contains(chars, (std/core/string/char/string(c))));\n        (match (b@10034) {\n          ((std/core/types/True() : bool ) as @pat@9: bool)\n             -> std/core/types/False;\n          ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n             -> std/core/types/True;\n        });\n      }), (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(std/text/parse/parse :: (E, V) -> V)>(chars: string){\n  std/core/string/listchar/string((std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"\", (fn(slice: sslice/sslice){\n      (match ((std/text/parse/next-while0(slice, (fn(c: char){\n          val b@10034 : bool\n                = (std/core/string/contains(chars, (std/core/string/char/string(c))));\n          (match (b@10034) {\n            ((std/core/types/True() : bool ) as @pat@9: bool)\n               -> std/core/types/False;\n            ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n               -> std/core/types/True;\n          });\n        }), (std/core/types/Nil<char>)))) {\n        ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n           -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n        ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n           -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n      });\n    }))));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/none-of-many1\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/none-of-many1"]}, {"name": {"op": "Var","id": "std/text/parse/one-of","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "\"char\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "chars","type": {"op": "String"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/satisfy-fail","type": {"op": "Function","params": [{"op": "String"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/satisfy-fail<char>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "chars","type": {"op": "String"}},"annotation": "genExpr: chars"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x301","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/next","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/next"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice"}]},"annotation": "genExpr: std/core/sslice/next(slice)"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x301","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"302","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"302","type": {"op": "Top"}},"annotation": "genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"302\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"303","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"304","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/string/contains","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "chars","type": {"op": "String"}},"annotation": "genExpr: chars"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/string","type": {"op": "Ptr"}},"name": "std/core/string/char/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/string/char/string"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"303","type": {"op": "Top"}},"annotation": "genTest: normal: (c: char) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"303\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: c"}]},"annotation": "genExpr: std/core/string/char/string(c)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/string/contains(chars, (std/core/string/char/string(c)))"},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<(char, sslice/sslice)>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<char,sslice/sslice>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"303","type": {"op": "Top"}},"annotation": "genTest: normal: (c: char) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"303\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: c"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"304","type": {"op": "Top"}},"annotation": "genTest: normal: (rest: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"304\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: rest"}]},"annotation": "genExpr: std/core/types/Tuple2<char,sslice/sslice>(c, rest)"}]},"annotation": "genExpr: std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)))"}}}],"default": {"op": "AlternativeFail"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x301\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"302\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"302\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"303\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"303\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"304\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"304\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"302\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"302\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"303\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"304\",\"type\": {\"op\": \"Top\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x301\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"302\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<(char, sslice/sslice)>"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x301\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(slice: sslice/sslice){\n  match ((std/core/sslice/next(slice))) {\n    ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n       | std/core/string/contains(chars, (std/core/string/char/string(c))) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n    (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n       -> std/core/types/Nothing<(char, sslice/sslice)>;\n  };\n}"}]},"annotation": "genExpr: std/text/parse/satisfy-fail<char>(chars, (fn(slice: sslice/sslice){\n    (match ((std/core/sslice/next(slice))) {\n      ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         | std/core/string/contains(chars, (std/core/string/char/string(c))) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n      (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         -> std/core/types/Nothing<(char, sslice/sslice)>;\n    });\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(std/text/parse/parse :: (E, V) -> V)>(chars: string){\n  std/text/parse/satisfy-fail<char>(chars, (fn(slice: sslice/sslice){\n      (match ((std/core/sslice/next(slice))) {\n        ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n           | std/core/string/contains(chars, (std/core/string/char/string(c))) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n        (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n           -> std/core/types/Nothing<(char, sslice/sslice)>;\n      });\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/one-of\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/one-of"]}, {"name": {"op": "Var","id": "std/text/parse/one-of-or","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Ptr","extern_ptr_name": "\"char\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "chars","type": {"op": "String"}}, {"op": "Var","id": "default","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/(||)","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/(||)<char,(total :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/one-of","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "\"char\""},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/one-of"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "chars","type": {"op": "String"}},"annotation": "genExpr: chars"}]},"annotation": "genExpr: std/text/parse/one-of(chars)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(std/text/parse/parse :: (E, V) -> V)>(){\n  std/text/parse/one-of(chars);\n}"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "Var","id": "default","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(std/text/parse/parse :: (E, V) -> V)>(){\n  default;\n}"}]},"annotation": "genExpr: std/text/parse/(||)<char,(total :: E)>((fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    (std/text/parse/one-of(chars));\n  }), (fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    default;\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(std/text/parse/parse :: (E, V) -> V)>(chars: string, default: char){\n  std/text/parse/(||)<char,(total :: E)>((fn<(std/text/parse/parse :: (E, V) -> V)>(){\n      (std/text/parse/one-of(chars));\n    }), (fn<(std/text/parse/parse :: (E, V) -> V)>(){\n      default;\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/one-of-or\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/one-of-or"]}, {"name": {"op": "Var","id": "std/text/parse/parse","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "input0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}, {"op": "Var","id": "p","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/local-var","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"local-var\""}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/local-var<sslice/sslice,(std/text/parse/parse-error :: V -> V)<a>,(e :: E),(h :: H)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "input0","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: input0"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "input","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/@handle-parse","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/text/parse/parse"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/@handle-parse<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/@Hnd-parse","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}],"return": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse"},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/@Hnd-parse<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 3},"annotation": "genExpr: 3"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/clause-tail0","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/clause-tail0<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),sslice/sslice>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "getRef(Ref[Ptr]): Ptr","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "input","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}},"annotation": "genExpr: input"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n  std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input);\n}"}]},"annotation": "genExpr: std/core/hnd/clause-tail0<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),sslice/sslice>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n  (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n}))"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/Clause1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Clause1<string,a,(std/text/parse/parse :: (E, V) -> V),<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@_wildcard-x696_16","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}, {"op": "Var","id": "x","type": {"op": "String"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/yield-to-final","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-to-final<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@_wildcard-x696_45","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/ParseError","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/ParseError<a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "String"}},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "getRef(Ref[Ptr]): Ptr","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "input","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}},"annotation": "genExpr: input"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input)"}]},"annotation": "genExpr: std/text/parse/ParseError<a>(x, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input)))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<2252,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n  std/text/parse/ParseError<a>(x, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input)));\n}"}]},"annotation": "genExpr: std/core/hnd/yield-to-final<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(m, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<2252,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n    (std/text/parse/ParseError<a>(x, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input))));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(m: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(2440 :: H)>|(2447 :: E)>,(std/text/parse/parse-error :: V -> V)<2446>>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, x: string){\n  std/core/hnd/yield-to-final<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(m, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<2252,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n      (std/text/parse/ParseError<a>(x, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input))));\n    }));\n}"}]},"annotation": "genExpr: std/core/hnd/Clause1<string,a,(std/text/parse/parse :: (E, V) -> V),<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(m: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(2440 :: H)>|(2447 :: E)>,(std/text/parse/parse-error :: V -> V)<2446>>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, x: string){\n  (std/core/hnd/yield-to-final<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(m, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<2252,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n      (std/text/parse/ParseError<a>(x, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input))));\n    })));\n}))"},"annotation": "genExpr: forall<a> std/core/hnd/Clause1<string,a,(std/text/parse/parse :: (E, V) -> V),<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(m: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(2440 :: H)>|(2447 :: E)>,(std/text/parse/parse-error :: V -> V)<2446>>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, x: string){\n  (std/core/hnd/yield-to-final<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>>(m, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n      (std/text/parse/ParseError<b>(x, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input))));\n    })));\n}))"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/Clause0","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Clause0<bool,(std/text/parse/parse :: (E, V) -> V),<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "m@0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@_wildcard-x730_16","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/yield-to","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-to<bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "m@0","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m@0"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/protect","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/protect<(),bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Unit"}},"annotation": "genExpr: std/core/types/Unit"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@_wildcard-x730_55","type": {"op": "Unit"}}, {"op": "Var","id": "r","type": {"op": "Function","params": [{"op": "Bool"}],"return": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "save","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "getRef(Ref[Ptr]): Ptr","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "input","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}},"annotation": "genExpr: input"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"save\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}"},"export_as": ["save"]}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x305","type": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "r","type": {"op": "Function","params": [{"op": "Bool"}],"return": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"},"purity": "Effectful"}},"annotation": "genExpr: r"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}]},"annotation": "genExpr: r(std/core/types/True)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x305","type": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"}},"type_tag": "std/text/parse/parse-error","clauses": [{"tag": "std/text/parse/ParseOk","params": [{"op": "Var","id": "@\"result\"306","type": {"op": "Top"}}, {"op": "Var","id": "@\"rest\"307","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"rest\"307","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as rest1: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"307\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"308","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"309","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"310","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/ParseOk","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/ParseOk<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"result\"306","type": {"op": "Top"}},"annotation": "genTest: normal: (x1: 2446) -> {\"op\": \"Var\",\"id\": \"@\\\"result\\\"306\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x1"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"rest\"307","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as rest1: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"307\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}"},"annotation": "genExpr: rest1"}]},"annotation": "genExpr: std/text/parse/ParseOk<a>(x1, rest1)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x305\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}),(x1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"306\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x1: 2446) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"306\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"307\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as rest1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"307\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"308\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"308\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"309\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"309\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"310\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"310\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"307\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as rest1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"307\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"308\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"309\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"310\",\"type\": {\"op\": \"Int\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x305\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}: \"std/text/parse/parse-error\".\"std/text/parse/ParseOk\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"306\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"307\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}))"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "setRef(Ref[Ptr], Ptr): Unit","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "input","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}},"annotation": "genExpr: input"}, {"op": "DebugWrap","inner": {"op": "Var","id": "save","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: save"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, save)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}],"body": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x311","type": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "r","type": {"op": "Function","params": [{"op": "Bool"}],"return": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"},"purity": "Effectful"}},"annotation": "genExpr: r"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}]},"annotation": "genExpr: r(std/core/types/False)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x311","type": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"}},"type_tag": "std/text/parse/parse-error","clauses": [{"tag": "std/text/parse/ParseOk","params": [{"op": "Var","id": "@\"result\"312","type": {"op": "Top"}}, {"op": "Var","id": "@\"rest\"313","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"rest\"313","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@4: string), (@pat@5: int), (@pat@6: int)) : sslice/sslice ) as rest2: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"313\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"314","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"315","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"316","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/ParseOk","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/ParseOk<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"result\"312","type": {"op": "Top"}},"annotation": "genTest: normal: (x2: 2446) -> {\"op\": \"Var\",\"id\": \"@\\\"result\\\"312\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x2"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"rest\"313","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@4: string), (@pat@5: int), (@pat@6: int)) : sslice/sslice ) as rest2: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"313\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}"},"annotation": "genExpr: rest2"}]},"annotation": "genExpr: std/text/parse/ParseOk<a>(x2, rest2)"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x311\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}),(x2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"312\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x2: 2446) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"312\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"313\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@4: string), (@pat@5: int), (@pat@6: int)) : sslice/sslice ) as rest2: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"313\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"314\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@4: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"314\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"315\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@5: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"315\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"316\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@6: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"316\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"313\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@4: string), (@pat@5: int), (@pat@6: int)) : sslice/sslice ) as rest2: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"313\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"314\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"315\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"316\",\"type\": {\"op\": \"Int\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x311\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}: \"std/text/parse/parse-error\".\"std/text/parse/ParseOk\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"312\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"313\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}))"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "@x305","type": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"}},"annotation": "genExpr: err1"}}]},"annotation": "genBranch: [(@pat@7,{\"op\": \"Var\",\"id\": \"@x311\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((r(std/core/types/False))) {\n  ((std/text/parse/ParseOk((x2: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@4: string) : string, (@pat@5: int) : int, (@pat@6: int) : int) : sslice/sslice ) as rest2: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat@3: ((std/text/parse/parse-error :: V -> V)<2446>))\n     -> std/text/parse/ParseOk<a>(x2, rest2);\n  (@pat@7: ((std/text/parse/parse-error :: V -> V)<2446>))\n     -> err1;\n}"}},"annotation": "genExpr: val _ : ()\n      = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, save);\nmatch ((r(std/core/types/False))) {\n  ((std/text/parse/ParseOk((x2: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@4: string) : string, (@pat@5: int) : int, (@pat@6: int) : int) : sslice/sslice ) as rest2: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat@3: ((std/text/parse/parse-error :: V -> V)<2446>))\n     -> std/text/parse/ParseOk<a>(x2, rest2);\n  (@pat@7: ((std/text/parse/parse-error :: V -> V)<2446>))\n     -> err1;\n}"}}]},"annotation": "genBranch: [(err1,{\"op\": \"Var\",\"id\": \"@x305\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x730_55: (), r: (bool) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n  val save : sslice/sslice\n        = std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input);\n  match ((r(std/core/types/True))) {\n    ((std/text/parse/ParseOk((x1: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as rest1: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat: ((std/text/parse/parse-error :: V -> V)<2446>))\n       -> std/text/parse/ParseOk<a>(x1, rest1);\n    (err1: ((std/text/parse/parse-error :: V -> V)<2446>))\n       -> val _ : ()\n                = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, save);\n      (match ((r(std/core/types/False))) {\n        ((std/text/parse/ParseOk((x2: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@4: string) : string, (@pat@5: int) : int, (@pat@6: int) : int) : sslice/sslice ) as rest2: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat@3: ((std/text/parse/parse-error :: V -> V)<2446>))\n           -> std/text/parse/ParseOk<a>(x2, rest2);\n        (@pat@7: ((std/text/parse/parse-error :: V -> V)<2446>))\n           -> err1;\n      });\n  };\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"},"purity": "Effectful"}},"annotation": "genExpr: k"}]},"annotation": "genExpr: std/core/hnd/protect<(),bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(std/core/types/Unit, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x730_55: (), r: (bool) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n    val save : sslice/sslice\n          = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n    (match ((r(std/core/types/True))) {\n      ((std/text/parse/ParseOk((x1: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as rest1: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat: ((std/text/parse/parse-error :: V -> V)<2446>))\n         -> std/text/parse/ParseOk<a>(x1, rest1);\n      (err1: ((std/text/parse/parse-error :: V -> V)<2446>))\n         -> val _ : ()\n                  = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, save);\n        (match ((r(std/core/types/False))) {\n          ((std/text/parse/ParseOk((x2: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@4: string) : string, (@pat@5: int) : int, (@pat@6: int) : int) : sslice/sslice ) as rest2: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat@3: ((std/text/parse/parse-error :: V -> V)<2446>))\n             -> std/text/parse/ParseOk<a>(x2, rest2);\n          (@pat@7: ((std/text/parse/parse-error :: V -> V)<2446>))\n             -> err1;\n        });\n    });\n  }), k)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(k: ((hnd/resume-result :: (V, V) -> V)<bool,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n  std/core/hnd/protect<(),bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(std/core/types/Unit, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x730_55: (), r: (bool) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n      val save : sslice/sslice\n            = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n      (match ((r(std/core/types/True))) {\n        ((std/text/parse/ParseOk((x1: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as rest1: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat: ((std/text/parse/parse-error :: V -> V)<2446>))\n           -> std/text/parse/ParseOk<a>(x1, rest1);\n        (err1: ((std/text/parse/parse-error :: V -> V)<2446>))\n           -> val _ : ()\n                    = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, save);\n          (match ((r(std/core/types/False))) {\n            ((std/text/parse/ParseOk((x2: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@4: string) : string, (@pat@5: int) : int, (@pat@6: int) : int) : sslice/sslice ) as rest2: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat@3: ((std/text/parse/parse-error :: V -> V)<2446>))\n               -> std/text/parse/ParseOk<a>(x2, rest2);\n            (@pat@7: ((std/text/parse/parse-error :: V -> V)<2446>))\n               -> err1;\n          });\n      });\n    }), k);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-to<bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(m@0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(k: ((hnd/resume-result :: (V, V) -> V)<bool,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n    (std/core/hnd/protect<(),bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(std/core/types/Unit, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x730_55: (), r: (bool) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n        val save : sslice/sslice\n              = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n        (match ((r(std/core/types/True))) {\n          ((std/text/parse/ParseOk((x1: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as rest1: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat: ((std/text/parse/parse-error :: V -> V)<2446>))\n             -> std/text/parse/ParseOk<a>(x1, rest1);\n          (err1: ((std/text/parse/parse-error :: V -> V)<2446>))\n             -> val _ : ()\n                      = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, save);\n            (match ((r(std/core/types/False))) {\n              ((std/text/parse/ParseOk((x2: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@4: string) : string, (@pat@5: int) : int, (@pat@6: int) : int) : sslice/sslice ) as rest2: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat@3: ((std/text/parse/parse-error :: V -> V)<2446>))\n                 -> std/text/parse/ParseOk<a>(x2, rest2);\n              (@pat@7: ((std/text/parse/parse-error :: V -> V)<2446>))\n                 -> err1;\n            });\n        });\n      }), k));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(m@0: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(2440 :: H)>|(2447 :: E)>,(std/text/parse/parse-error :: V -> V)<2446>>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>){\n  std/core/hnd/yield-to<bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(m@0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(k: ((hnd/resume-result :: (V, V) -> V)<bool,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n      (std/core/hnd/protect<(),bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(std/core/types/Unit, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x730_55: (), r: (bool) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n          val save : sslice/sslice\n                = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n          (match ((r(std/core/types/True))) {\n            ((std/text/parse/ParseOk((x1: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as rest1: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat: ((std/text/parse/parse-error :: V -> V)<2446>))\n               -> std/text/parse/ParseOk<a>(x1, rest1);\n            (err1: ((std/text/parse/parse-error :: V -> V)<2446>))\n               -> val _ : ()\n                        = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, save);\n              (match ((r(std/core/types/False))) {\n                ((std/text/parse/ParseOk((x2: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@4: string) : string, (@pat@5: int) : int, (@pat@6: int) : int) : sslice/sslice ) as rest2: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat@3: ((std/text/parse/parse-error :: V -> V)<2446>))\n                   -> std/text/parse/ParseOk<a>(x2, rest2);\n                (@pat@7: ((std/text/parse/parse-error :: V -> V)<2446>))\n                   -> err1;\n              });\n          });\n        }), k));\n    }));\n}"}]},"annotation": "genExpr: std/core/hnd/Clause0<bool,(std/text/parse/parse :: (E, V) -> V),<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(m@0: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(2440 :: H)>|(2447 :: E)>,(std/text/parse/parse-error :: V -> V)<2446>>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>){\n  (std/core/hnd/yield-to<bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(m@0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(k: ((hnd/resume-result :: (V, V) -> V)<bool,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n      (std/core/hnd/protect<(),bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(std/core/types/Unit, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x730_55: (), r: (bool) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n          val save : sslice/sslice\n                = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n          (match ((r(std/core/types/True))) {\n            ((std/text/parse/ParseOk((x1: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as rest1: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat: ((std/text/parse/parse-error :: V -> V)<2446>))\n               -> std/text/parse/ParseOk<a>(x1, rest1);\n            (err1: ((std/text/parse/parse-error :: V -> V)<2446>))\n               -> val _ : ()\n                        = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, save);\n              (match ((r(std/core/types/False))) {\n                ((std/text/parse/ParseOk((x2: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@4: string) : string, (@pat@5: int) : int, (@pat@6: int) : int) : sslice/sslice ) as rest2: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat@3: ((std/text/parse/parse-error :: V -> V)<2446>))\n                   -> std/text/parse/ParseOk<a>(x2, rest2);\n                (@pat@7: ((std/text/parse/parse-error :: V -> V)<2446>))\n                   -> err1;\n              });\n          });\n        }), k));\n    })));\n}))"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/clause-tail1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "pred","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "inp","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "getRef(Ref[Ptr]): Ptr","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "input","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}},"annotation": "genExpr: input"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"inp\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}"},"export_as": ["inp"]}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x317","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "pred","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: pred"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "inp","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: inp"}]},"annotation": "genExpr: pred(inp)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x317","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"318","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"318","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/types/Tuple2((x@0: 2404), ((@skip std/core/sslice/Sslice((@pat@10: string), (@pat@11: int), (@pat@12: int)) : sslice/sslice ) as cap: sslice/sslice)) : (a, sslice/sslice) ) as @pat@9: (2404, sslice/sslice)) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"318\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"319","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"320","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"320","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@10: string), (@pat@11: int), (@pat@12: int)) : sslice/sslice ) as cap: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"320\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"321","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"322","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"323","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "_@0","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "setRef(Ref[Ptr], Ptr): Unit","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "input","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}},"annotation": "genExpr: input"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"320","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@10: string), (@pat@11: int), (@pat@12: int)) : sslice/sslice ) as cap: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"320\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: cap"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, cap)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_@0\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_@0"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"319","type": {"op": "Top"}},"annotation": "genTest: normal: (x@0: 2404) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"319\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x@0"}]},"annotation": "genExpr: std/core/types/Just<a>(x@0)"}},"annotation": "genExpr: val _@0 : ()\n      = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, cap);\nstd/core/types/Just<a>(x@0)"}}]},"annotation": "genBranch: [(@pat@8,{\"op\": \"Var\",\"id\": \"@x317\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@9,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"318\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/types/Tuple2((x@0: 2404), ((@skip std/core/sslice/Sslice((@pat@10: string), (@pat@11: int), (@pat@12: int)) : sslice/sslice ) as cap: sslice/sslice)) : (a, sslice/sslice) ) as @pat@9: (2404, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"318\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"319\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: 2404) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"319\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(cap,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"320\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@10: string), (@pat@11: int), (@pat@12: int)) : sslice/sslice ) as cap: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"320\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@10,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"321\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@10: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"321\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@11,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"322\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@11: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"322\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@12,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"323\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@12: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"323\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"320\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@10: string), (@pat@11: int), (@pat@12: int)) : sslice/sslice ) as cap: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"320\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"321\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"322\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"323\",\"type\": {\"op\": \"Int\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"318\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/types/Tuple2((x@0: 2404), ((@skip std/core/sslice/Sslice((@pat@10: string), (@pat@11: int), (@pat@12: int)) : sslice/sslice ) as cap: sslice/sslice)) : (a, sslice/sslice) ) as @pat@9: (2404, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"318\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"319\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"320\",\"type\": {\"op\": \"Top\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x317\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"318\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x317","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<a>"}}]},"annotation": "genBranch: [(@pat@13,{\"op\": \"Var\",\"id\": \"@x317\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x317\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(pred: (sslice/sslice) -> (maybe :: V -> V)<(2404, sslice/sslice)>){\n  val inp : sslice/sslice\n        = std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input);\n  match ((pred(inp))) {\n    ((std/core/types/Just(((@skip std/core/types/Tuple2((x@0: 2404) : a, ((@skip std/core/sslice/Sslice((@pat@10: string) : string, (@pat@11: int) : int, (@pat@12: int) : int) : sslice/sslice ) as cap: sslice/sslice) : sslice/sslice) : (a, sslice/sslice) ) as @pat@9: (2404, sslice/sslice)) : (a, sslice/sslice)) : (maybe :: V -> V)<(a, sslice/sslice)> ) as @pat@8: ((maybe :: V -> V)<(2404, sslice/sslice)>))\n       -> val _@0 : ()\n                = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, cap);\n      std/core/types/Just<a>(x@0);\n    ((@skip std/core/types/Nothing() : (maybe :: V -> V)<(a, sslice/sslice)> ) as @pat@13: ((maybe :: V -> V)<(2404, sslice/sslice)>))\n       -> std/core/types/Nothing<a>;\n  };\n}"}]},"annotation": "genExpr: std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(pred: (sslice/sslice) -> (maybe :: V -> V)<(2404, sslice/sslice)>){\n  val inp : sslice/sslice\n        = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n  (match ((pred(inp))) {\n    ((std/core/types/Just(((@skip std/core/types/Tuple2((x@0: 2404) : a, ((@skip std/core/sslice/Sslice((@pat@10: string) : string, (@pat@11: int) : int, (@pat@12: int) : int) : sslice/sslice ) as cap: sslice/sslice) : sslice/sslice) : (a, sslice/sslice) ) as @pat@9: (2404, sslice/sslice)) : (a, sslice/sslice)) : (maybe :: V -> V)<(a, sslice/sslice)> ) as @pat@8: ((maybe :: V -> V)<(2404, sslice/sslice)>))\n       -> val _@0 : ()\n                = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, cap);\n      std/core/types/Just<a>(x@0);\n    ((@skip std/core/types/Nothing() : (maybe :: V -> V)<(a, sslice/sslice)> ) as @pat@13: ((maybe :: V -> V)<(2404, sslice/sslice)>))\n       -> std/core/types/Nothing<a>;\n  });\n}))"},"annotation": "genExpr: forall<a> std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(pred: (sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>){\n  val inp : sslice/sslice\n        = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n  (match ((pred(inp))) {\n    ((std/core/types/Just(((@skip std/core/types/Tuple2((x@0: a) : a, ((@skip std/core/sslice/Sslice((@pat@10: string) : string, (@pat@11: int) : int, (@pat@12: int) : int) : sslice/sslice ) as cap: sslice/sslice) : sslice/sslice) : (a, sslice/sslice) ) as @pat@9: (a, sslice/sslice)) : (a, sslice/sslice)) : (maybe :: V -> V)<(a, sslice/sslice)> ) as @pat@8: ((maybe :: V -> V)<(a, sslice/sslice)>))\n       -> val _@0 : ()\n                = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, cap);\n      std/core/types/Just<a>(x@0);\n    ((@skip std/core/types/Nothing() : (maybe :: V -> V)<(a, sslice/sslice)> ) as @pat@13: ((maybe :: V -> V)<(a, sslice/sslice)>))\n       -> std/core/types/Nothing<a>;\n  });\n}))"}]},"annotation": "genExpr: std/text/parse/@Hnd-parse<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(3, (std/core/hnd/clause-tail0<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),sslice/sslice>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n    (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n  }))), (forall<a> std/core/hnd/Clause1<string,a,(std/text/parse/parse :: (E, V) -> V),<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(m: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(2440 :: H)>|(2447 :: E)>,(std/text/parse/parse-error :: V -> V)<2446>>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, x: string){\n    (std/core/hnd/yield-to-final<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>>(m, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n        (std/text/parse/ParseError<b>(x, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input))));\n      })));\n  }))), (std/core/hnd/Clause0<bool,(std/text/parse/parse :: (E, V) -> V),<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(m@0: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(2440 :: H)>|(2447 :: E)>,(std/text/parse/parse-error :: V -> V)<2446>>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>){\n    (std/core/hnd/yield-to<bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(m@0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(k: ((hnd/resume-result :: (V, V) -> V)<bool,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n        (std/core/hnd/protect<(),bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(std/core/types/Unit, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x730_55: (), r: (bool) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n            val save : sslice/sslice\n                  = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n            (match ((r(std/core/types/True))) {\n              ((std/text/parse/ParseOk((x1: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as rest1: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat: ((std/text/parse/parse-error :: V -> V)<2446>))\n                 -> std/text/parse/ParseOk<a>(x1, rest1);\n              (err1: ((std/text/parse/parse-error :: V -> V)<2446>))\n                 -> val _ : ()\n                          = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, save);\n                (match ((r(std/core/types/False))) {\n                  ((std/text/parse/ParseOk((x2: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@4: string) : string, (@pat@5: int) : int, (@pat@6: int) : int) : sslice/sslice ) as rest2: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat@3: ((std/text/parse/parse-error :: V -> V)<2446>))\n                     -> std/text/parse/ParseOk<a>(x2, rest2);\n                  (@pat@7: ((std/text/parse/parse-error :: V -> V)<2446>))\n                     -> err1;\n                });\n            });\n          }), k));\n      })));\n  }))), (forall<a> std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(pred: (sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>){\n    val inp : sslice/sslice\n          = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n    (match ((pred(inp))) {\n      ((std/core/types/Just(((@skip std/core/types/Tuple2((x@0: a) : a, ((@skip std/core/sslice/Sslice((@pat@10: string) : string, (@pat@11: int) : int, (@pat@12: int) : int) : sslice/sslice ) as cap: sslice/sslice) : sslice/sslice) : (a, sslice/sslice) ) as @pat@9: (a, sslice/sslice)) : (a, sslice/sslice)) : (maybe :: V -> V)<(a, sslice/sslice)> ) as @pat@8: ((maybe :: V -> V)<(a, sslice/sslice)>))\n         -> val _@0 : ()\n                  = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, cap);\n        std/core/types/Just<a>(x@0);\n      ((@skip std/core/types/Nothing() : (maybe :: V -> V)<(a, sslice/sslice)> ) as @pat@13: ((maybe :: V -> V)<(a, sslice/sslice)>))\n         -> std/core/types/Nothing<a>;\n    });\n  }))))"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x@0@0","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/ParseOk","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/ParseOk<a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x@0@0","type": {"op": "Top"}},"annotation": "genExpr: x@0@0"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "getRef(Ref[Ptr]): Ptr","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "input","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}},"annotation": "genExpr: input"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input)"}]},"annotation": "genExpr: std/text/parse/ParseOk<a>(x@0@0, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input)))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(x@0@0: 2446){\n  std/text/parse/ParseOk<a>(x@0@0, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input)));\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "p","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: p"}]},"annotation": "genExpr: std/text/parse/@handle-parse<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>((std/text/parse/@Hnd-parse<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(3, (std/core/hnd/clause-tail0<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),sslice/sslice>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n      (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n    }))), (forall<a> std/core/hnd/Clause1<string,a,(std/text/parse/parse :: (E, V) -> V),<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(m: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(2440 :: H)>|(2447 :: E)>,(std/text/parse/parse-error :: V -> V)<2446>>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, x: string){\n      (std/core/hnd/yield-to-final<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>>(m, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n          (std/text/parse/ParseError<b>(x, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input))));\n        })));\n    }))), (std/core/hnd/Clause0<bool,(std/text/parse/parse :: (E, V) -> V),<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(m@0: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(2440 :: H)>|(2447 :: E)>,(std/text/parse/parse-error :: V -> V)<2446>>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>){\n      (std/core/hnd/yield-to<bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(m@0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(k: ((hnd/resume-result :: (V, V) -> V)<bool,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n          (std/core/hnd/protect<(),bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(std/core/types/Unit, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x730_55: (), r: (bool) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n              val save : sslice/sslice\n                    = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n              (match ((r(std/core/types/True))) {\n                ((std/text/parse/ParseOk((x1: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as rest1: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat: ((std/text/parse/parse-error :: V -> V)<2446>))\n                   -> std/text/parse/ParseOk<a>(x1, rest1);\n                (err1: ((std/text/parse/parse-error :: V -> V)<2446>))\n                   -> val _ : ()\n                            = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, save);\n                  (match ((r(std/core/types/False))) {\n                    ((std/text/parse/ParseOk((x2: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@4: string) : string, (@pat@5: int) : int, (@pat@6: int) : int) : sslice/sslice ) as rest2: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat@3: ((std/text/parse/parse-error :: V -> V)<2446>))\n                       -> std/text/parse/ParseOk<a>(x2, rest2);\n                    (@pat@7: ((std/text/parse/parse-error :: V -> V)<2446>))\n                       -> err1;\n                  });\n              });\n            }), k));\n        })));\n    }))), (forall<a> std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(pred: (sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>){\n      val inp : sslice/sslice\n            = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n      (match ((pred(inp))) {\n        ((std/core/types/Just(((@skip std/core/types/Tuple2((x@0: a) : a, ((@skip std/core/sslice/Sslice((@pat@10: string) : string, (@pat@11: int) : int, (@pat@12: int) : int) : sslice/sslice ) as cap: sslice/sslice) : sslice/sslice) : (a, sslice/sslice) ) as @pat@9: (a, sslice/sslice)) : (a, sslice/sslice)) : (maybe :: V -> V)<(a, sslice/sslice)> ) as @pat@8: ((maybe :: V -> V)<(a, sslice/sslice)>))\n           -> val _@0 : ()\n                    = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, cap);\n          std/core/types/Just<a>(x@0);\n        ((@skip std/core/types/Nothing() : (maybe :: V -> V)<(a, sslice/sslice)> ) as @pat@13: ((maybe :: V -> V)<(a, sslice/sslice)>))\n           -> std/core/types/Nothing<a>;\n      });\n    }))))), (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(x@0@0: 2446){\n    (std/text/parse/ParseOk<a>(x@0@0, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input))));\n  }), p)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(input: (local-var :: (H, V) -> V)<(2440 :: H),sslice/sslice>){\n  std/text/parse/@handle-parse<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>((std/text/parse/@Hnd-parse<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(3, (std/core/hnd/clause-tail0<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),sslice/sslice>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n        (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n      }))), (forall<a> std/core/hnd/Clause1<string,a,(std/text/parse/parse :: (E, V) -> V),<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(m: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(2440 :: H)>|(2447 :: E)>,(std/text/parse/parse-error :: V -> V)<2446>>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, x: string){\n        (std/core/hnd/yield-to-final<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>>(m, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n            (std/text/parse/ParseError<b>(x, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input))));\n          })));\n      }))), (std/core/hnd/Clause0<bool,(std/text/parse/parse :: (E, V) -> V),<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(m@0: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(2440 :: H)>|(2447 :: E)>,(std/text/parse/parse-error :: V -> V)<2446>>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>){\n        (std/core/hnd/yield-to<bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(m@0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(k: ((hnd/resume-result :: (V, V) -> V)<bool,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n            (std/core/hnd/protect<(),bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(std/core/types/Unit, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x730_55: (), r: (bool) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n                val save : sslice/sslice\n                      = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n                (match ((r(std/core/types/True))) {\n                  ((std/text/parse/ParseOk((x1: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as rest1: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat: ((std/text/parse/parse-error :: V -> V)<2446>))\n                     -> std/text/parse/ParseOk<a>(x1, rest1);\n                  (err1: ((std/text/parse/parse-error :: V -> V)<2446>))\n                     -> val _ : ()\n                              = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, save);\n                    (match ((r(std/core/types/False))) {\n                      ((std/text/parse/ParseOk((x2: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@4: string) : string, (@pat@5: int) : int, (@pat@6: int) : int) : sslice/sslice ) as rest2: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat@3: ((std/text/parse/parse-error :: V -> V)<2446>))\n                         -> std/text/parse/ParseOk<a>(x2, rest2);\n                      (@pat@7: ((std/text/parse/parse-error :: V -> V)<2446>))\n                         -> err1;\n                    });\n                });\n              }), k));\n          })));\n      }))), (forall<a> std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(pred: (sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>){\n        val inp : sslice/sslice\n              = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n        (match ((pred(inp))) {\n          ((std/core/types/Just(((@skip std/core/types/Tuple2((x@0: a) : a, ((@skip std/core/sslice/Sslice((@pat@10: string) : string, (@pat@11: int) : int, (@pat@12: int) : int) : sslice/sslice ) as cap: sslice/sslice) : sslice/sslice) : (a, sslice/sslice) ) as @pat@9: (a, sslice/sslice)) : (a, sslice/sslice)) : (maybe :: V -> V)<(a, sslice/sslice)> ) as @pat@8: ((maybe :: V -> V)<(a, sslice/sslice)>))\n             -> val _@0 : ()\n                      = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, cap);\n            std/core/types/Just<a>(x@0);\n          ((@skip std/core/types/Nothing() : (maybe :: V -> V)<(a, sslice/sslice)> ) as @pat@13: ((maybe :: V -> V)<(a, sslice/sslice)>))\n             -> std/core/types/Nothing<a>;\n        });\n      }))))), (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(x@0@0: 2446){\n      (std/text/parse/ParseOk<a>(x@0@0, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input))));\n    }), p);\n}"}]},"annotation": "genExpr: std/core/hnd/local-var<sslice/sslice,(std/text/parse/parse-error :: V -> V)<a>,(e :: E),(h :: H)>(input0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(input: (local-var :: (H, V) -> V)<(2440 :: H),sslice/sslice>){\n    (std/text/parse/@handle-parse<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>((std/text/parse/@Hnd-parse<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(3, (std/core/hnd/clause-tail0<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),sslice/sslice>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n          (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n        }))), (forall<a> std/core/hnd/Clause1<string,a,(std/text/parse/parse :: (E, V) -> V),<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(m: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(2440 :: H)>|(2447 :: E)>,(std/text/parse/parse-error :: V -> V)<2446>>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, x: string){\n          (std/core/hnd/yield-to-final<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>>(m, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n              (std/text/parse/ParseError<b>(x, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input))));\n            })));\n        }))), (std/core/hnd/Clause0<bool,(std/text/parse/parse :: (E, V) -> V),<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(m@0: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(2440 :: H)>|(2447 :: E)>,(std/text/parse/parse-error :: V -> V)<2446>>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>){\n          (std/core/hnd/yield-to<bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(m@0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(k: ((hnd/resume-result :: (V, V) -> V)<bool,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n              (std/core/hnd/protect<(),bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(std/core/types/Unit, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x730_55: (), r: (bool) -> <(local :: H -> X)<(2440 :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n                  val save : sslice/sslice\n                        = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n                  (match ((r(std/core/types/True))) {\n                    ((std/text/parse/ParseOk((x1: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as rest1: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat: ((std/text/parse/parse-error :: V -> V)<2446>))\n                       -> std/text/parse/ParseOk<a>(x1, rest1);\n                    (err1: ((std/text/parse/parse-error :: V -> V)<2446>))\n                       -> val _ : ()\n                                = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, save);\n                      (match ((r(std/core/types/False))) {\n                        ((std/text/parse/ParseOk((x2: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@4: string) : string, (@pat@5: int) : int, (@pat@6: int) : int) : sslice/sslice ) as rest2: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat@3: ((std/text/parse/parse-error :: V -> V)<2446>))\n                           -> std/text/parse/ParseOk<a>(x2, rest2);\n                        (@pat@7: ((std/text/parse/parse-error :: V -> V)<2446>))\n                           -> err1;\n                      });\n                  });\n                }), k));\n            })));\n        }))), (forall<a> std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(pred: (sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>){\n          val inp : sslice/sslice\n                = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n          (match ((pred(inp))) {\n            ((std/core/types/Just(((@skip std/core/types/Tuple2((x@0: a) : a, ((@skip std/core/sslice/Sslice((@pat@10: string) : string, (@pat@11: int) : int, (@pat@12: int) : int) : sslice/sslice ) as cap: sslice/sslice) : sslice/sslice) : (a, sslice/sslice) ) as @pat@9: (a, sslice/sslice)) : (a, sslice/sslice)) : (maybe :: V -> V)<(a, sslice/sslice)> ) as @pat@8: ((maybe :: V -> V)<(a, sslice/sslice)>))\n               -> val _@0 : ()\n                        = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, cap);\n              std/core/types/Just<a>(x@0);\n            ((@skip std/core/types/Nothing() : (maybe :: V -> V)<(a, sslice/sslice)> ) as @pat@13: ((maybe :: V -> V)<(a, sslice/sslice)>))\n               -> std/core/types/Nothing<a>;\n          });\n        }))))), (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(x@0@0: 2446){\n        (std/text/parse/ParseOk<a>(x@0@0, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input))));\n      }), p));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(h :: H)> fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n  std/core/hnd/local-var<sslice/sslice,(std/text/parse/parse-error :: V -> V)<a>,(e :: E),(h :: H)>(input0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(input: (local-var :: (H, V) -> V)<(h :: H),sslice/sslice>){\n      (std/text/parse/@handle-parse<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>((std/text/parse/@Hnd-parse<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(3, (std/core/hnd/clause-tail0<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),sslice/sslice>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n            (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n          }))), (forall<a> std/core/hnd/Clause1<string,a,(std/text/parse/parse :: (E, V) -> V),<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(m: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(h :: H)>|(2447 :: E)>,(std/text/parse/parse-error :: V -> V)<2446>>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, x: string){\n            (std/core/hnd/yield-to-final<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>>(m, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(h :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n                (std/text/parse/ParseError<b>(x, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input))));\n              })));\n          }))), (std/core/hnd/Clause0<bool,(std/text/parse/parse :: (E, V) -> V),<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(m@0: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(h :: H)>|(2447 :: E)>,(std/text/parse/parse-error :: V -> V)<2446>>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>){\n            (std/core/hnd/yield-to<bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(m@0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(k: ((hnd/resume-result :: (V, V) -> V)<bool,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(h :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n                (std/core/hnd/protect<(),bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(std/core/types/Unit, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x730_55: (), r: (bool) -> <(local :: H -> X)<(h :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n                    val save : sslice/sslice\n                          = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n                    (match ((r(std/core/types/True))) {\n                      ((std/text/parse/ParseOk((x1: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as rest1: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat: ((std/text/parse/parse-error :: V -> V)<2446>))\n                         -> std/text/parse/ParseOk<a>(x1, rest1);\n                      (err1: ((std/text/parse/parse-error :: V -> V)<2446>))\n                         -> val _ : ()\n                                  = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, save);\n                        (match ((r(std/core/types/False))) {\n                          ((std/text/parse/ParseOk((x2: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@4: string) : string, (@pat@5: int) : int, (@pat@6: int) : int) : sslice/sslice ) as rest2: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat@3: ((std/text/parse/parse-error :: V -> V)<2446>))\n                             -> std/text/parse/ParseOk<a>(x2, rest2);\n                          (@pat@7: ((std/text/parse/parse-error :: V -> V)<2446>))\n                             -> err1;\n                        });\n                    });\n                  }), k));\n              })));\n          }))), (forall<a> std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(pred: (sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>){\n            val inp : sslice/sslice\n                  = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n            (match ((pred(inp))) {\n              ((std/core/types/Just(((@skip std/core/types/Tuple2((x@0: a) : a, ((@skip std/core/sslice/Sslice((@pat@10: string) : string, (@pat@11: int) : int, (@pat@12: int) : int) : sslice/sslice ) as cap: sslice/sslice) : sslice/sslice) : (a, sslice/sslice) ) as @pat@9: (a, sslice/sslice)) : (a, sslice/sslice)) : (maybe :: V -> V)<(a, sslice/sslice)> ) as @pat@8: ((maybe :: V -> V)<(a, sslice/sslice)>))\n                 -> val _@0 : ()\n                          = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, cap);\n                std/core/types/Just<a>(x@0);\n              ((@skip std/core/types/Nothing() : (maybe :: V -> V)<(a, sslice/sslice)> ) as @pat@13: ((maybe :: V -> V)<(a, sslice/sslice)>))\n                 -> std/core/types/Nothing<a>;\n            });\n          }))))), (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(x@0@0: 2446){\n          (std/text/parse/ParseOk<a>(x@0@0, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input))));\n        }), p));\n    }));\n}"},"args": []},"annotation": "genExpr: (forall<(h :: H)> fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n  std/core/hnd/local-var<sslice/sslice,(std/text/parse/parse-error :: V -> V)<a>,(e :: E),(h :: H)>(input0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(input: (local-var :: (H, V) -> V)<(h :: H),sslice/sslice>){\n      (std/text/parse/@handle-parse<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>((std/text/parse/@Hnd-parse<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(3, (std/core/hnd/clause-tail0<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),sslice/sslice>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n            (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n          }))), (forall<a> std/core/hnd/Clause1<string,a,(std/text/parse/parse :: (E, V) -> V),<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(m: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(h :: H)>|(2447 :: E)>,(std/text/parse/parse-error :: V -> V)<2446>>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, x: string){\n            (std/core/hnd/yield-to-final<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>>(m, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(h :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n                (std/text/parse/ParseError<b>(x, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input))));\n              })));\n          }))), (std/core/hnd/Clause0<bool,(std/text/parse/parse :: (E, V) -> V),<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(m@0: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(h :: H)>|(2447 :: E)>,(std/text/parse/parse-error :: V -> V)<2446>>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>){\n            (std/core/hnd/yield-to<bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(m@0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(k: ((hnd/resume-result :: (V, V) -> V)<bool,(std/text/parse/parse-error :: V -> V)<2446>>) -> <(local :: H -> X)<(h :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n                (std/core/hnd/protect<(),bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(std/core/types/Unit, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x730_55: (), r: (bool) -> <(local :: H -> X)<(h :: H)>|(2447 :: E)> (std/text/parse/parse-error :: V -> V)<2446>){\n                    val save : sslice/sslice\n                          = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n                    (match ((r(std/core/types/True))) {\n                      ((std/text/parse/ParseOk((x1: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as rest1: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat: ((std/text/parse/parse-error :: V -> V)<2446>))\n                         -> std/text/parse/ParseOk<a>(x1, rest1);\n                      (err1: ((std/text/parse/parse-error :: V -> V)<2446>))\n                         -> val _ : ()\n                                  = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, save);\n                        (match ((r(std/core/types/False))) {\n                          ((std/text/parse/ParseOk((x2: 2446) : a, ((@skip std/core/sslice/Sslice((@pat@4: string) : string, (@pat@5: int) : int, (@pat@6: int) : int) : sslice/sslice ) as rest2: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat@3: ((std/text/parse/parse-error :: V -> V)<2446>))\n                             -> std/text/parse/ParseOk<a>(x2, rest2);\n                          (@pat@7: ((std/text/parse/parse-error :: V -> V)<2446>))\n                             -> err1;\n                        });\n                    });\n                  }), k));\n              })));\n          }))), (forall<a> std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<b>,(std/text/parse/parse :: (E, V) -> V),(sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>,(maybe :: V -> V)<a>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(pred: (sslice/sslice) -> (maybe :: V -> V)<(a, sslice/sslice)>){\n            val inp : sslice/sslice\n                  = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n            (match ((pred(inp))) {\n              ((std/core/types/Just(((@skip std/core/types/Tuple2((x@0: a) : a, ((@skip std/core/sslice/Sslice((@pat@10: string) : string, (@pat@11: int) : int, (@pat@12: int) : int) : sslice/sslice ) as cap: sslice/sslice) : sslice/sslice) : (a, sslice/sslice) ) as @pat@9: (a, sslice/sslice)) : (a, sslice/sslice)) : (maybe :: V -> V)<(a, sslice/sslice)> ) as @pat@8: ((maybe :: V -> V)<(a, sslice/sslice)>))\n                 -> val _@0 : ()\n                          = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, cap);\n                std/core/types/Just<a>(x@0);\n              ((@skip std/core/types/Nothing() : (maybe :: V -> V)<(a, sslice/sslice)> ) as @pat@13: ((maybe :: V -> V)<(a, sslice/sslice)>))\n                 -> std/core/types/Nothing<a>;\n            });\n          }))))), (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(x@0@0: 2446){\n          (std/text/parse/ParseOk<a>(x@0@0, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input))));\n        }), p));\n    }));\n})()"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(input0: sslice/sslice, p: () -> <(std/text/parse/parse :: (E, V) -> V)|(e :: E)> a){\n  (forall<(h :: H)> fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n    std/core/hnd/local-var<sslice/sslice,(std/text/parse/parse-error :: V -> V)<a>,(e :: E),(h :: H)>(input0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(input: (local-var :: (H, V) -> V)<(h :: H),sslice/sslice>){\n        (std/text/parse/@handle-parse<a,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>((std/text/parse/@Hnd-parse<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(3, (std/core/hnd/clause-tail0<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),sslice/sslice>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(){\n              (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n            }))), (forall<b> std/core/hnd/Clause1<string,b,(std/text/parse/parse :: (E, V) -> V),<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(m: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>, x: string){\n              (std/core/hnd/yield-to-final<b,<(local :: H -> X)<(h :: H)>|(e :: E)>,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(m, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<b,(std/text/parse/parse-error :: V -> V)<a>>) -> <(local :: H -> X)<(h :: H)>|(e :: E)> (std/text/parse/parse-error :: V -> V)<a>){\n                  (std/text/parse/ParseError<a>(x, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input))));\n                })));\n            }))), (std/core/hnd/Clause0<bool,(std/text/parse/parse :: (E, V) -> V),<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(m@0: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(std/text/parse/parse :: (E, V) -> V)>){\n              (std/core/hnd/yield-to<bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(m@0, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(k: ((hnd/resume-result :: (V, V) -> V)<bool,(std/text/parse/parse-error :: V -> V)<a>>) -> <(local :: H -> X)<(h :: H)>|(e :: E)> (std/text/parse/parse-error :: V -> V)<a>){\n                  (std/core/hnd/protect<(),bool,<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>>(std/core/types/Unit, (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(@_wildcard-x730_55: (), r: (bool) -> <(local :: H -> X)<(h :: H)>|(e :: E)> (std/text/parse/parse-error :: V -> V)<a>){\n                      val save : sslice/sslice\n                            = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n                      (match ((r(std/core/types/True))) {\n                        ((std/text/parse/ParseOk((x1: a) : a, ((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as rest1: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat: ((std/text/parse/parse-error :: V -> V)<a>))\n                           -> std/text/parse/ParseOk<a>(x1, rest1);\n                        (err1: ((std/text/parse/parse-error :: V -> V)<a>))\n                           -> val _ : ()\n                                    = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, save);\n                          (match ((r(std/core/types/False))) {\n                            ((std/text/parse/ParseOk((x2: a) : a, ((@skip std/core/sslice/Sslice((@pat@4: string) : string, (@pat@5: int) : int, (@pat@6: int) : int) : sslice/sslice ) as rest2: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat@3: ((std/text/parse/parse-error :: V -> V)<a>))\n                               -> std/text/parse/ParseOk<a>(x2, rest2);\n                            (@pat@7: ((std/text/parse/parse-error :: V -> V)<a>))\n                               -> err1;\n                          });\n                      });\n                    }), k));\n                })));\n            }))), (forall<b> std/core/hnd/clause-tail1<<(local :: H -> X)<(h :: H)>|(e :: E)>,(std/text/parse/parse-error :: V -> V)<a>,(std/text/parse/parse :: (E, V) -> V),(sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>,(maybe :: V -> V)<b>>((fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(pred: (sslice/sslice) -> (maybe :: V -> V)<(b, sslice/sslice)>){\n              val inp : sslice/sslice\n                    = (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input));\n              (match ((pred(inp))) {\n                ((std/core/types/Just(((@skip std/core/types/Tuple2((x@0: b) : b, ((@skip std/core/sslice/Sslice((@pat@10: string) : string, (@pat@11: int) : int, (@pat@12: int) : int) : sslice/sslice ) as cap: sslice/sslice) : sslice/sslice) : (b, sslice/sslice) ) as @pat@9: (b, sslice/sslice)) : (b, sslice/sslice)) : (maybe :: V -> V)<(b, sslice/sslice)> ) as @pat@8: ((maybe :: V -> V)<(b, sslice/sslice)>))\n                   -> val _@0 : ()\n                            = std/core/types/local-set<sslice/sslice,(e :: E),(h :: H)>(input, cap);\n                  std/core/types/Just<b>(x@0);\n                ((@skip std/core/types/Nothing() : (maybe :: V -> V)<(b, sslice/sslice)> ) as @pat@13: ((maybe :: V -> V)<(b, sslice/sslice)>))\n                   -> std/core/types/Nothing<b>;\n              });\n            }))))), (fn<<(local :: H -> X)<(h :: H)>|(e :: E)>>(x@0@0: a){\n            (std/text/parse/ParseOk<a>(x@0@0, (std/core/types/local-get<sslice/sslice,(h :: H),(e :: E)>(input))));\n          }), p));\n      }));\n  })();\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/parse\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}, {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/parse"]}, {"name": {"op": "Var","id": "std/text/parse/parse-eof","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "input","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}, {"op": "Var","id": "p","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/parse","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/parse<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "input","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: input"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "x","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "p","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: p"},"args": []},"annotation": "genExpr: p()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["x"]}, {"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@open-at0","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@open-at0<(),(std/text/parse/parse :: (E, V) -> V),<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@evv-index","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@evv-index<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/@tag-parse","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}},"annotation": "genExpr: std/text/parse/@tag-parse"}]},"annotation": "genExpr: std/core/hnd/@evv-index<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V)>(std/text/parse/@tag-parse)"}, {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/eof","type": {"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/eof"}]},"annotation": "genExpr: std/core/hnd/@open-at0<(),(std/text/parse/parse :: (E, V) -> V),<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>((std/core/hnd/@evv-index<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>,(std/text/parse/parse :: (E, V) -> V)>(std/text/parse/@tag-parse)), std/text/parse/eof)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}],"body": {"op": "Var","id": "x","type": {"op": "Top"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>(){\n  val x : a;\n  val _ : ();\n  x;\n}"}]},"annotation": "genExpr: std/text/parse/parse<a,(e :: E)>(input, (fn<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>(){\n    val x : a;\n    val _ : ();\n    x;\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(input: sslice/sslice, p: () -> <(std/text/parse/parse :: (E, V) -> V)|(e :: E)> a){\n  std/text/parse/parse<a,(e :: E)>(input, (fn<<(std/text/parse/parse :: (E, V) -> V)|(e :: E)>>(){\n      val x : a;\n      val _ : ();\n      x;\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/parse-eof\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}, {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/parse-eof"]}, {"name": {"op": "Var","id": "std/text/parse/pnat","type": {"op": "Function","params": [],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x-x1@10080","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/int","type": {"op": "Ptr"}},"name": "std/core/int/parse-int","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/int/parse-int"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/string","type": {"op": "Ptr"}},"name": "std/core/string/listchar/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/string/listchar/string"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/satisfy-fail","type": {"op": "Function","params": [{"op": "String"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/satisfy-fail<(list :: V -> V)<char>>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "digit"},"annotation": "genExpr: \"digit\""}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x324","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/next-while0","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Bool"},"purity": "Effectful"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/next-while0"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/char","type": {"op": "Ptr"}},"name": "std/core/char/is-digit","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: std/core/char/is-digit"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<char>"}]},"annotation": "genExpr: std/text/parse/next-while0(slice, std/core/char/is-digit, (std/core/types/Nil<char>))"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x324","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"325","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"326","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"325","type": {"op": "Top"}},"annotation": "genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0@0: list<char>) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"325\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"326","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1@0: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"326\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"327","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"328","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"329","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x324\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"325\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"325\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"326\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"326\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"327\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"327\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"328\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"328\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"329\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@4: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"329\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"326\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"326\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"327\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"328\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"329\",\"type\": {\"op\": \"Int\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"325\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"325\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x324\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"325\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"326\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x324","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"330","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"331","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"331","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"331\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"332","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"333","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"334","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"330","type": {"op": "Top"}},"annotation": "genTest: normal: (xs: list<char>) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"330\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: xs"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"331","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"331\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: rest"}]},"annotation": "genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)"}]},"annotation": "genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x324\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"330\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"330\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"331\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"331\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"332\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"332\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"333\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"333\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"334\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"334\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"331\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"331\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"332\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"333\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"334\",\"type\": {\"op\": \"Int\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x324\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"330\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"331\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(slice: sslice/sslice){\n  match ((std/text/parse/next-while0(slice, std/core/char/is-digit, (std/core/types/Nil<char>)))) {\n    ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1@0: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@1: ((list :: V -> V)<char>, sslice/sslice))\n       -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n    ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n       -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n  };\n}"}]},"annotation": "genExpr: std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"digit\", (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, std/core/char/is-digit, (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1@0: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@1: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))"}]},"annotation": "genExpr: std/core/string/listchar/string((std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"digit\", (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, std/core/char/is-digit, (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1@0: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@1: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))))"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"annotation": "genExpr: std/core/types/@None<bool>"}]},"annotation": "genExpr: std/core/int/parse-int((std/core/string/listchar/string((std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"digit\", (fn(slice: sslice/sslice){\n      (match ((std/text/parse/next-while0(slice, std/core/char/is-digit, (std/core/types/Nil<char>)))) {\n        ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1@0: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@1: ((list :: V -> V)<char>, sslice/sslice))\n           -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n        ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n           -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n      });\n    }))))), (std/core/types/@None<bool>))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"@x-x1@10080\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}"},"export_as": ["@x-x1@10080"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@open-none2","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@open-none2<(maybe :: V -> V)<int>,int,int,(total :: E),(std/text/parse/parse :: (E, V) -> V)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}}, {"op": "Var","id": "nothing","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "nothing","type": {"op": "Int"}},"annotation": "genExpr: nothing"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"m\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"m\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"324","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"324","type": {"op": "Top"}},"annotation": "genTest: normal: (x: int) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"324\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"m\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"324\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"324\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"m\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"324\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(m: (maybe :: V -> V)<int>, nothing: int){\n  match (m) {\n    ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n       -> nothing;\n    ((@skip std/core/types/Just((x: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n       -> x;\n  };\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "@x-x1@10080","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: @x-x1@10080"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}]},"annotation": "genExpr: std/core/hnd/@open-none2<(maybe :: V -> V)<int>,int,int,(total :: E),(std/text/parse/parse :: (E, V) -> V)>((fn(m: (maybe :: V -> V)<int>, nothing: int){\n    (match (m) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n         -> nothing;\n      ((@skip std/core/types/Just((x: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n         -> x;\n    });\n  }), @x-x1@10080, 0)"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(std/text/parse/parse :: (E, V) -> V)>(){\n  val @x-x1@10080 : (maybe :: V -> V)<int>\n        = std/core/int/parse-int((std/core/string/listchar/string((std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"digit\", (fn(slice: sslice/sslice){\n              (match ((std/text/parse/next-while0(slice, std/core/char/is-digit, (std/core/types/Nil<char>)))) {\n                ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1@0: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@1: ((list :: V -> V)<char>, sslice/sslice))\n                   -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n                ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n                   -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n              });\n            }))))), (std/core/types/@None<bool>));\n  std/core/hnd/@open-none2<(maybe :: V -> V)<int>,int,int,(total :: E),(std/text/parse/parse :: (E, V) -> V)>((fn(m: (maybe :: V -> V)<int>, nothing: int){\n      (match (m) {\n        ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n           -> nothing;\n        ((@skip std/core/types/Just((x: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n           -> x;\n      });\n    }), @x-x1@10080, 0);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/pnat\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/pnat"]}, {"name": {"op": "Var","id": "std/text/parse/sign","type": {"op": "Function","params": [],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "c@0","type": {"op": "Ptr","extern_ptr_name": "\"char\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/(||)","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/(||)<char,(total :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/satisfy-fail","type": {"op": "Function","params": [{"op": "String"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/satisfy-fail<char>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "+-"},"annotation": "genExpr: \"+-\""}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x325","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/next","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/next"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice"}]},"annotation": "genExpr: std/core/sslice/next(slice)"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x325","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"326","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"326","type": {"op": "Top"}},"annotation": "genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"326\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"327","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"328","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/string/contains","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "+-"},"annotation": "genExpr: \"+-\""}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/string","type": {"op": "Ptr"}},"name": "std/core/string/char/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/string/char/string"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"327","type": {"op": "Top"}},"annotation": "genTest: normal: (c: char) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"327\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: c"}]},"annotation": "genExpr: std/core/string/char/string(c)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/string/contains(\"+-\", (std/core/string/char/string(c)))"},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<(char, sslice/sslice)>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<char,sslice/sslice>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"327","type": {"op": "Top"}},"annotation": "genTest: normal: (c: char) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"327\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: c"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"328","type": {"op": "Top"}},"annotation": "genTest: normal: (rest: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"328\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: rest"}]},"annotation": "genExpr: std/core/types/Tuple2<char,sslice/sslice>(c, rest)"}]},"annotation": "genExpr: std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)))"}}}],"default": {"op": "AlternativeFail"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x325\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"326\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"326\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"327\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"327\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"328\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"328\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"326\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"326\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"327\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"328\",\"type\": {\"op\": \"Top\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x325\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"326\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<(char, sslice/sslice)>"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x325\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(slice: sslice/sslice){\n  match ((std/core/sslice/next(slice))) {\n    ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n       | std/core/string/contains(\"+-\", (std/core/string/char/string(c))) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n    (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n       -> std/core/types/Nothing<(char, sslice/sslice)>;\n  };\n}"}]},"annotation": "genExpr: std/text/parse/satisfy-fail<char>(\"+-\", (fn(slice: sslice/sslice){\n    (match ((std/core/sslice/next(slice))) {\n      ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         | std/core/string/contains(\"+-\", (std/core/string/char/string(c))) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n      (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         -> std/core/types/Nothing<(char, sslice/sslice)>;\n    });\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(std/text/parse/parse :: (E, V) -> V)>(){\n  std/text/parse/satisfy-fail<char>(\"+-\", (fn(slice: sslice/sslice){\n      (match ((std/core/sslice/next(slice))) {\n        ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n           | std/core/string/contains(\"+-\", (std/core/string/char/string(c))) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n        (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n           -> std/core/types/Nothing<(char, sslice/sslice)>;\n      });\n    }));\n}"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "Literal","type": {"op": "String"},"value": "+"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(std/text/parse/parse :: (E, V) -> V)>(){\n  '+';\n}"}]},"annotation": "genExpr: std/text/parse/(||)<char,(total :: E)>((fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    (std/text/parse/satisfy-fail<char>(\"+-\", (fn(slice: sslice/sslice){\n        (match ((std/core/sslice/next(slice))) {\n          ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n             | std/core/string/contains(\"+-\", (std/core/string/char/string(c))) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n          (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n             -> std/core/types/Nothing<(char, sslice/sslice)>;\n        });\n      })));\n  }), (fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    '+';\n  }))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"c@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}"},"export_as": ["c@0"]}],"body": {"op": "Primitive","name": "(#1 == #2)","args": [{"op": "Var","id": "c@0","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "-"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(std/text/parse/parse :: (E, V) -> V)>(){\n  val c@0 : char\n        = std/text/parse/(||)<char,(total :: E)>((fn<(std/text/parse/parse :: (E, V) -> V)>(){\n            (std/text/parse/satisfy-fail<char>(\"+-\", (fn(slice: sslice/sslice){\n                (match ((std/core/sslice/next(slice))) {\n                  ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n                     | std/core/string/contains(\"+-\", (std/core/string/char/string(c))) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n                  (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n                     -> std/core/types/Nothing<(char, sslice/sslice)>;\n                });\n              })));\n          }), (fn<(std/text/parse/parse :: (E, V) -> V)>(){\n            '+';\n          }));\n  std/core/char/(==)(c@0, '-');\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/sign\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/sign"]}, {"name": {"op": "Var","id": "std/text/parse/pint","type": {"op": "Function","params": [],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "c@0","type": {"op": "Ptr","extern_ptr_name": "\"char\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/(||)","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/(||)<char,(total :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/satisfy-fail","type": {"op": "Function","params": [{"op": "String"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/satisfy-fail<char>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "+-"},"annotation": "genExpr: \"+-\""}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x325","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/next","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/next"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice"}]},"annotation": "genExpr: std/core/sslice/next(slice)"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x325","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"326","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"326","type": {"op": "Top"}},"annotation": "genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"326\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"327","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"328","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/string/contains","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "+-"},"annotation": "genExpr: \"+-\""}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/string","type": {"op": "Ptr"}},"name": "std/core/string/char/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/string/char/string"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"327","type": {"op": "Top"}},"annotation": "genTest: normal: (c: char) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"327\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: c"}]},"annotation": "genExpr: std/core/string/char/string(c)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/string/contains(\"+-\", (std/core/string/char/string(c)))"},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<(char, sslice/sslice)>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<char,sslice/sslice>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"327","type": {"op": "Top"}},"annotation": "genTest: normal: (c: char) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"327\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: c"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"328","type": {"op": "Top"}},"annotation": "genTest: normal: (rest: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"328\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: rest"}]},"annotation": "genExpr: std/core/types/Tuple2<char,sslice/sslice>(c, rest)"}]},"annotation": "genExpr: std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)))"}}}],"default": {"op": "AlternativeFail"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x325\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"326\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"326\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"327\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"327\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"328\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"328\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"326\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"326\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"327\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"328\",\"type\": {\"op\": \"Top\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x325\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"326\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<(char, sslice/sslice)>"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x325\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(slice: sslice/sslice){\n  match ((std/core/sslice/next(slice))) {\n    ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n       | std/core/string/contains(\"+-\", (std/core/string/char/string(c))) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n    (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n       -> std/core/types/Nothing<(char, sslice/sslice)>;\n  };\n}"}]},"annotation": "genExpr: std/text/parse/satisfy-fail<char>(\"+-\", (fn(slice: sslice/sslice){\n    (match ((std/core/sslice/next(slice))) {\n      ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         | std/core/string/contains(\"+-\", (std/core/string/char/string(c))) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n      (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         -> std/core/types/Nothing<(char, sslice/sslice)>;\n    });\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(std/text/parse/parse :: (E, V) -> V)>(){\n  std/text/parse/satisfy-fail<char>(\"+-\", (fn(slice: sslice/sslice){\n      (match ((std/core/sslice/next(slice))) {\n        ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n           | std/core/string/contains(\"+-\", (std/core/string/char/string(c))) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n        (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n           -> std/core/types/Nothing<(char, sslice/sslice)>;\n      });\n    }));\n}"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "Literal","type": {"op": "String"},"value": "+"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(std/text/parse/parse :: (E, V) -> V)>(){\n  '+';\n}"}]},"annotation": "genExpr: std/text/parse/(||)<char,(total :: E)>((fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    (std/text/parse/satisfy-fail<char>(\"+-\", (fn(slice: sslice/sslice){\n        (match ((std/core/sslice/next(slice))) {\n          ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n             | std/core/string/contains(\"+-\", (std/core/string/char/string(c))) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n          (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n             -> std/core/types/Nothing<(char, sslice/sslice)>;\n        });\n      })));\n  }), (fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    '+';\n  }))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"c@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}"},"export_as": ["c@0"]}, {"name": {"op": "Var","id": "neg","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "(#1 == #2)","args": [{"op": "Var","id": "c@0","type": {"op": "Ptr","extern_ptr_name": "\"char\""}}, {"op": "Literal","type": {"op": "String"},"value": "-"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/char/(==)(c@0, '-')"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"neg\",\"type\": {\"op\": \"Bool\"}}"},"export_as": ["neg"]}, {"name": {"op": "Var","id": "i","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/pnat","type": {"op": "Function","params": [],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/pnat"},"args": []},"annotation": "genExpr: std/text/parse/pnat()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["i"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "neg","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "neg(Int): Int","args": [{"op": "Var","id": "i","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/(~)(i)"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"neg\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "neg","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}}]},"annotation": "genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"neg\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(std/text/parse/parse :: (E, V) -> V)>(){\n  val c@0 : char;\n  val neg : bool;\n  val i : int;\n  match (neg) {\n    ((std/core/types/True() : bool ) as @pat@2: bool)\n       -> std/core/int/(~)(i);\n    ((@skip std/core/types/False() : bool ) as @pat@0@0: bool)\n       -> i;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/pint\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/pint"]}, {"name": {"op": "Var","id": "std/text/parse/pstring","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/satisfy-fail","type": {"op": "Function","params": [{"op": "String"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/satisfy-fail<string>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x325","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/next-match","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/next-match"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/string","type": {"op": "Ptr"}},"name": "std/core/string/list","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/string/list"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}]},"annotation": "genExpr: std/core/string/list(s)"}]},"annotation": "genExpr: std/text/parse/next-match(slice, (std/core/string/list(s)))"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x325","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"326","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"326","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"326\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"327","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"328","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"329","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<(string, sslice/sslice)>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<string,sslice/sslice>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"326","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"326\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: rest"}]},"annotation": "genExpr: std/core/types/Tuple2<string,sslice/sslice>(s, rest)"}]},"annotation": "genExpr: std/core/types/Just<(string, sslice/sslice)>((std/core/types/Tuple2<string,sslice/sslice>(s, rest)))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x325\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"326\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"326\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"327\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"327\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"328\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"328\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"329\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"329\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"326\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"326\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"327\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"328\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"329\",\"type\": {\"op\": \"Int\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x325\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"326\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x325","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<(string, sslice/sslice)>"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x325\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x325\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(slice: sslice/sslice){\n  match ((std/text/parse/next-match(slice, (std/core/string/list(s))))) {\n    ((std/core/types/Just(((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : (maybe :: V -> V)<sslice/sslice> ) as @pat: ((maybe :: V -> V)<sslice/sslice>))\n       -> std/core/types/Just<(string, sslice/sslice)>((std/core/types/Tuple2<string,sslice/sslice>(s, rest)));\n    ((@skip std/core/types/Nothing() : (maybe :: V -> V)<sslice/sslice> ) as @pat@3: ((maybe :: V -> V)<sslice/sslice>))\n       -> std/core/types/Nothing<(string, sslice/sslice)>;\n  };\n}"}]},"annotation": "genExpr: std/text/parse/satisfy-fail<string>(s, (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-match(slice, (std/core/string/list(s))))) {\n      ((std/core/types/Just(((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : (maybe :: V -> V)<sslice/sslice> ) as @pat: ((maybe :: V -> V)<sslice/sslice>))\n         -> std/core/types/Just<(string, sslice/sslice)>((std/core/types/Tuple2<string,sslice/sslice>(s, rest)));\n      ((@skip std/core/types/Nothing() : (maybe :: V -> V)<sslice/sslice> ) as @pat@3: ((maybe :: V -> V)<sslice/sslice>))\n         -> std/core/types/Nothing<(string, sslice/sslice)>;\n    });\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(std/text/parse/parse :: (E, V) -> V)>(s: string){\n  std/text/parse/satisfy-fail<string>(s, (fn(slice: sslice/sslice){\n      (match ((std/text/parse/next-match(slice, (std/core/string/list(s))))) {\n        ((std/core/types/Just(((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : (maybe :: V -> V)<sslice/sslice> ) as @pat: ((maybe :: V -> V)<sslice/sslice>))\n           -> std/core/types/Just<(string, sslice/sslice)>((std/core/types/Tuple2<string,sslice/sslice>(s, rest)));\n        ((@skip std/core/types/Nothing() : (maybe :: V -> V)<sslice/sslice> ) as @pat@3: ((maybe :: V -> V)<sslice/sslice>))\n           -> std/core/types/Nothing<(string, sslice/sslice)>;\n      });\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/pstring\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/pstring"]}, {"name": {"op": "Var","id": "std/text/parse/starts-with","type": {"op": "Function","params": [{"op": "String"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Var","id": "p","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x330","type": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/parse","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/parse<a,(total :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/Sslice","type": {"op": "Function","params": [{"op": "String"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/Sslice"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/sslice/length","args": [{"op": "Var","id": "s","type": {"op": "String"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/sslice/length(s)"}]},"annotation": "genExpr: std/core/sslice/Sslice(s, 0, (std/core/sslice/length(s)))"}, {"op": "DebugWrap","inner": {"op": "Var","id": "p","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: p"}]},"annotation": "genExpr: std/text/parse/parse<a,(total :: E)>((std/core/sslice/Sslice(s, 0, (std/core/sslice/length(s)))), p)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x330","type": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"}},"type_tag": "std/text/parse/parse-error","clauses": [{"tag": "std/text/parse/ParseOk","params": [{"op": "Var","id": "@\"result\"331","type": {"op": "Top"}}, {"op": "Var","id": "@\"rest\"332","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"rest\"332","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"332\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"333","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"334","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"335","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<(a, sslice/sslice)>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<a,sslice/sslice>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"result\"331","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 2665) -> {\"op\": \"Var\",\"id\": \"@\\\"result\\\"331\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"rest\"332","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"332\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}"},"annotation": "genExpr: rest"}]},"annotation": "genExpr: std/core/types/Tuple2<a,sslice/sslice>(x, rest)"}]},"annotation": "genExpr: std/core/types/Just<(a, sslice/sslice)>((std/core/types/Tuple2<a,sslice/sslice>(x, rest)))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x330\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"result\\\"331\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 2665) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"result\\\\\\\"331\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"332\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"332\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"333\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"333\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"334\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"334\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"335\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"335\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"332\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"rest\\\\\\\"332\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/sslice/sslice\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"333\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"334\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"335\",\"type\": {\"op\": \"Int\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x330\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}}: \"std/text/parse/parse-error\".\"std/text/parse/ParseOk\"(({\"op\": \"Var\",\"id\": \"@\\\"result\\\"331\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"rest\\\"332\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/sslice/sslice\"}}))"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<(a, sslice/sslice)>"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x330\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/text/parse/parse-error\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(s: string, p: () -> (std/text/parse/parse :: (E, V) -> V) a){\n  (match ((std/text/parse/parse<a,(total :: E)>((std/core/sslice/Sslice(s, 0, (std/core/sslice/length(s)))), p))) {\n    ((std/text/parse/ParseOk((x: a) : a, ((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : (std/text/parse/parse-error :: V -> V)<a> ) as @pat: ((std/text/parse/parse-error :: V -> V)<a>))\n       -> std/core/types/Just<(a, sslice/sslice)>((std/core/types/Tuple2<a,sslice/sslice>(x, rest)));\n    (@pat@3: ((std/text/parse/parse-error :: V -> V)<a>))\n       -> std/core/types/Nothing<(a, sslice/sslice)>;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/starts-with\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/starts-with"]}, {"name": {"op": "Var","id": "std/text/parse/white","type": {"op": "Function","params": [],"return": {"op": "Ptr","extern_ptr_name": "\"char\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/satisfy-fail","type": {"op": "Function","params": [{"op": "String"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/satisfy-fail<char>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x336","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/next","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/next"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice"}]},"annotation": "genExpr: std/core/sslice/next(slice)"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x336","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"337","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"337","type": {"op": "Top"}},"annotation": "genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"337\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"338","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"339","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/char","type": {"op": "Ptr"}},"name": "std/core/char/is-white","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: std/core/char/is-white"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"338","type": {"op": "Top"}},"annotation": "genTest: normal: (c: char) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"338\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: c"}]},"annotation": "genExpr: std/core/char/is-white(c)"},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<(char, sslice/sslice)>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<char,sslice/sslice>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"338","type": {"op": "Top"}},"annotation": "genTest: normal: (c: char) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"338\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: c"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"339","type": {"op": "Top"}},"annotation": "genTest: normal: (rest: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"339\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: rest"}]},"annotation": "genExpr: std/core/types/Tuple2<char,sslice/sslice>(c, rest)"}]},"annotation": "genExpr: std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)))"}}}],"default": {"op": "AlternativeFail"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x336\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"337\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"337\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(c,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"338\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (c: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"338\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"339\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"339\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"337\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Tuple2((c: char), (rest: sslice/sslice)) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"337\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"338\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"339\",\"type\": {\"op\": \"Top\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x336\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"337\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<(char, sslice/sslice)>"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x336\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(slice: sslice/sslice){\n  match ((std/core/sslice/next(slice))) {\n    ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n       | std/core/char/is-white(c) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n    (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n       -> std/core/types/Nothing<(char, sslice/sslice)>;\n  };\n}"}]},"annotation": "genExpr: std/text/parse/satisfy-fail<char>(\"\", (fn(slice: sslice/sslice){\n    (match ((std/core/sslice/next(slice))) {\n      ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         | std/core/char/is-white(c) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n      (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n         -> std/core/types/Nothing<(char, sslice/sslice)>;\n    });\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(std/text/parse/parse :: (E, V) -> V)>(){\n  std/text/parse/satisfy-fail<char>(\"\", (fn(slice: sslice/sslice){\n      (match ((std/core/sslice/next(slice))) {\n        ((std/core/types/Just(((std/core/types/Tuple2((c: char) : char, (rest: sslice/sslice) : sslice/sslice) : (char, sslice/sslice) ) as @pat@0: (char, sslice/sslice)) : (char, sslice/sslice)) : (maybe :: V -> V)<(char, sslice/sslice)> ) as @pat: ((maybe :: V -> V)<(char, sslice/sslice)>))\n           | std/core/char/is-white(c) -> std/core/types/Just<(char, sslice/sslice)>((std/core/types/Tuple2<char,sslice/sslice>(c, rest)));\n        (@pat@1: ((maybe :: V -> V)<(char, sslice/sslice)>))\n           -> std/core/types/Nothing<(char, sslice/sslice)>;\n      });\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/white\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/white"]}, {"name": {"op": "Var","id": "std/text/parse/whitespace","type": {"op": "Function","params": [],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/string","type": {"op": "Ptr"}},"name": "std/core/string/listchar/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/string/listchar/string"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/satisfy-fail","type": {"op": "Function","params": [{"op": "String"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/satisfy-fail<(list :: V -> V)<char>>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x340","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/next-while0","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Bool"},"purity": "Effectful"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/next-while0"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/char","type": {"op": "Ptr"}},"name": "std/core/char/is-white","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: std/core/char/is-white"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<char>"}]},"annotation": "genExpr: std/text/parse/next-while0(slice, std/core/char/is-white, (std/core/types/Nil<char>))"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x340","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"341","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"342","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"341","type": {"op": "Top"}},"annotation": "genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"341\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"342","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"342\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"343","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"344","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"345","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x340\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"341\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"341\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"342\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"342\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"343\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"343\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"344\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"344\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"345\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@4: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"345\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"342\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"342\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"343\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"344\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"345\",\"type\": {\"op\": \"Int\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"341\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"341\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x340\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"341\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"342\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x340","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"346","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"347","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"347","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"347\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"348","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"349","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"350","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"346","type": {"op": "Top"}},"annotation": "genTest: normal: (xs: list<char>) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"346\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: xs"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"347","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"347\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: rest"}]},"annotation": "genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)"}]},"annotation": "genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x340\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"346\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"346\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"347\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"347\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"348\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"348\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"349\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"349\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"350\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"350\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"347\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"347\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"348\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"349\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"350\",\"type\": {\"op\": \"Int\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x340\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"346\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"347\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(slice: sslice/sslice){\n  match ((std/text/parse/next-while0(slice, std/core/char/is-white, (std/core/types/Nil<char>)))) {\n    ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n       -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n    ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n       -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n  };\n}"}]},"annotation": "genExpr: std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"\", (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, std/core/char/is-white, (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))"}]},"annotation": "genExpr: std/core/string/listchar/string((std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"\", (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, std/core/char/is-white, (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(std/text/parse/parse :: (E, V) -> V)>(){\n  std/core/string/listchar/string((std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"\", (fn(slice: sslice/sslice){\n      (match ((std/text/parse/next-while0(slice, std/core/char/is-white, (std/core/types/Nil<char>)))) {\n        ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n           -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n        ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n           -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n      });\n    }))));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/whitespace\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/whitespace"]}, {"name": {"op": "Var","id": "std/text/parse/whitespace0","type": {"op": "Function","params": [],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/(||)","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/(||)<string,(total :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/string","type": {"op": "Ptr"}},"name": "std/core/string/listchar/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/string/listchar/string"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/satisfy-fail","type": {"op": "Function","params": [{"op": "String"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/satisfy-fail<(list :: V -> V)<char>>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x351","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/text/parse/next-while0","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Bool"},"purity": "Effectful"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/next-while0"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "slice","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}},"annotation": "genExpr: slice"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/char","type": {"op": "Ptr"}},"name": "std/core/char/is-white","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: std/core/char/is-white"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<char>"}]},"annotation": "genExpr: std/text/parse/next-while0(slice, std/core/char/is-white, (std/core/types/Nil<char>))"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x351","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"352","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"353","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"352","type": {"op": "Top"}},"annotation": "genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"352\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"353","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"353\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"354","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"355","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"356","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x351\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"352\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"352\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"353\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"353\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"354\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"354\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"355\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@3: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"355\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"356\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@4: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"356\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"353\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@2: string), (@pat@3: int), (@pat@4: int)) : sslice/sslice ) as @pat@1: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"353\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"354\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"355\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"356\",\"type\": {\"op\": \"Int\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"352\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((std/core/types/Nil() : list<char> ) as @pat@0: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"352\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x351\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"352\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"353\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x351","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"357","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"358","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"358","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"358\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"359","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"360","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"361","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"357","type": {"op": "Top"}},"annotation": "genTest: normal: (xs: list<char>) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"357\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: xs"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"358","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"358\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: rest"}]},"annotation": "genExpr: std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)"}]},"annotation": "genExpr: std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)))"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x351\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(xs,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"357\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (xs: list<char>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"357\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"358\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"358\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"359\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@6: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"359\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"360\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@7: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"360\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"361\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@8: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"361\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"358\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@6: string), (@pat@7: int), (@pat@8: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"358\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"359\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"360\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"361\",\"type\": {\"op\": \"Int\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x351\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"357\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"358\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(slice: sslice/sslice){\n  match ((std/text/parse/next-while0(slice, std/core/char/is-white, (std/core/types/Nil<char>)))) {\n    ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n       -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n    ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n       -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n  };\n}"}]},"annotation": "genExpr: std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"\", (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, std/core/char/is-white, (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))"}]},"annotation": "genExpr: std/core/string/listchar/string((std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"\", (fn(slice: sslice/sslice){\n    (match ((std/text/parse/next-while0(slice, std/core/char/is-white, (std/core/types/Nil<char>)))) {\n      ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n      ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n         -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n    });\n  }))))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(std/text/parse/parse :: (E, V) -> V)>(){\n  std/core/string/listchar/string((std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"\", (fn(slice: sslice/sslice){\n      (match ((std/text/parse/next-while0(slice, std/core/char/is-white, (std/core/types/Nil<char>)))) {\n        ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n           -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n        ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n           -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n      });\n    }))));\n}"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "Literal","type": {"op": "String"},"value": ""}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(std/text/parse/parse :: (E, V) -> V)>(){\n  \"\";\n}"}]},"annotation": "genExpr: std/text/parse/(||)<string,(total :: E)>((fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    (std/core/string/listchar/string((std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"\", (fn(slice: sslice/sslice){\n        (match ((std/text/parse/next-while0(slice, std/core/char/is-white, (std/core/types/Nil<char>)))) {\n          ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n             -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n          ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n             -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n        });\n      })))));\n  }), (fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    \"\";\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(std/text/parse/parse :: (E, V) -> V)>(){\n  std/text/parse/(||)<string,(total :: E)>((fn<(std/text/parse/parse :: (E, V) -> V)>(){\n      (std/core/string/listchar/string((std/text/parse/satisfy-fail<(list :: V -> V)<char>>(\"\", (fn(slice: sslice/sslice){\n          (match ((std/text/parse/next-while0(slice, std/core/char/is-white, (std/core/types/Nil<char>)))) {\n            ((@skip std/core/types/Tuple2(((std/core/types/Nil() : (list :: V -> V)<char> ) as @pat@0: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@2: string) : string, (@pat@3: int) : int, (@pat@4: int) : int) : sslice/sslice ) as @pat@1: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat: ((list :: V -> V)<char>, sslice/sslice))\n               -> std/core/types/Nothing<((list :: V -> V)<char>, sslice/sslice)>;\n            ((@skip std/core/types/Tuple2((xs: (list :: V -> V)<char>) : (list :: V -> V)<char>, ((@skip std/core/sslice/Sslice((@pat@6: string) : string, (@pat@7: int) : int, (@pat@8: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : ((list :: V -> V)<char>, sslice/sslice) ) as @pat@5: ((list :: V -> V)<char>, sslice/sslice))\n               -> std/core/types/Just<((list :: V -> V)<char>, sslice/sslice)>((std/core/types/Tuple2<(list :: V -> V)<char>,sslice/sslice>(xs, rest)));\n          });\n        })))));\n    }), (fn<(std/text/parse/parse :: (E, V) -> V)>(){\n      \"\";\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/text/parse/whitespace0\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/text/parse/whitespace0"]}, {"name": {"op": "Var","id": "std/text/parse/@Hnd-parse","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}],"return": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@cfc","type": {"op": "Int"}}, {"op": "Var","id": "@fun-current-input","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@ctl-fail","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}, {"op": "Var","id": "@ctl-pick","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@fun-satisfy","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}],"body": {"op": "Construct","type_tag": "std/text/parse/parse","tag": "std/text/parse/@Hnd-parse","args": [{"op": "Var","id": "@cfc","type": {"op": "Int"}}, {"op": "Var","id": "@fun-current-input","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@ctl-fail","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}, {"op": "Var","id": "@ctl-pick","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}, {"op": "Var","id": "@fun-satisfy","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}}]}},"annotation": "genConstr"},"export_as": ["std/text/parse/@Hnd-parse"]}, {"name": {"op": "Var","id": "std/text/parse/ParseOk","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "result","type": {"op": "Top"}}, {"op": "Var","id": "rest","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "Construct","type_tag": "std/text/parse/parse-error","tag": "std/text/parse/ParseOk","args": [{"op": "Var","id": "result","type": {"op": "Top"}}, {"op": "Var","id": "rest","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}]}},"annotation": "genConstr"},"export_as": ["std/text/parse/ParseOk"]}, {"name": {"op": "Var","id": "std/text/parse/ParseError","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "std/text/parse/parse-error"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "msg","type": {"op": "String"}}, {"op": "Var","id": "rest","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}],"body": {"op": "Construct","type_tag": "std/text/parse/parse-error","tag": "std/text/parse/ParseError","args": [{"op": "Var","id": "msg","type": {"op": "String"}}, {"op": "Var","id": "rest","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}}]}},"annotation": "genConstr"},"export_as": ["std/text/parse/ParseError"]}],"main": {"op": "Primitive","name": "!undefined:is a library","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}}}