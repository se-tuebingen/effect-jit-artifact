{"metadata": {"generated by": "Koka","koka version": "3.1.2","program name": "main"},"includes": [],"definitions": [{"name": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_types.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_hnd.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/exn","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_exn.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/bool","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_bool.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/order","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_order.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/char","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_char.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/int","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_int.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/vector","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_vector.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/string","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_string.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_sslice.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/list","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_list.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/maybe","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_maybe.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/either","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_either.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/tuple","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_tuple.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/show","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_show.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/debug","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_debug.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/delayed","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_delayed.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/console","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_console.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/os/env","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_os_env.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/text/parse","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_text_parse.rpyeffect"}}}, {"name": {"op": "Var","id": "main/choose/@cfc","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/choose"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "choose@0","type": {"op": "Ptr","extern_ptr_name": "main/choose"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "choose@0","type": {"op": "Ptr","extern_ptr_name": "main/choose"}},"type_tag": "main/choose","clauses": [{"tag": "main/@Hnd-choose","params": [{"op": "Var","id": "@\"@cfc\"0","type": {"op": "Int"}}, {"op": "Var","id": "@\"@ctl-choose\"1","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@cfc\"0","type": {"op": "Int"}},"annotation": "genTest: normal: (@x: int) -> {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"choose@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/choose\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/clause0<bool,main/choose,73,74>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-choose\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"choose@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/choose\"}}: \"main/choose\".\"main/@Hnd-choose\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a> fn(choose@0: (main/choose :: (E, V) -> V)<(e :: E),a>){\n  (match (choose@0) {\n    ((@skip main/@Hnd-choose((@x: int) : int, (@pat@0: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(e :: E),a>) : (main/choose :: (E, V) -> V)<(e :: E),a> ) as @pat: ((main/choose :: (E, V) -> V)<(e :: E),a>))\n       -> @x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/choose/@cfc\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"main/choose\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/choose/@cfc"]}, {"name": {"op": "Var","id": "main/choose/@ctl-choose","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/choose"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "choose@0","type": {"op": "Ptr","extern_ptr_name": "main/choose"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "choose@0","type": {"op": "Ptr","extern_ptr_name": "main/choose"}},"type_tag": "main/choose","clauses": [{"tag": "main/@Hnd-choose","params": [{"op": "Var","id": "@\"@cfc\"2","type": {"op": "Int"}}, {"op": "Var","id": "@\"@ctl-choose\"3","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@ctl-choose\"3","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"annotation": "genTest: normal: (@x: hnd/clause0<bool,main/choose,97,98>) -> {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"choose@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/choose\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"2\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@x: hnd/clause0<bool,main/choose,97,98>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-choose\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"choose@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/choose\"}}: \"main/choose\".\"main/@Hnd-choose\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"2\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a> fn(choose@0: (main/choose :: (E, V) -> V)<(e :: E),a>){\n  (match (choose@0) {\n    ((@skip main/@Hnd-choose((@pat@0: int) : int, (@x: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(e :: E),a>) : (main/choose :: (E, V) -> V)<(e :: E),a> ) as @pat: ((main/choose :: (E, V) -> V)<(e :: E),a>))\n       -> @x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/choose/@ctl-choose\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"main/choose\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/choose/@ctl-choose"]}, {"name": {"op": "Var","id": "main/is-leaf","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/tree"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "tree","type": {"op": "Ptr","extern_ptr_name": "main/tree"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "tree","type": {"op": "Ptr","extern_ptr_name": "main/tree"}},"type_tag": "main/tree","clauses": [{"tag": "main/Leaf","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"tree\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"tree\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}: \"main/tree\".\"main/Leaf\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "tree","type": {"op": "Ptr","extern_ptr_name": "main/tree"}},"type_tag": "main/tree","clauses": [{"tag": "main/Node","params": [{"op": "Var","id": "@\"left\"4","type": {"op": "Ptr","extern_ptr_name": "main/tree"}}, {"op": "Var","id": "@\"value\"5","type": {"op": "Int"}}, {"op": "Var","id": "@\"right\"6","type": {"op": "Ptr","extern_ptr_name": "main/tree"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"tree\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"left\\\"4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}},\"annotation\": \"genTest: normal: (@pat@1: main/tree) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"left\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"main/tree\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"5\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"5\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"right\\\"6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}},\"annotation\": \"genTest: normal: (@pat@3: main/tree) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"right\\\\\\\"6\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"main/tree\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"tree\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}: \"main/tree\".\"main/Node\"(({\"op\": \"Var\",\"id\": \"@\\\"left\\\"4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}, {\"op\": \"Var\",\"id\": \"@\\\"value\\\"5\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"right\\\"6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(tree: main/tree){\n  match (tree) {\n    ((main/Leaf() : main/tree ) as @pat: main/tree)\n       -> std/core/types/True;\n    ((@skip main/Node((@pat@1: main/tree) : main/tree, (@pat@2: int) : int, (@pat@3: main/tree) : main/tree) : main/tree ) as @pat@0: main/tree)\n       -> std/core/types/False;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/is-leaf\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/is-leaf"]}, {"name": {"op": "Var","id": "main/is-node","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/tree"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "tree","type": {"op": "Ptr","extern_ptr_name": "main/tree"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "tree","type": {"op": "Ptr","extern_ptr_name": "main/tree"}},"type_tag": "main/tree","clauses": [{"tag": "main/Node","params": [{"op": "Var","id": "@\"left\"7","type": {"op": "Ptr","extern_ptr_name": "main/tree"}}, {"op": "Var","id": "@\"value\"8","type": {"op": "Int"}}, {"op": "Var","id": "@\"right\"9","type": {"op": "Ptr","extern_ptr_name": "main/tree"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"tree\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"left\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}},\"annotation\": \"genTest: normal: (@pat@0: main/tree) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"left\\\\\\\"7\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"main/tree\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"8\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"right\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}},\"annotation\": \"genTest: normal: (@pat@2: main/tree) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"right\\\\\\\"9\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"main/tree\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"tree\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}: \"main/tree\".\"main/Node\"(({\"op\": \"Var\",\"id\": \"@\\\"left\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}, {\"op\": \"Var\",\"id\": \"@\\\"value\\\"8\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"right\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "tree","type": {"op": "Ptr","extern_ptr_name": "main/tree"}},"type_tag": "main/tree","clauses": [{"tag": "main/Leaf","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"tree\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"tree\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}: \"main/tree\".\"main/Leaf\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(tree: main/tree){\n  match (tree) {\n    ((main/Node((@pat@0: main/tree) : main/tree, (@pat@1: int) : int, (@pat@2: main/tree) : main/tree) : main/tree ) as @pat: main/tree)\n       -> std/core/types/True;\n    ((@skip main/Leaf() : main/tree ) as @pat@3: main/tree)\n       -> std/core/types/False;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/is-node\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/is-node"]}, {"name": {"op": "Var","id": "main/@tag-choose","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/Htag","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Htag<(main/choose :: (E, V) -> V)>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "choose@main"},"annotation": "genExpr: \"choose@main\""}]},"annotation": "genExpr: std/core/hnd/Htag<(main/choose :: (E, V) -> V)>(\"choose@main\")"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/@tag-choose\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}"},"export_as": ["main/@tag-choose"]}, {"name": {"op": "Var","id": "main/@handle-choose","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/choose"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "main/choose"}}, {"op": "Var","id": "ret","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@hhandle","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@hhandle<a,(e :: E),<(main/choose :: (E, V) -> V)|(e :: E)>,(main/choose :: (E, V) -> V),a>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "main/@tag-choose","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}},"annotation": "genExpr: main/@tag-choose"}, {"op": "DebugWrap","inner": {"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "main/choose"}},"annotation": "genExpr: hnd"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ret","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: ret"}, {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: action"}]},"annotation": "genExpr: std/core/hnd/@hhandle<a,(e :: E),<(main/choose :: (E, V) -> V)|(e :: E)>,(main/choose :: (E, V) -> V),a>(main/@tag-choose, hnd, ret, action)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E),b> fn<(e :: E)>(hnd: (main/choose :: (E, V) -> V)<(e :: E),b>, ret: (res : a) -> (e :: E) b, action: () -> <(main/choose :: (E, V) -> V)|(e :: E)> a){\n  std/core/hnd/@hhandle<a,(e :: E),<(main/choose :: (E, V) -> V)|(e :: E)>,(main/choose :: (E, V) -> V),b>(main/@tag-choose, hnd, ret, action);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/@handle-choose\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"main/choose\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/@handle-choose"]}, {"name": {"op": "Var","id": "main/@select-choose","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/choose"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "main/choose"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "hnd","type": {"op": "Ptr","extern_ptr_name": "main/choose"}},"type_tag": "main/choose","clauses": [{"tag": "main/@Hnd-choose","params": [{"op": "Var","id": "@\"@cfc\"10","type": {"op": "Int"}}, {"op": "Var","id": "@\"@ctl-choose\"11","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@ctl-choose\"11","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"annotation": "genTest: normal: (@ctl-choose: hnd/clause0<bool,main/choose,193,194>) -> {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}"},"annotation": "genExpr: @ctl-choose"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/choose\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"10\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"10\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@ctl-choose,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-choose: hnd/clause0<bool,main/choose,193,194>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-choose\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/choose\"}}: \"main/choose\".\"main/@Hnd-choose\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"10\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E),a> fn(hnd: (main/choose :: (E, V) -> V)<(e :: E),a>){\n  (match (hnd) {\n    ((@skip main/@Hnd-choose((@pat@0: int) : int, (@ctl-choose: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(e :: E),a>) : (main/choose :: (E, V) -> V)<(e :: E),a> ) as @pat: ((main/choose :: (E, V) -> V)<(e :: E),a>))\n       -> @ctl-choose;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/@select-choose\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"main/choose\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/@select-choose"]}, {"name": {"op": "Var","id": "main/operator","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "y@1@10003","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixMul(Int, Int): Int","args": [{"op": "Literal","type": {"op": "Int"},"value": 503}, {"op": "Var","id": "y","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/(*)(503, y)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y@1@10003\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["y@1@10003"]}, {"name": {"op": "Var","id": "x@0@10000","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "y@1@10003","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub(x, y@1@10003)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"x@0@10000\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["x@0@10000"]}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "mod(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "abs(Int): Int","args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Var","id": "x@0@10000","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 37}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(x@0@10000, 37)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/abs((std/core/int/int-add(x@0@10000, 37)))"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1009},"annotation": "genExpr: 1009"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/(%)((std/core/int/abs((std/core/int/int-add(x@0@10000, 37)))), 1009)"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(x: int, y: int){\n  val y@1@10003 : int;\n  val x@0@10000 : int;\n  std/core/int/(%)((std/core/int/abs((std/core/int/int-add(x@0@10000, 37)))), 1009);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/operator\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/operator"]}, {"name": {"op": "Var","id": "main/choose","type": {"op": "Function","params": [],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "ev@10037","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"elt\" (fun Pure (ptr int) ptr)) (\"promote_ptr\" ((qualified $\"import$std/core/hnd\":ptr \"getCurrentEvv\" (fun Effectful () ptr)))) $arg0:int)","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/types/@make-ssize_t(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}},"annotation": "genExpr: std/core/hnd/@evv-at<(main/choose :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"ev@10037\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}"},"export_as": ["ev@10037"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev@10037","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"12","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"13","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"14","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"15","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hnd\"14","type": {"op": "Top"}},"annotation": "genTest: normal: (h: main/choose<1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"14\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "main/choose","clauses": [{"tag": "main/@Hnd-choose","params": [{"op": "Var","id": "@\"@cfc\"16","type": {"op": "Int"}}, {"op": "Var","id": "@\"@ctl-choose\"17","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@ctl-choose\"17","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"annotation": "genTest: normal: (@ctl-choose: hnd/clause0<bool,main/choose,1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"17\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}"},"type_tag": "std/core/hnd/clause0","clauses": [{"tag": "std/core/hnd/Clause0","params": [{"op": "Var","id": "@\"clause\"18","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:(debugWrap \"cast-clause0\" $arg0:top)","args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"18","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<main/choose>) -> 1005 bool) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"18\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: f"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/hnd/cast-clause0<bool,(main/choose :: (E, V) -> V),(e :: E),(main/choose :: (E, V) -> V),a>(f)"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"marker\"13","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genTest: normal: (m: hnd/marker<1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev@10037","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev@10037"}]},"annotation": "genExpr: std/core/hnd/cast-clause0<bool,(main/choose :: (E, V) -> V),(e :: E),(main/choose :: (E, V) -> V),a>(f)(m, ev@10037)"}}]},"annotation": "genBranch: [(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"17\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-choose: hnd/clause0<bool,main/choose,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-choose\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"18\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<main/choose>) -> 1005 bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"17\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-choose: hnd/clause0<bool,main/choose,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-choose\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"18\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@ctl-choose) {\n  ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(1005 :: E),1006>))\n     -> std/core/hnd/cast-clause0<bool,(main/choose :: (E, V) -> V),(e :: E),(main/choose :: (E, V) -> V),a>(f)(m, ev@10037);\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"14\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/choose<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"16\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"16\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@ctl-choose,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"17\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-choose: hnd/clause0<bool,main/choose,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-choose\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"14\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/choose<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/choose\".\"main/@Hnd-choose\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"16\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"17\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (h) {\n  ((@skip main/@Hnd-choose((@pat@0@0: int) : int, (@ctl-choose: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(e :: E),a>) : (main/choose :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/choose :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match (@ctl-choose) {\n      ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(1005 :: E),1006>))\n         -> std/core/hnd/cast-clause0<bool,(main/choose :: (E, V) -> V),(e :: E),(main/choose :: (E, V) -> V),a>(f)(m, ev@10037);\n    });\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10037\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"12\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<main/choose>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"12\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"13\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"14\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/choose<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"15\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev@10037\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"12\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"14\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"15\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(main/choose :: (E, V) -> V)>(){\n  val ev@10037 : (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>\n        = std/core/hnd/@evv-at<(main/choose :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)));\n  match (ev@10037) {\n    ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (main/choose :: (E, V) -> V)<(e :: E),a>) : (main/choose :: (E, V) -> V)<(e :: E),a>, (@pat@1: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)> ) as @pat: ((hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>))\n       -> (match (h) {\n        ((@skip main/@Hnd-choose((@pat@0@0: int) : int, (@ctl-choose: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(e :: E),a>) : (main/choose :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/choose :: (E, V) -> V)<(e :: E),a>))\n           -> (match (@ctl-choose) {\n            ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(e :: E),a>))\n               -> std/core/hnd/cast-clause0<bool,(main/choose :: (E, V) -> V),(e :: E),(main/choose :: (E, V) -> V),a>(f)(m, ev@10037);\n          });\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/choose\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/choose"]}, {"name": {"op": "Var","id": "main/make","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "main/tree"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "n","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "main/tree"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "main/Leaf","type": {"op": "Ptr","extern_ptr_name": "main/tree"}},"annotation": "genExpr: main/Leaf"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "main/tree"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "t","type": {"op": "Ptr","extern_ptr_name": "main/tree"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/make","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "main/tree"},"purity": "Effectful"}},"annotation": "genExpr: main/make"},"args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub(n, 1)"}]},"annotation": "genExpr: main/make((std/core/int/int-sub(n, 1)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}"},"export_as": ["t"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/Node","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/tree"}, {"op": "Int"}, {"op": "Ptr","extern_ptr_name": "main/tree"}],"return": {"op": "Ptr","extern_ptr_name": "main/tree"},"purity": "Effectful"}},"annotation": "genExpr: main/Node"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "t","type": {"op": "Ptr","extern_ptr_name": "main/tree"}},"annotation": "genExpr: t"}, {"op": "DebugWrap","inner": {"op": "Var","id": "n","type": {"op": "Int"}},"annotation": "genExpr: n"}, {"op": "DebugWrap","inner": {"op": "Var","id": "t","type": {"op": "Ptr","extern_ptr_name": "main/tree"}},"annotation": "genExpr: t"}]},"annotation": "genExpr: main/Node(t, n, t)"}},"annotation": "genExpr: val t : main/tree\n      = main/make((std/core/int/int-sub(n, 1)));\nmain/Node(t, n, t)"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"n\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(div :: X)>(n: int){\n  match ((std/core/int/(==)(n, 0))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> main/Leaf;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> val t : main/tree\n                = main/make((std/core/int/int-sub(n, 1)));\n      main/Node(t, n, t);\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/make\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/make"]}, {"name": {"op": "Var","id": "main/@lift-run@707","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"local-var\""}, {"op": "Ptr","extern_ptr_name": "main/tree"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "state","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}}, {"op": "Var","id": "t","type": {"op": "Ptr","extern_ptr_name": "main/tree"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "t","type": {"op": "Ptr","extern_ptr_name": "main/tree"}},"type_tag": "main/tree","clauses": [{"tag": "main/Leaf","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "getRef(Ref[Ptr]): Ptr","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "state","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}},"annotation": "genExpr: state"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/types/local-get<int,(h :: H),<(main/choose :: (E, V) -> V),(div :: X)>>(state)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}: \"main/tree\".\"main/Leaf\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "t","type": {"op": "Ptr","extern_ptr_name": "main/tree"}},"type_tag": "main/tree","clauses": [{"tag": "main/Node","params": [{"op": "Var","id": "@\"left\"19","type": {"op": "Ptr","extern_ptr_name": "main/tree"}}, {"op": "Var","id": "@\"value\"20","type": {"op": "Int"}}, {"op": "Var","id": "@\"right\"21","type": {"op": "Ptr","extern_ptr_name": "main/tree"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "ev@10039","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:((qualified $\"import$std/core/hnd\":ptr \"elt\" (fun Pure (ptr int) ptr)) (\"promote_ptr\" ((qualified $\"import$std/core/hnd\":ptr \"getCurrentEvv\" (fun Effectful () ptr)))) $arg0:int)","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: std/core/types/@make-ssize_t(0)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}},"annotation": "genExpr: std/core/hnd/@evv-at<(main/choose :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"ev@10039\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}"},"export_as": ["ev@10039"]}, {"name": {"op": "Var","id": "next","type": {"op": "Ptr","extern_ptr_name": "main/tree"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ev@10039","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"type_tag": "std/core/hnd/ev","clauses": [{"tag": "std/core/hnd/Ev","params": [{"op": "Var","id": "@\"htag\"22","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/htag"}}, {"op": "Var","id": "@\"marker\"23","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@\"hnd\"24","type": {"op": "Top"}}, {"op": "Var","id": "@\"hevv\"25","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/evv"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "main/tree"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"hnd\"24","type": {"op": "Top"}},"annotation": "genTest: normal: (h: main/choose<1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"24\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "main/choose","clauses": [{"tag": "main/@Hnd-choose","params": [{"op": "Var","id": "@\"@cfc\"26","type": {"op": "Int"}}, {"op": "Var","id": "@\"@ctl-choose\"27","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "main/tree"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"@ctl-choose\"27","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}},"annotation": "genTest: normal: (@ctl-choose: hnd/clause0<bool,main/choose,1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"27\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}"},"type_tag": "std/core/hnd/clause0","clauses": [{"tag": "std/core/hnd/Clause0","params": [{"op": "Var","id": "@\"clause\"28","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "main/tree"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x29","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!sexp:(debugWrap \"cast-clause0\" $arg0:top)","args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"clause\"28","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<main/choose>) -> 1005 bool) -> {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"28\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"annotation": "genExpr: f"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/hnd/cast-clause0<bool,(main/choose :: (E, V) -> V),(e :: E),(main/choose :: (E, V) -> V),a>(f)"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"marker\"23","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genTest: normal: (m: hnd/marker<1005,1006>) -> {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}"},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ev@10039","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}},"annotation": "genExpr: ev@10039"}]},"annotation": "genExpr: std/core/hnd/cast-clause0<bool,(main/choose :: (E, V) -> V),(e :: E),(main/choose :: (E, V) -> V),a>(f)(m, ev@10039)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x29","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "main/tree"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"left\"19","type": {"op": "Ptr","extern_ptr_name": "main/tree"}},"annotation": "genTest: normal: (l: main/tree) -> {\"op\": \"Var\",\"id\": \"@\\\"left\\\"19\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}"},"annotation": "genExpr: l"}}]},"annotation": "genBranch: [(@pat@1@1,{\"op\": \"Var\",\"id\": \"@x29\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x29","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "main/tree"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"right\"21","type": {"op": "Ptr","extern_ptr_name": "main/tree"}},"annotation": "genTest: normal: (r: main/tree) -> {\"op\": \"Var\",\"id\": \"@\\\"right\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}"},"annotation": "genExpr: r"}}]},"annotation": "genBranch: [(@pat@2@0@0,{\"op\": \"Var\",\"id\": \"@x29\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/hnd/cast-clause0<bool,(main/choose :: (E, V) -> V),(e :: E),(main/choose :: (E, V) -> V),a>(f)(m, ev@10039))) {\n  ((std/core/types/True() : bool ) as @pat@1@1: bool)\n     -> l;\n  ((@skip std/core/types/False() : bool ) as @pat@2@0@0: bool)\n     -> r;\n}"}}]},"annotation": "genBranch: [(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"27\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-choose: hnd/clause0<bool,main/choose,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-choose\\\\\\\"27\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"28\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1005,1006>, hnd/ev<main/choose>) -> 1005 bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"28\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"27\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-choose: hnd/clause0<bool,main/choose,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-choose\\\\\\\"27\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"}: \"std/core/hnd/clause0\".\"std/core/hnd/Clause0\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"28\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@ctl-choose) {\n  ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(1005 :: E),1006>))\n     -> (match ((std/core/hnd/cast-clause0<bool,(main/choose :: (E, V) -> V),(e :: E),(main/choose :: (E, V) -> V),a>(f)(m, ev@10039))) {\n      ((std/core/types/True() : bool ) as @pat@1@1: bool)\n         -> l;\n      ((@skip std/core/types/False() : bool ) as @pat@2@0@0: bool)\n         -> r;\n    });\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"24\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/choose<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"26\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"26\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@ctl-choose,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"27\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}},\"annotation\": \"genTest: normal: (@ctl-choose: hnd/clause0<bool,main/choose,1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@ctl-choose\\\\\\\"27\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause0\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"24\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/choose<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/choose\".\"main/@Hnd-choose\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"26\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@ctl-choose\\\"27\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause0\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (h) {\n  ((@skip main/@Hnd-choose((@pat@0@1: int) : int, (@ctl-choose: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(1005 :: E),1006>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(e :: E),a>) : (main/choose :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/choose :: (E, V) -> V)<(1005 :: E),1006>))\n     -> (match (@ctl-choose) {\n      ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(1005 :: E),1006>, (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>) -> (1005 :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(1005 :: E),1006>))\n         -> (match ((std/core/hnd/cast-clause0<bool,(main/choose :: (E, V) -> V),(e :: E),(main/choose :: (E, V) -> V),a>(f)(m, ev@10039))) {\n          ((std/core/types/True() : bool ) as @pat@1@1: bool)\n             -> l;\n          ((@skip std/core/types/False() : bool ) as @pat@2@0@0: bool)\n             -> r;\n        });\n    });\n}"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ev@10039\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"22\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@0: hnd/htag<main/choose>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"22\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"23\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"24\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/choose<1005,1006>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"25\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/evv<1005>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ev@10039\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"22\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"24\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"25\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (ev@10039) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (main/choose :: (E, V) -> V)<(e :: E),a>) : (main/choose :: (E, V) -> V)<(e :: E),a>, (@pat@1@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)> ) as @pat@1: ((hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>))\n     -> (match (h) {\n      ((@skip main/@Hnd-choose((@pat@0@1: int) : int, (@ctl-choose: (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(e :: E),a>) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(e :: E),a>) : (main/choose :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/choose :: (E, V) -> V)<(e :: E),a>))\n         -> (match (@ctl-choose) {\n          ((@skip std/core/hnd/Clause0((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>) -> (e :: E) bool) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>) -> (e :: E) bool) : (hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<bool,(main/choose :: (E, V) -> V),(e :: E),a>))\n             -> (match ((std/core/hnd/cast-clause0<bool,(main/choose :: (E, V) -> V),(e :: E),(main/choose :: (E, V) -> V),a>(f)(m, ev@10039))) {\n              ((std/core/types/True() : bool ) as @pat@1@1: bool)\n                 -> l;\n              ((@skip std/core/types/False() : bool ) as @pat@2@0@0: bool)\n                 -> r;\n            });\n        });\n    });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"next\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}"},"export_as": ["next"]}, {"name": {"op": "Var","id": "@x-x1@10032","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "getRef(Ref[Ptr]): Ptr","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "state","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}},"annotation": "genExpr: state"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/types/local-get<int,(h :: H),<(main/choose :: (E, V) -> V),(div :: X)>>(state)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"@x-x1@10032\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["@x-x1@10032"]}, {"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "setRef(Ref[Ptr], Ptr): Unit","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "state","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}},"annotation": "genExpr: state"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@open-none2","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@open-none2<int,int,int,(total :: E),<(local :: H -> X)<(h :: H)>,(main/choose :: (E, V) -> V),(div :: X)>>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "y","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "y@1@10009","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixMul(Int, Int): Int","args": [{"op": "Literal","type": {"op": "Int"},"value": 503}, {"op": "Var","id": "y","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/(*)(503, y)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y@1@10009\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["y@1@10009"]}, {"name": {"op": "Var","id": "x@0@10006","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "Var","id": "x","type": {"op": "Int"}}, {"op": "Var","id": "y@1@10009","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub(x, y@1@10009)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"x@0@10006\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["x@0@10006"]}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "mod(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "abs(Int): Int","args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Var","id": "x@0@10006","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 37}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(x@0@10006, 37)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/abs((std/core/int/int-add(x@0@10006, 37)))"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1009},"annotation": "genExpr: 1009"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/(%)((std/core/int/abs((std/core/int/int-add(x@0@10006, 37)))), 1009)"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(x: int, y: int){\n  val y@1@10009 : int;\n  val x@0@10006 : int;\n  std/core/int/(%)((std/core/int/abs((std/core/int/int-add(x@0@10006, 37)))), 1009);\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "@x-x1@10032","type": {"op": "Int"}},"annotation": "genExpr: @x-x1@10032"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"20","type": {"op": "Int"}},"annotation": "genTest: normal: (v: int) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"20\",\"type\": {\"op\": \"Int\"}}"},"annotation": "genExpr: v"}]},"annotation": "genExpr: std/core/hnd/@open-none2<int,int,int,(total :: E),<(local :: H -> X)<(h :: H)>,(main/choose :: (E, V) -> V),(div :: X)>>((fn(x: int, y: int){\n    val y@1@10009 : int;\n    val x@0@10006 : int;\n    (std/core/int/(%)((std/core/int/abs((std/core/int/int-add(x@0@10006, 37)))), 1009));\n  }), @x-x1@10032, v)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/types/local-set<int,<(main/choose :: (E, V) -> V),(div :: X)>,(h :: H)>(state, (std/core/hnd/@open-none2<int,int,int,(total :: E),<(local :: H -> X)<(h :: H)>,(main/choose :: (E, V) -> V),(div :: X)>>((fn(x: int, y: int){\n      val y@1@10009 : int;\n      val x@0@10006 : int;\n      (std/core/int/(%)((std/core/int/abs((std/core/int/int-add(x@0@10006, 37)))), 1009));\n    }), @x-x1@10032, v)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}, {"name": {"op": "Var","id": "@x-x2@0@10035","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/@lift-run@707","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"local-var\""}, {"op": "Ptr","extern_ptr_name": "main/tree"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: main/@lift-run@707<(h :: H)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "state","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}},"annotation": "genExpr: state"}, {"op": "DebugWrap","inner": {"op": "Var","id": "next","type": {"op": "Ptr","extern_ptr_name": "main/tree"}},"annotation": "genExpr: next"}]},"annotation": "genExpr: main/@lift-run@707<(h :: H)>(state, next)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"@x-x2@0@10035\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["@x-x2@0@10035"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@open-none2","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@open-none2<int,int,int,(total :: E),<(local :: H -> X)<(h :: H)>,(main/choose :: (E, V) -> V),(div :: X)>>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x@2","type": {"op": "Int"}}, {"op": "Var","id": "y@2","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "y@4@10013","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixMul(Int, Int): Int","args": [{"op": "Literal","type": {"op": "Int"},"value": 503}, {"op": "Var","id": "y@2","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/(*)(503, y@2)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"y@4@10013\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["y@4@10013"]}, {"name": {"op": "Var","id": "x@3@10010","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "Var","id": "x@2","type": {"op": "Int"}}, {"op": "Var","id": "y@4@10013","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub(x@2, y@4@10013)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"x@3@10010\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["x@3@10010"]}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "mod(Int, Int): Int","args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "abs(Int): Int","args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Var","id": "x@3@10010","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 37}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(x@3@10010, 37)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/abs((std/core/int/int-add(x@3@10010, 37)))"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1009},"annotation": "genExpr: 1009"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/(%)((std/core/int/abs((std/core/int/int-add(x@3@10010, 37)))), 1009)"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(x@2: int, y@2: int){\n  val y@4@10013 : int;\n  val x@3@10010 : int;\n  std/core/int/(%)((std/core/int/abs((std/core/int/int-add(x@3@10010, 37)))), 1009);\n}"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"20","type": {"op": "Int"}},"annotation": "genTest: normal: (v: int) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"20\",\"type\": {\"op\": \"Int\"}}"},"annotation": "genExpr: v"}, {"op": "DebugWrap","inner": {"op": "Var","id": "@x-x2@0@10035","type": {"op": "Int"}},"annotation": "genExpr: @x-x2@0@10035"}]},"annotation": "genExpr: std/core/hnd/@open-none2<int,int,int,(total :: E),<(local :: H -> X)<(h :: H)>,(main/choose :: (E, V) -> V),(div :: X)>>((fn(x@2: int, y@2: int){\n    val y@4@10013 : int;\n    val x@3@10010 : int;\n    (std/core/int/(%)((std/core/int/abs((std/core/int/int-add(x@3@10010, 37)))), 1009));\n  }), v, @x-x2@0@10035)"}},"annotation": "genExpr: val ev@10039 : (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>;\nval next : main/tree;\nval @x-x1@10032 : int;\nval _ : ();\nval @x-x2@0@10035 : int;\nstd/core/hnd/@open-none2<int,int,int,(total :: E),<(local :: H -> X)<(h :: H)>,(main/choose :: (E, V) -> V),(div :: X)>>((fn(x@2: int, y@2: int){\n    val y@4@10013 : int;\n    val x@3@10010 : int;\n    (std/core/int/(%)((std/core/int/abs((std/core/int/int-add(x@3@10010, 37)))), 1009));\n  }), v, @x-x2@0@10035)"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}),(l,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"left\\\"19\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}},\"annotation\": \"genTest: normal: (l: main/tree) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"left\\\\\\\"19\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"main/tree\\\"}}\"}),(v,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"20\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (v: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"20\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(r,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"right\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}},\"annotation\": \"genTest: normal: (r: main/tree) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"right\\\\\\\"21\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"main/tree\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}: \"main/tree\".\"main/Node\"(({\"op\": \"Var\",\"id\": \"@\\\"left\\\"19\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}, {\"op\": \"Var\",\"id\": \"@\\\"value\\\"20\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"right\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(h :: H)> fn<<(local :: H -> X)<(h :: H)>,(main/choose :: (E, V) -> V),(div :: X)>>(state: (local-var :: (H, V) -> V)<(h :: H),int>, t: main/tree){\n  (match (t) {\n    ((main/Leaf() : main/tree ) as @pat: main/tree)\n       -> std/core/types/local-get<int,(h :: H),<(main/choose :: (E, V) -> V),(div :: X)>>(state);\n    ((@skip main/Node((l: main/tree) : main/tree, (v: int) : int, (r: main/tree) : main/tree) : main/tree ) as @pat@0: main/tree)\n       -> val ev@10039 : (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>;\n          val next : main/tree;\n          val @x-x1@10032 : int;\n          val _ : ();\n          val @x-x2@0@10035 : int;\n      std/core/hnd/@open-none2<int,int,int,(total :: E),<(local :: H -> X)<(h :: H)>,(main/choose :: (E, V) -> V),(div :: X)>>((fn(x@2: int, y@2: int){\n          val y@4@10013 : int;\n          val x@3@10010 : int;\n          (std/core/int/(%)((std/core/int/abs((std/core/int/int-add(x@3@10010, 37)))), 1009));\n        }), v, @x-x2@0@10035);\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/@lift-run@707\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"local-var\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/@lift-run@707"]}, {"name": {"op": "Var","id": "main/@lift-run@708","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/tree"}],"return": {"op": "Int"},"purity": "Effectful"}, {"op": "Ptr","extern_ptr_name": "\"local-var\""}, {"op": "Ptr","extern_ptr_name": "main/tree"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "explore","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/tree"}],"return": {"op": "Int"},"purity": "Effectful"}}, {"op": "Var","id": "state","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}}, {"op": "Var","id": "tree","type": {"op": "Ptr","extern_ptr_name": "main/tree"}}, {"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "getRef(Ref[Ptr]): Ptr","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "state","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}},"annotation": "genExpr: state"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/types/local-get<int,(h :: H),(div :: X)>(state)"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 0}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "xs@10015","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/@handle-choose","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/choose"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: main/@handle-choose<int,<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/@Hnd-choose","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}],"return": {"op": "Ptr","extern_ptr_name": "main/choose"},"purity": "Effectful"}},"annotation": "genExpr: main/@Hnd-choose<<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 3},"annotation": "genExpr: 3"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/Clause0","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Clause0<bool,(main/choose :: (E, V) -> V),<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@_wildcard-x730_16","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/yield-to","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-to<bool,<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/protect","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/protect<(),bool,<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Unit"}},"annotation": "genExpr: std/core/types/Unit"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@_wildcard-x730_55","type": {"op": "Unit"}}, {"op": "Var","id": "r","type": {"op": "Function","params": [{"op": "Bool"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "xs@0@10017","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "r","type": {"op": "Function","params": [{"op": "Bool"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: r"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}]},"annotation": "genExpr: r(std/core/types/True)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"xs@0@10017\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"export_as": ["xs@0@10017"]}, {"name": {"op": "Var","id": "ys@10018","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "r","type": {"op": "Function","params": [{"op": "Bool"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: r"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}]},"annotation": "genExpr: r(std/core/types/False)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"ys@10018\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"export_as": ["ys@10018"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/list","type": {"op": "Ptr"}},"name": "std/core/list/append","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/append<int>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "xs@0@10017","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: xs@0@10017"}, {"op": "DebugWrap","inner": {"op": "Var","id": "ys@10018","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: ys@10018"}]},"annotation": "genExpr: std/core/list/append<int>(xs@0@10017, ys@10018)"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(@_wildcard-x730_55: (), r: (bool) -> <(div :: X),(local :: H -> X)<(616 :: H)>> (list :: V -> V)<int>){\n  val xs@0@10017 : (list :: V -> V)<int>;\n  val ys@10018 : (list :: V -> V)<int>;\n  std/core/list/append<int>(xs@0@10017, ys@10018);\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "k","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: k"}]},"annotation": "genExpr: std/core/hnd/protect<(),bool,<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>(std/core/types/Unit, (fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(@_wildcard-x730_55: (), r: (bool) -> <(div :: X),(local :: H -> X)<(616 :: H)>> (list :: V -> V)<int>){\n    val xs@0@10017 : ((list :: V -> V)<int>);\n    val ys@10018 : ((list :: V -> V)<int>);\n    (std/core/list/append<int>(xs@0@10017, ys@10018));\n  }), k)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(k: ((hnd/resume-result :: (V, V) -> V)<bool,(list :: V -> V)<int>>) -> <(div :: X),(local :: H -> X)<(616 :: H)>> (list :: V -> V)<int>){\n  std/core/hnd/protect<(),bool,<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>(std/core/types/Unit, (fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(@_wildcard-x730_55: (), r: (bool) -> <(div :: X),(local :: H -> X)<(616 :: H)>> (list :: V -> V)<int>){\n      val xs@0@10017 : ((list :: V -> V)<int>);\n      val ys@10018 : ((list :: V -> V)<int>);\n      (std/core/list/append<int>(xs@0@10017, ys@10018));\n    }), k);\n}"}]},"annotation": "genExpr: std/core/hnd/yield-to<bool,<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>(m, (fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(k: ((hnd/resume-result :: (V, V) -> V)<bool,(list :: V -> V)<int>>) -> <(div :: X),(local :: H -> X)<(616 :: H)>> (list :: V -> V)<int>){\n    (std/core/hnd/protect<(),bool,<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>(std/core/types/Unit, (fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(@_wildcard-x730_55: (), r: (bool) -> <(div :: X),(local :: H -> X)<(616 :: H)>> (list :: V -> V)<int>){\n        val xs@0@10017 : ((list :: V -> V)<int>);\n        val ys@10018 : ((list :: V -> V)<int>);\n        (std/core/list/append<int>(xs@0@10017, ys@10018));\n      }), k));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(m: (hnd/marker :: (E, V) -> V)<<(div :: X),(local :: H -> X)<(616 :: H)>>,(list :: V -> V)<int>>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>){\n  std/core/hnd/yield-to<bool,<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>(m, (fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(k: ((hnd/resume-result :: (V, V) -> V)<bool,(list :: V -> V)<int>>) -> <(div :: X),(local :: H -> X)<(616 :: H)>> (list :: V -> V)<int>){\n      (std/core/hnd/protect<(),bool,<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>(std/core/types/Unit, (fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(@_wildcard-x730_55: (), r: (bool) -> <(div :: X),(local :: H -> X)<(616 :: H)>> (list :: V -> V)<int>){\n          val xs@0@10017 : ((list :: V -> V)<int>);\n          val ys@10018 : ((list :: V -> V)<int>);\n          (std/core/list/append<int>(xs@0@10017, ys@10018));\n        }), k));\n    }));\n}"}]},"annotation": "genExpr: std/core/hnd/Clause0<bool,(main/choose :: (E, V) -> V),<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>((fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(m: (hnd/marker :: (E, V) -> V)<<(div :: X),(local :: H -> X)<(616 :: H)>>,(list :: V -> V)<int>>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>){\n  (std/core/hnd/yield-to<bool,<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>(m, (fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(k: ((hnd/resume-result :: (V, V) -> V)<bool,(list :: V -> V)<int>>) -> <(div :: X),(local :: H -> X)<(616 :: H)>> (list :: V -> V)<int>){\n      (std/core/hnd/protect<(),bool,<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>(std/core/types/Unit, (fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(@_wildcard-x730_55: (), r: (bool) -> <(div :: X),(local :: H -> X)<(616 :: H)>> (list :: V -> V)<int>){\n          val xs@0@10017 : ((list :: V -> V)<int>);\n          val ys@10018 : ((list :: V -> V)<int>);\n          (std/core/list/append<int>(xs@0@10017, ys@10018));\n        }), k));\n    })));\n}))"}]},"annotation": "genExpr: main/@Hnd-choose<<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>(3, (std/core/hnd/Clause0<bool,(main/choose :: (E, V) -> V),<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>((fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(m: (hnd/marker :: (E, V) -> V)<<(div :: X),(local :: H -> X)<(616 :: H)>>,(list :: V -> V)<int>>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>){\n    (std/core/hnd/yield-to<bool,<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>(m, (fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(k: ((hnd/resume-result :: (V, V) -> V)<bool,(list :: V -> V)<int>>) -> <(div :: X),(local :: H -> X)<(616 :: H)>> (list :: V -> V)<int>){\n        (std/core/hnd/protect<(),bool,<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>(std/core/types/Unit, (fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(@_wildcard-x730_55: (), r: (bool) -> <(div :: X),(local :: H -> X)<(616 :: H)>> (list :: V -> V)<int>){\n            val xs@0@10017 : ((list :: V -> V)<int>);\n            val ys@10018 : ((list :: V -> V)<int>);\n            (std/core/list/append<int>(xs@0@10017, ys@10018));\n          }), k));\n      })));\n  }))))"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x@0","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<int>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x@0","type": {"op": "Int"}},"annotation": "genExpr: x@0"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<int>"}]},"annotation": "genExpr: std/core/types/Cons<int>(x@0, (std/core/types/Nil<int>))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(x@0: int){\n  std/core/types/Cons<int>(x@0, (std/core/types/Nil<int>));\n}"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "explore","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/tree"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: explore"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "tree","type": {"op": "Ptr","extern_ptr_name": "main/tree"}},"annotation": "genExpr: tree"}]},"annotation": "genExpr: explore(tree)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(main/choose :: (E, V) -> V),(div :: X),(local :: H -> X)<(h :: H)>>>(){\n  explore(tree);\n}"}]},"annotation": "genExpr: main/@handle-choose<int,<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>((main/@Hnd-choose<<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>(3, (std/core/hnd/Clause0<bool,(main/choose :: (E, V) -> V),<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>((fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(m: (hnd/marker :: (E, V) -> V)<<(div :: X),(local :: H -> X)<(616 :: H)>>,(list :: V -> V)<int>>, @_wildcard-x730_16: (hnd/ev :: ((E, V) -> V) -> V)<(main/choose :: (E, V) -> V)>){\n      (std/core/hnd/yield-to<bool,<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>(m, (fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(k: ((hnd/resume-result :: (V, V) -> V)<bool,(list :: V -> V)<int>>) -> <(div :: X),(local :: H -> X)<(616 :: H)>> (list :: V -> V)<int>){\n          (std/core/hnd/protect<(),bool,<(div :: X),(local :: H -> X)<(h :: H)>>,(list :: V -> V)<int>>(std/core/types/Unit, (fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(@_wildcard-x730_55: (), r: (bool) -> <(div :: X),(local :: H -> X)<(616 :: H)>> (list :: V -> V)<int>){\n              val xs@0@10017 : ((list :: V -> V)<int>);\n              val ys@10018 : ((list :: V -> V)<int>);\n              (std/core/list/append<int>(xs@0@10017, ys@10018));\n            }), k));\n        })));\n    }))))), (fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(x@0: int){\n    (std/core/types/Cons<int>(x@0, (std/core/types/Nil<int>)));\n  }), (fn<<(main/choose :: (E, V) -> V),(div :: X),(local :: H -> X)<(h :: H)>>>(){\n    (explore(tree));\n  }))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"xs@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"export_as": ["xs@10015"]}, {"name": {"op": "Var","id": "_@0","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "setRef(Ref[Ptr], Ptr): Unit","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "state","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}},"annotation": "genExpr: state"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs@10015","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x22","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"value": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x22","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"23","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"23","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-default@3236: int) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"23\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-default@3236"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x22\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-default@3236,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"23\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-default@3236: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"23\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x22\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"23\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x22","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x22\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x22\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/types/@None<int>)) {\n  ((std/core/types/@Optional((@uniq-default@3236: int) : int) : ? int ) as @pat: ? int)\n     -> @uniq-default@3236;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n     -> 0;\n}"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs@10015","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"24","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"25","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/list","type": {"op": "Ptr"}},"name": "std/core/list/foldl","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/foldl<int,int,(total :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"25","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<int>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"25\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"24","type": {"op": "Top"}},"annotation": "genTest: normal: (x: int) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"24\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/int","type": {"op": "Ptr"}},"name": "std/core/int/max","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/core/int/max"}]},"annotation": "genExpr: std/core/list/foldl<int,int,(total :: E)>(xx, x, std/core/int/max)"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"24\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"25\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<int>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"24\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"25\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (xs@10015) {\n  ((std/core/types/Nil() : (list :: V -> V)<int> ) as @pat@1: ((list :: V -> V)<int>))\n     -> (match ((std/core/types/@None<int>)) {\n      ((std/core/types/@Optional((@uniq-default@3236: int) : int) : ? int ) as @pat: ? int)\n         -> @uniq-default@3236;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n         -> 0;\n    });\n  ((@skip std/core/types/Cons((x: int) : int, (xx: (list :: V -> V)<int>) : (list :: V -> V)<int>) : (list :: V -> V)<int> ) as @pat@2: ((list :: V -> V)<int>))\n     -> std/core/list/foldl<int,int,(total :: E)>(xx, x, std/core/int/max);\n}"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/types/local-set<int,(div :: X),(h :: H)>(state, (match (xs@10015) {\n    ((std/core/types/Nil() : (list :: V -> V)<int> ) as @pat@1: ((list :: V -> V)<int>))\n       -> (match ((std/core/types/@None<int>)) {\n        ((std/core/types/@Optional((@uniq-default@3236: int) : int) : ? int ) as @pat: ? int)\n           -> @uniq-default@3236;\n        ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n           -> 0;\n      });\n    ((@skip std/core/types/Cons((x: int) : int, (xx: (list :: V -> V)<int>) : (list :: V -> V)<int>) : (list :: V -> V)<int> ) as @pat@2: ((list :: V -> V)<int>))\n       -> std/core/list/foldl<int,int,(total :: E)>(xx, x, std/core/int/max);\n  }))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_@0\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_@0"]}, {"name": {"op": "Var","id": "i@0@10019","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub(i, 1)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"i@0@10019\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["i@0@10019"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/@lift-run@708","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/tree"}],"return": {"op": "Int"},"purity": "Effectful"}, {"op": "Ptr","extern_ptr_name": "\"local-var\""}, {"op": "Ptr","extern_ptr_name": "main/tree"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: main/@lift-run@708<(h :: H)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "explore","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/tree"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: explore"}, {"op": "DebugWrap","inner": {"op": "Var","id": "state","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}},"annotation": "genExpr: state"}, {"op": "DebugWrap","inner": {"op": "Var","id": "tree","type": {"op": "Ptr","extern_ptr_name": "main/tree"}},"annotation": "genExpr: tree"}, {"op": "DebugWrap","inner": {"op": "Var","id": "i@0@10019","type": {"op": "Int"}},"annotation": "genExpr: i@0@10019"}]},"annotation": "genExpr: main/@lift-run@708<(h :: H)>(explore, state, tree, i@0@10019)"}},"annotation": "genExpr: val xs@10015 : (list :: V -> V)<int>;\nval _@0 : ();\nval i@0@10019 : int;\nmain/@lift-run@708<(h :: H)>(explore, state, tree, i@0@10019)"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Primitive\",\"name\": \"infixEq(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(h :: H)> fn<<(div :: X),(local :: H -> X)<(h :: H)>>>(explore: (t : main/tree) -> <(main/choose :: (E, V) -> V),(div :: X),(local :: H -> X)<(h :: H)>> int, state: (local-var :: (H, V) -> V)<(h :: H),int>, tree: main/tree, i: int){\n  (match ((std/core/int/(==)(i, 0))) {\n    ((std/core/types/True() : bool ) as @pat@3: bool)\n       -> std/core/types/local-get<int,(h :: H),(div :: X)>(state);\n    ((@skip std/core/types/False() : bool ) as @pat@4: bool)\n       -> val xs@10015 : (list :: V -> V)<int>;\n          val _@0 : ();\n          val i@0@10019 : int;\n      main/@lift-run@708<(h :: H)>(explore, state, tree, i@0@10019);\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/@lift-run@708\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"local-var\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/@lift-run@708"]}, {"name": {"op": "Var","id": "main/run","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "n","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "tree","type": {"op": "Ptr","extern_ptr_name": "main/tree"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/make","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "main/tree"},"purity": "Effectful"}},"annotation": "genExpr: main/make"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "n","type": {"op": "Int"}},"annotation": "genExpr: n"}]},"annotation": "genExpr: main/make(n)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"tree\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}"},"export_as": ["tree"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/local-var","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"local-var\""}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/local-var<int,int,(div :: X),(h :: H)>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "state","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/@lift-run@708","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/tree"}],"return": {"op": "Int"},"purity": "Effectful"}, {"op": "Ptr","extern_ptr_name": "\"local-var\""}, {"op": "Ptr","extern_ptr_name": "main/tree"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: main/@lift-run@708<(h :: H)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "t","type": {"op": "Ptr","extern_ptr_name": "main/tree"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/@lift-run@707","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"local-var\""}, {"op": "Ptr","extern_ptr_name": "main/tree"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: main/@lift-run@707<(h :: H)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "state","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}},"annotation": "genExpr: state"}, {"op": "DebugWrap","inner": {"op": "Var","id": "t","type": {"op": "Ptr","extern_ptr_name": "main/tree"}},"annotation": "genExpr: t"}]},"annotation": "genExpr: main/@lift-run@707<(h :: H)>(state, t)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(local :: H -> X)<(h :: H)>,(main/choose :: (E, V) -> V),(div :: X)>>(t: main/tree){\n  main/@lift-run@707<(h :: H)>(state, t);\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "state","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}},"annotation": "genExpr: state"}, {"op": "DebugWrap","inner": {"op": "Var","id": "tree","type": {"op": "Ptr","extern_ptr_name": "main/tree"}},"annotation": "genExpr: tree"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 10},"annotation": "genExpr: 10"}]},"annotation": "genExpr: main/@lift-run@708<(h :: H)>((fn<<(local :: H -> X)<(h :: H)>,(main/choose :: (E, V) -> V),(div :: X)>>(t: main/tree){\n    (main/@lift-run@707<(h :: H)>(state, t));\n  }), state, tree, 10)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(state: (local-var :: (H, V) -> V)<(616 :: H),int>){\n  main/@lift-run@708<(h :: H)>((fn<<(local :: H -> X)<(h :: H)>,(main/choose :: (E, V) -> V),(div :: X)>>(t: main/tree){\n      (main/@lift-run@707<(h :: H)>(state, t));\n    }), state, tree, 10);\n}"}]},"annotation": "genExpr: std/core/hnd/local-var<int,int,(div :: X),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(state: (local-var :: (H, V) -> V)<(616 :: H),int>){\n    (main/@lift-run@708<(h :: H)>((fn<<(local :: H -> X)<(h :: H)>,(main/choose :: (E, V) -> V),(div :: X)>>(t: main/tree){\n        (main/@lift-run@707<(h :: H)>(state, t));\n      }), state, tree, 10));\n  }))"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(h :: H)> fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(){\n  val tree : main/tree\n        = main/make(n);\n  std/core/hnd/local-var<int,int,(div :: X),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(state: (local-var :: (H, V) -> V)<(h :: H),int>){\n      (main/@lift-run@708<(h :: H)>((fn<<(local :: H -> X)<(h :: H)>,(main/choose :: (E, V) -> V),(div :: X)>>(t: main/tree){\n          (main/@lift-run@707<(h :: H)>(state, t));\n        }), state, tree, 10));\n    }));\n}"},"args": []},"annotation": "genExpr: (forall<(h :: H)> fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(){\n  val tree : main/tree\n        = main/make(n);\n  std/core/hnd/local-var<int,int,(div :: X),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(state: (local-var :: (H, V) -> V)<(h :: H),int>){\n      (main/@lift-run@708<(h :: H)>((fn<<(local :: H -> X)<(h :: H)>,(main/choose :: (E, V) -> V),(div :: X)>>(t: main/tree){\n          (main/@lift-run@707<(h :: H)>(state, t));\n        }), state, tree, 10));\n    }));\n})()"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(div :: X)>(n: int){\n  (forall<(h :: H)> fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(){\n    val tree : main/tree\n          = main/make(n);\n    std/core/hnd/local-var<int,int,(div :: X),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(state: (local-var :: (H, V) -> V)<(h :: H),int>){\n        (main/@lift-run@708<(h :: H)>((fn<<(local :: H -> X)<(h :: H)>,(main/choose :: (E, V) -> V),(div :: X)>>(t: main/tree){\n            (main/@lift-run@707<(h :: H)>(state, t));\n          }), state, tree, 10));\n      }));\n  })();\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/run\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/run"]}, {"name": {"op": "Var","id": "main/main","type": {"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "xs@10025","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/os/env","type": {"op": "Ptr"}},"name": "std/os/env/get-args","type": {"op": "Function","params": [],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/os/env/get-args"},"args": []},"annotation": "genExpr: std/os/env/get-args()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"xs@10025\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"export_as": ["xs@10025"]}, {"name": {"op": "Var","id": "m@10023","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/int","type": {"op": "Ptr"}},"name": "std/core/int/parse-int","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/int/parse-int"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs@10025","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"22","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"23","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"22","type": {"op": "Top"}},"annotation": "genTest: normal: (x@0: string) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"22\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x@0"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs@10025\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"22\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"22\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"23\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs@10025\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"22\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs@10025","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}}]},"annotation": "genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"xs@10025\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs@10025\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (xs@10025) {\n  ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> x@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n     -> \"\";\n}"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"annotation": "genExpr: std/core/types/@None<bool>"}]},"annotation": "genExpr: std/core/int/parse-int((match (xs@10025) {\n    ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n       -> x@0;\n    ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n       -> \"\";\n  }), (std/core/types/@None<bool>))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"m@10023\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}"},"export_as": ["m@10023"]}, {"name": {"op": "Var","id": "r","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "tree","type": {"op": "Ptr","extern_ptr_name": "main/tree"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/make","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "main/tree"},"purity": "Effectful"}},"annotation": "genExpr: main/make"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "m@10023","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 5},"annotation": "genExpr: 5"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"m@10023\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"m@10023\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "m@10023","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"24","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Int"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"24","type": {"op": "Top"}},"annotation": "genTest: normal: (x: int) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"24\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"m@10023\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"24\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"m@10023\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"24\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (m@10023) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n     -> 5;\n  ((@skip std/core/types/Just((x: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n     -> x;\n}"}]},"annotation": "genExpr: main/make((match (m@10023) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n     -> 5;\n  ((@skip std/core/types/Just((x: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n     -> x;\n}))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"tree\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/tree\"}}"},"export_as": ["tree"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/local-var","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"local-var\""}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/local-var<int,int,(div :: X),(h :: H)>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "state","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/@lift-run@708","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/tree"}],"return": {"op": "Int"},"purity": "Effectful"}, {"op": "Ptr","extern_ptr_name": "\"local-var\""}, {"op": "Ptr","extern_ptr_name": "main/tree"}, {"op": "Int"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: main/@lift-run@708<(h :: H)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "t","type": {"op": "Ptr","extern_ptr_name": "main/tree"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "main/@lift-run@707","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"local-var\""}, {"op": "Ptr","extern_ptr_name": "main/tree"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: main/@lift-run@707<(h :: H)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "state","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}},"annotation": "genExpr: state"}, {"op": "DebugWrap","inner": {"op": "Var","id": "t","type": {"op": "Ptr","extern_ptr_name": "main/tree"}},"annotation": "genExpr: t"}]},"annotation": "genExpr: main/@lift-run@707<(h :: H)>(state, t)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(local :: H -> X)<(h :: H)>,(main/choose :: (E, V) -> V),(div :: X)>>(t: main/tree){\n  main/@lift-run@707<(h :: H)>(state, t);\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "state","type": {"op": "Ptr","extern_ptr_name": "\"local-var\""}},"annotation": "genExpr: state"}, {"op": "DebugWrap","inner": {"op": "Var","id": "tree","type": {"op": "Ptr","extern_ptr_name": "main/tree"}},"annotation": "genExpr: tree"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 10},"annotation": "genExpr: 10"}]},"annotation": "genExpr: main/@lift-run@708<(h :: H)>((fn<<(local :: H -> X)<(h :: H)>,(main/choose :: (E, V) -> V),(div :: X)>>(t: main/tree){\n    (main/@lift-run@707<(h :: H)>(state, t));\n  }), state, tree, 10)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(state: (local-var :: (H, V) -> V)<(616 :: H),int>){\n  main/@lift-run@708<(h :: H)>((fn<<(local :: H -> X)<(h :: H)>,(main/choose :: (E, V) -> V),(div :: X)>>(t: main/tree){\n      (main/@lift-run@707<(h :: H)>(state, t));\n    }), state, tree, 10);\n}"}]},"annotation": "genExpr: std/core/hnd/local-var<int,int,(div :: X),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(state: (local-var :: (H, V) -> V)<(616 :: H),int>){\n    (main/@lift-run@708<(h :: H)>((fn<<(local :: H -> X)<(h :: H)>,(main/choose :: (E, V) -> V),(div :: X)>>(t: main/tree){\n        (main/@lift-run@707<(h :: H)>(state, t));\n      }), state, tree, 10));\n  }))"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(h :: H)> fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(){\n  val tree : main/tree\n        = main/make((match (m@10023) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n             -> 5;\n          ((@skip std/core/types/Just((x: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n             -> x;\n        }));\n  std/core/hnd/local-var<int,int,(div :: X),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(state: (local-var :: (H, V) -> V)<(h :: H),int>){\n      (main/@lift-run@708<(h :: H)>((fn<<(local :: H -> X)<(h :: H)>,(main/choose :: (E, V) -> V),(div :: X)>>(t: main/tree){\n          (main/@lift-run@707<(h :: H)>(state, t));\n        }), state, tree, 10));\n    }));\n}"},"args": []},"annotation": "genExpr: (forall<(h :: H)> fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(){\n  val tree : main/tree\n        = main/make((match (m@10023) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n             -> 5;\n          ((@skip std/core/types/Just((x: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n             -> x;\n        }));\n  std/core/hnd/local-var<int,int,(div :: X),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(state: (local-var :: (H, V) -> V)<(h :: H),int>){\n      (main/@lift-run@708<(h :: H)>((fn<<(local :: H -> X)<(h :: H)>,(main/choose :: (E, V) -> V),(div :: X)>>(t: main/tree){\n          (main/@lift-run@707<(h :: H)>(state, t));\n        }), state, tree, 10));\n    }));\n})()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"r\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["r"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/console","type": {"op": "Ptr"}},"name": "std/core/console/printsln","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: std/core/console/printsln"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/int","type": {"op": "Ptr"}},"name": "std/core/int/show","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/int/show"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "r","type": {"op": "Int"}},"annotation": "genExpr: r"}]},"annotation": "genExpr: std/core/int/show(r)"}]},"annotation": "genExpr: std/core/console/printsln((std/core/int/show(r)))"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(console/console :: X),(div :: X),(ndet :: X)>>(){\n  val xs@10025 : (list :: V -> V)<string>;\n  val m@10023 : (maybe :: V -> V)<int>;\n  val r : int;\n  std/core/console/printsln((std/core/int/show(r)));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"main/main\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["main/main"]}, {"name": {"op": "Var","id": "main/@Hnd-choose","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}],"return": {"op": "Ptr","extern_ptr_name": "main/choose"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@cfc","type": {"op": "Int"}}, {"op": "Var","id": "@ctl-choose","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}],"body": {"op": "Construct","type_tag": "main/choose","tag": "main/@Hnd-choose","args": [{"op": "Var","id": "@cfc","type": {"op": "Int"}}, {"op": "Var","id": "@ctl-choose","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause0"}}]}},"annotation": "genConstr"},"export_as": ["main/@Hnd-choose"]}, {"name": {"op": "Var","id": "main/Leaf","type": {"op": "Ptr","extern_ptr_name": "main/tree"}},"value": {"op": "DebugWrap","inner": {"op": "Construct","type_tag": "main/tree","tag": "main/Leaf","args": []},"annotation": "genConstr"},"export_as": ["main/Leaf"]}, {"name": {"op": "Var","id": "main/Node","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "main/tree"}, {"op": "Int"}, {"op": "Ptr","extern_ptr_name": "main/tree"}],"return": {"op": "Ptr","extern_ptr_name": "main/tree"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "left","type": {"op": "Ptr","extern_ptr_name": "main/tree"}}, {"op": "Var","id": "value","type": {"op": "Int"}}, {"op": "Var","id": "right","type": {"op": "Ptr","extern_ptr_name": "main/tree"}}],"body": {"op": "Construct","type_tag": "main/tree","tag": "main/Node","args": [{"op": "Var","id": "left","type": {"op": "Ptr","extern_ptr_name": "main/tree"}}, {"op": "Var","id": "value","type": {"op": "Int"}}, {"op": "Var","id": "right","type": {"op": "Ptr","extern_ptr_name": "main/tree"}}]}},"annotation": "genConstr"},"export_as": ["main/Node"]}],"main": {"op": "Primitive","name": "!undefined:is a library","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}}}