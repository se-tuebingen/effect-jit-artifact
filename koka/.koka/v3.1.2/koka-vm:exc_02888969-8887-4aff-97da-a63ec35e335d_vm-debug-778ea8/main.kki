module interface main
 
//------------------------------
//#kki: import declarations
 
import std/core/types = std/core/types pub = "";
import std/core/hnd = std/core/hnd pub = "";
import std/core/exn = std/core/exn pub = "";
import std/core/bool = std/core/bool pub = "";
import std/core/order = std/core/order pub = "";
import std/core/char = std/core/char pub = "";
import std/core/int = std/core/int pub = "";
import std/core/vector = std/core/vector pub = "";
import std/core/string = std/core/string pub = "";
import std/core/sslice = std/core/sslice pub = "";
import std/core/list = std/core/list pub = "";
import std/core/maybe = std/core/maybe pub = "";
import std/core/either = std/core/either pub = "";
import std/core/tuple = std/core/tuple pub = "";
import std/core/show = std/core/show pub = "";
import std/core/debug = std/core/debug pub = "";
import std/core/delayed = std/core/delayed pub = "";
import std/core/console = std/core/console pub = "";
import std/core = std/core = "";
import std/os/env = std/os/env = "";
 
//------------------------------
//#kki: external imports
 
 
//------------------------------
//#kki: fixity declarations
 
 
//------------------------------
//#kki: local imported aliases
 
 
//------------------------------
//#kki: type declarations
 

// Operations:
// ```koka
// ctl exc
// ```
recursive effect type exc[5,1,5,10] <(e :: E),a> :: (E, V) -> V {
  con @Hnd-exc[5,1,5,10](@cfc: std/core/types/int, @ctl-exc: (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(exc :: (E, V) -> V),(e :: E),a>){0,2,8} : forall<(e :: E),a> (std/core/types/int, (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(exc :: (E, V) -> V),(e :: E),a>) -> (exc :: (E, V) -> V)<(e :: E),a>;
};
 
//------------------------------
//#kki: declarations
 
// Automatically generated. Retrieves the `@cfc` constructor field of the `:exc` type.
 fun exc/@cfc[5,1,5,10] : forall<(e :: E),a> (^ exc : (exc :: (E, V) -> V)<(e :: E),a>) -> std/core/types/int;
// Automatically generated. Retrieves the `@ctl-exc` constructor field of the `:exc` type.
 fun exc/@ctl-exc[6,7,6,17] : forall<(e :: E),a> (^ exc : (exc :: (E, V) -> V)<(e :: E),a>) -> (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(exc :: (E, V) -> V),(e :: E),a>;
// runtime tag for the effect `:exc`
val @tag-exc[5,1,5,10] : (std/core/hnd/htag :: ((E, V) -> V) -> V)<(exc :: (E, V) -> V)>;
// handler for the effect `:exc`
 fun @handle-exc[5,8,5,10] : forall<a,(e :: E),b> (hnd : (exc :: (E, V) -> V)<(e :: E),b>, ret : (res : a) -> (e :: E) b, action : () -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(exc :: (E, V) -> V)>|(e :: E)> a) -> (e :: E) b;
// select `exc` operation out of effect `:exc`
 fun @select-exc[6,7,6,17] : forall<(e :: E),a> (^ hnd : (exc :: (E, V) -> V)<(e :: E),a>) -> (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(exc :: (E, V) -> V),(e :: E),a>;
// Call the `ctl exc` operation of the effect `:exc`
 fun exc[6,7,6,9] : () -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(exc :: (E, V) -> V)>> ();
 fun inner[8,14,8,18] : () -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(exc :: (E, V) -> V)>> ();
 fun outer[11,5,11,9] : () -> ();
 fun run[18,5,18,7] : (n : std/core/types/int) -> <(std/core/types/div :: X)> std/core/types/int;
pub  fun main[25,9,25,12] : () -> <(std/core/console/console :: X),(std/core/types/div :: X),(std/core/types/ndet :: X)> ();
 
//------------------------------
//#kki: external declarations
 
 
//------------------------------
//#kki: inline definitions
 
//.inline-section
inline borrow "^"  fun exc/@cfc // inline size: 0
  = forall<(e :: E),a> fn(exc@0: (exc :: (E, V) -> V)<(e :: E),a>){
    (match (exc@0) {
      ((@skip main/@Hnd-exc((@x: std/core/types/int) : std/core/types/int, (@pat@0: (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(exc :: (E, V) -> V),(e :: E),a>) : (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(exc :: (E, V) -> V),(e :: E),a>) : (exc :: (E, V) -> V)<(e :: E),a> ) as @pat: ((exc :: (E, V) -> V)<(e :: E),a>))
         -> @x;
    });
  };
inline borrow "^"  fun exc/@ctl-exc // inline size: 0
  = forall<(e :: E),a> fn(exc@0: (exc :: (E, V) -> V)<(e :: E),a>){
    (match (exc@0) {
      ((@skip main/@Hnd-exc((@pat@0: std/core/types/int) : std/core/types/int, (@x: (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(exc :: (E, V) -> V),(e :: E),a>) : (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(exc :: (E, V) -> V),(e :: E),a>) : (exc :: (E, V) -> V)<(e :: E),a> ) as @pat: ((exc :: (E, V) -> V)<(e :: E),a>))
         -> @x;
    });
  };
inline borrow "^"  fun @select-exc // inline size: 0
  = forall<(e :: E),a> fn(hnd: (exc :: (E, V) -> V)<(e :: E),a>){
    (match (hnd) {
      ((@skip main/@Hnd-exc((@pat@0: std/core/types/int) : std/core/types/int, (@ctl-exc: (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(exc :: (E, V) -> V),(e :: E),a>) : (std/core/hnd/clause0 :: (V, (E, V) -> V, E, V) -> V)<(),(exc :: (E, V) -> V),(e :: E),a>) : (exc :: (E, V) -> V)<(e :: E),a> ) as @pat: ((exc :: (E, V) -> V)<(e :: E),a>))
         -> @ctl-exc;
    });
  };
inline  fun exc // inline size: 5
  = fn<<(std/core/types/handled :: ((E, V) -> V) -> X)<(exc :: (E, V) -> V)>>>(){
    std/core/hnd/@perform0<(),<(std/core/types/handled :: ((E, V) -> V) -> X)<(exc :: (E, V) -> V)>>,(exc :: (E, V) -> V)>((std/core/types/@open<(std/core/types/total :: E),<(std/core/types/handled :: ((E, V) -> V) -> X)<(exc :: (E, V) -> V)>>,(i : std/core/hnd/ev-index) -> (std/core/hnd/ev :: ((E, V) -> V) -> V)<(exc :: (E, V) -> V)>,(i : std/core/hnd/ev-index) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(exc :: (E, V) -> V)>> (std/core/hnd/ev :: ((E, V) -> V) -> V)<(exc :: (E, V) -> V)>>((std/core/hnd/@evv-at<(exc :: (E, V) -> V)>))((std/core/types/@open<(std/core/types/total :: E),<(std/core/types/handled :: ((E, V) -> V) -> X)<(exc :: (E, V) -> V)>>,(i : std/core/types/int) -> std/core/types/ssize_t,(i : std/core/types/int) -> <(std/core/types/handled :: ((E, V) -> V) -> X)<(exc :: (E, V) -> V)>> std/core/types/ssize_t>(std/core/types/@make-ssize_t)(0)))), main/@select-exc);
  };
 fun outer // inline size: 3
  = fn(){
    main/@handle-exc<(),(std/core/types/total :: E),()>((main/@Hnd-exc<(std/core/types/total :: E),()>(3, (std/core/hnd/clause-control0<(),(std/core/types/total :: E),(exc :: (E, V) -> V),()>((fn(resume: (()) -> ()){
          std/core/types/Unit;
        }))))), (fn(x: ()){
        x;
      }), main/inner);
  };