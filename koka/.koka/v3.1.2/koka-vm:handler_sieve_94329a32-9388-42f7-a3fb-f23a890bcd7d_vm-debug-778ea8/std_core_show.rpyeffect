{"blocks":[{"label":"0([mcore:[#136]#3])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/show/@extern-gshow<a>(@arg-x1)","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/show/@extern-gshow"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/show/@extern-gshow<a>(@arg-x1)","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1([mcore:[#137]#6])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/show/@extern-int-show-hex"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"2([mcore:[#138]#9])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/(++)"}]},
{"label":"3([mcore:[#145]#15])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/(++)"}]},
{"label":"4([mcore:[#148]#21])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"CallLib","lib":3,"symbol":"std/core/string/pad-left"}]},
{"label":"5([mcore:[#155]#28])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/@Optional"}]},
{"label":"6([k@[k@[k@[k@[#48]#51]#59]#65]#71])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":2}]},
{"label":"7([k@[k@[k@[#48]#51]#59]#65])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":6,"args":{"any":[1]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Copy","from":3,"to":2},
{"op":"Jump","target":3}]},
{"label":"8([k@[k@[#48]#51]#59])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Push","target":7,"args":{"any":[1,2]}},
{"op":"Copy","from":4,"to":1},
{"op":"Copy","from":0,"to":2},
{"op":"Copy","from":3,"to":0},
{"op":"Copy","from":5,"to":3},
{"op":"Jump","target":4}]},
{"label":"9([k@[#48]#51])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@Optional<char>('0')","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: '0'","traced":{"any":[]}},
{"op":"Const","format":"string","out":4,"value":"0"},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Push","target":8,"args":{"any":[1,2,3,0]}},
{"op":"Copy","from":5,"to":1},
{"op":"Copy","from":4,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: '0'","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@Optional<char>('0')","traced":{"any":[]}},
{"op":"Jump","target":5}]},
{"label":"10([match_def@[match_def@[#48]#76]#77])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"11([#78])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 1","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"12([match_def@[#48]#76])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@None","target":11,"args":{"any":[]}}],"default":{"tag":"cdc7df2c-ff50-4cc1-9dd6-171c265fb346#[Missing Tag#848]","target":10,"args":{"any":[]}}}]},
{"label":"13([match_std/core/types/@Optional@[#48]#81])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-width@58,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"2\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-width@58: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-width@58,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"2\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-width@58: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"14([#48])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match (width) {\n  ((std/core/types/@Optional((@uniq-width@58: int) : int) : ? int ) as @pat: ? int)\n     -> @uniq-width@58;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n     -> 1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"2\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":9,"args":{"any":[2,3,0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"width\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"2\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (width) {\n  ((std/core/types/@Optional((@uniq-width@58: int) : int) : ? int ) as @pat: ? int)\n     -> @uniq-width@58;\n  ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n     -> 1;\n}","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":13,"args":{"any":[1]}}],"default":{"tag":"cdc7df2c-ff50-4cc1-9dd6-171c265fb346#[Missing Tag#849]","target":12,"args":{"any":[]}}}]},
{"label":"15([k@[k@[k@[mcore:[#161]#33]#38]#41]#45])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Push","target":14,"args":{"any":[1,2,3]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":4,"to":0},
{"op":"Jump","target":1}]},
{"label":"16([match_def@[#82]#83])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"17([match_std/core/types/@None@[#82]#84])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"use-capitals\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"use-capitals\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"18([#82])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"use-capitals\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"use-capitals\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@None","target":17,"args":{"any":[]}}],"default":{"tag":"cdc7df2c-ff50-4cc1-9dd6-171c265fb346#[Missing Tag#850]","target":16,"args":{"any":[]}}}]},
{"label":"19([#87])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"use-capitals\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-use-capitals@62,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"1\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-use-capitals@62: bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"use-capitals\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-use-capitals@62,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"1\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-use-capitals@62: bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"20([k@[k@[mcore:[#161]#33]#38]#41])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/pad-left((std/core/show/int-show-hex((std/core/int/abs(i)), (match (use-capitals) {\n      ((std/core/types/@Optional((@uniq-use-capitals@62: bool) : bool) : ? bool ) as @pat@1: ? bool)\n         -> @uniq-use-capitals@62;\n      ((@skip std/core/types/@None() : ? bool ) as @pat@2: ? bool)\n         -> std/core/types/True;\n    }))), (match (width) {\n    ((std/core/types/@Optional((@uniq-width@58: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-width@58;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> 1;\n  }), (std/core/types/@Optional<char>('0')))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/show/int-show-hex((std/core/int/abs(i)), (match (use-capitals) {\n    ((std/core/types/@Optional((@uniq-use-capitals@62: bool) : bool) : ? bool ) as @pat@1: ? bool)\n       -> @uniq-use-capitals@62;\n    ((@skip std/core/types/@None() : ? bool ) as @pat@2: ? bool)\n       -> std/core/types/True;\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/abs(i)","traced":{"any":[]}},
{"op":"PrimOp","name":"abs(Int): Int","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"BGN: genExpr: match (use-capitals) {\n  ((std/core/types/@Optional((@uniq-use-capitals@62: bool) : bool) : ? bool ) as @pat@1: ? bool)\n     -> @uniq-use-capitals@62;\n  ((@skip std/core/types/@None() : ? bool ) as @pat@2: ? bool)\n     -> std/core/types/True;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"use-capitals\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"1\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":15,"args":{"any":[3,4,0,1]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"use-capitals\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"1\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (use-capitals) {\n  ((std/core/types/@Optional((@uniq-use-capitals@62: bool) : bool) : ? bool ) as @pat@1: ? bool)\n     -> @uniq-use-capitals@62;\n  ((@skip std/core/types/@None() : ? bool ) as @pat@2: ? bool)\n     -> std/core/types/True;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/abs(i)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/show/int-show-hex((std/core/int/abs(i)), (match (use-capitals) {\n    ((std/core/types/@Optional((@uniq-use-capitals@62: bool) : bool) : ? bool ) as @pat@1: ? bool)\n       -> @uniq-use-capitals@62;\n    ((@skip std/core/types/@None() : ? bool ) as @pat@2: ? bool)\n       -> std/core/types/True;\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/pad-left((std/core/show/int-show-hex((std/core/int/abs(i)), (match (use-capitals) {\n      ((std/core/types/@Optional((@uniq-use-capitals@62: bool) : bool) : ? bool ) as @pat@1: ? bool)\n         -> @uniq-use-capitals@62;\n      ((@skip std/core/types/@None() : ? bool ) as @pat@2: ? bool)\n         -> std/core/types/True;\n    }))), (match (width) {\n    ((std/core/types/@Optional((@uniq-width@58: int) : int) : ? int ) as @pat: ? int)\n       -> @uniq-width@58;\n    ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n       -> 1;\n  }), (std/core/types/@Optional<char>('0')))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":19,"args":{"any":[1]}}],"default":{"tag":"cdc7df2c-ff50-4cc1-9dd6-171c265fb346#[Missing Tag#851]","target":18,"args":{"any":[]}}}]},
{"label":"21([#89])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"22([#90])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"pre\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"0x\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"0x"},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"0x\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"pre\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"23([match_def@[k@[mcore:[#161]#33]#38]#88])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"pre\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"pre\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@None","target":22,"args":{"any":[]}}],"default":{"tag":"cdc7df2c-ff50-4cc1-9dd6-171c265fb346#[Missing Tag#852]","target":21,"args":{"any":[]}}}]},
{"label":"24([#93])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"pre\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-pre@66,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"0\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-pre@66: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"pre\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-pre@66,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"0\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-pre@66: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"25([k@[mcore:[#161]#33]#38])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/(++)((match (pre) {\n    ((std/core/types/@Optional((@uniq-pre@66: string) : string) : ? string ) as @pat@3: ? string)\n       -> @uniq-pre@66;\n    ((@skip std/core/types/@None() : ? string ) as @pat@4: ? string)\n       -> \"0x\";\n  }), (std/core/string/pad-left((std/core/show/int-show-hex((std/core/int/abs(i)), (match (use-capitals) {\n        ((std/core/types/@Optional((@uniq-use-capitals@62: bool) : bool) : ? bool ) as @pat@1: ? bool)\n           -> @uniq-use-capitals@62;\n        ((@skip std/core/types/@None() : ? bool ) as @pat@2: ? bool)\n           -> std/core/types/True;\n      }))), (match (width) {\n      ((std/core/types/@Optional((@uniq-width@58: int) : int) : ? int ) as @pat: ? int)\n         -> @uniq-width@58;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n         -> 1;\n    }), (std/core/types/@Optional<char>('0')))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (pre) {\n  ((std/core/types/@Optional((@uniq-pre@66: string) : string) : ? string ) as @pat@3: ? string)\n     -> @uniq-pre@66;\n  ((@skip std/core/types/@None() : ? string ) as @pat@4: ? string)\n     -> \"0x\";\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"pre\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"0\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":20,"args":{"any":[1,3,4,0]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"pre\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"0\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (pre) {\n  ((std/core/types/@Optional((@uniq-pre@66: string) : string) : ? string ) as @pat@3: ? string)\n     -> @uniq-pre@66;\n  ((@skip std/core/types/@None() : ? string ) as @pat@4: ? string)\n     -> \"0x\";\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/(++)((match (pre) {\n    ((std/core/types/@Optional((@uniq-pre@66: string) : string) : ? string ) as @pat@3: ? string)\n       -> @uniq-pre@66;\n    ((@skip std/core/types/@None() : ? string ) as @pat@4: ? string)\n       -> \"0x\";\n  }), (std/core/string/pad-left((std/core/show/int-show-hex((std/core/int/abs(i)), (match (use-capitals) {\n        ((std/core/types/@Optional((@uniq-use-capitals@62: bool) : bool) : ? bool ) as @pat@1: ? bool)\n           -> @uniq-use-capitals@62;\n        ((@skip std/core/types/@None() : ? bool ) as @pat@2: ? bool)\n           -> std/core/types/True;\n      }))), (match (width) {\n      ((std/core/types/@Optional((@uniq-width@58: int) : int) : ? int ) as @pat: ? int)\n         -> @uniq-width@58;\n      ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n         -> 1;\n    }), (std/core/types/@Optional<char>('0')))))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":24,"args":{"any":[1]}}],"default":{"tag":"cdc7df2c-ff50-4cc1-9dd6-171c265fb346#[Missing Tag#853]","target":23,"args":{"any":[]}}}]},
{"label":"26([switch case for Bool(true)#94])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Primitive\",\"name\": \"infixLt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"-\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"-"},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"-\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Primitive\",\"name\": \"infixLt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"27([switch case for Bool(false)#101])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@6,{\"op\": \"Primitive\",\"name\": \"infixLt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@6,{\"op\": \"Primitive\",\"name\": \"infixLt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"Int\"},\"value\": 0}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"28([switch default case#104])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"29([switch default case#97])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"PrimOp","name":"infixLt(Int, Int): Boolean","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Switch","arg":0,"values":[false],"targets":[27],"default":28}]},
{"label":"30([mcore:[#161]#33])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4,5]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/(++)((match ((std/core/int/(<)(i, 0))) {\n    ((std/core/types/True() : bool ) as @pat@5: bool)\n       -> \"-\";\n    ((@skip std/core/types/False() : bool ) as @pat@6: bool)\n       -> \"\";\n  }), (std/core/types/(++)((match (pre) {\n      ((std/core/types/@Optional((@uniq-pre@66: string) : string) : ? string ) as @pat@3: ? string)\n         -> @uniq-pre@66;\n      ((@skip std/core/types/@None() : ? string ) as @pat@4: ? string)\n         -> \"0x\";\n    }), (std/core/string/pad-left((std/core/show/int-show-hex((std/core/int/abs(i)), (match (use-capitals) {\n          ((std/core/types/@Optional((@uniq-use-capitals@62: bool) : bool) : ? bool ) as @pat@1: ? bool)\n             -> @uniq-use-capitals@62;\n          ((@skip std/core/types/@None() : ? bool ) as @pat@2: ? bool)\n             -> std/core/types/True;\n        }))), (match (width) {\n        ((std/core/types/@Optional((@uniq-width@58: int) : int) : ? int ) as @pat: ? int)\n           -> @uniq-width@58;\n        ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n           -> 1;\n      }), (std/core/types/@Optional<char>('0')))))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/int/(<)(i, 0))) {\n  ((std/core/types/True() : bool ) as @pat@5: bool)\n     -> \"-\";\n  ((@skip std/core/types/False() : bool ) as @pat@6: bool)\n     -> \"\";\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"int","out":4,"value":0},
{"op":"PrimOp","name":"infixLt(Int, Int): Boolean","out":{"any":[4]},"in":{"any":[0,4]}},
{"op":"Push","target":25,"args":{"any":[0,3,2,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/int/(<)(i, 0))) {\n  ((std/core/types/True() : bool ) as @pat@5: bool)\n     -> \"-\";\n  ((@skip std/core/types/False() : bool ) as @pat@6: bool)\n     -> \"\";\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/(++)((match ((std/core/int/(<)(i, 0))) {\n    ((std/core/types/True() : bool ) as @pat@5: bool)\n       -> \"-\";\n    ((@skip std/core/types/False() : bool ) as @pat@6: bool)\n       -> \"\";\n  }), (std/core/types/(++)((match (pre) {\n      ((std/core/types/@Optional((@uniq-pre@66: string) : string) : ? string ) as @pat@3: ? string)\n         -> @uniq-pre@66;\n      ((@skip std/core/types/@None() : ? string ) as @pat@4: ? string)\n         -> \"0x\";\n    }), (std/core/string/pad-left((std/core/show/int-show-hex((std/core/int/abs(i)), (match (use-capitals) {\n          ((std/core/types/@Optional((@uniq-use-capitals@62: bool) : bool) : ? bool ) as @pat@1: ? bool)\n             -> @uniq-use-capitals@62;\n          ((@skip std/core/types/@None() : ? bool ) as @pat@2: ? bool)\n             -> std/core/types/True;\n        }))), (match (width) {\n        ((std/core/types/@Optional((@uniq-width@58: int) : int) : ? int ) as @pat: ? int)\n           -> @uniq-width@58;\n        ((@skip std/core/types/@None() : ? int ) as @pat@0: ? int)\n           -> 1;\n      }), (std/core/types/@Optional<char>('0')))))))","traced":{"any":[]}},
{"op":"Switch","arg":4,"values":[true],"targets":[26],"default":29}]},
{"label":"31([mcore:[#178]#105])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/(++)"}]},
{"label":"32([mcore:[#183]#111])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/@Optional"}]},
{"label":"33([mcore:[#189]#116])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/@Optional"}]},
{"label":"34([mcore:[#196]#121])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/(++)"}]},
{"label":"35([mcore:[#201]#127])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/@Optional"}]},
{"label":"36([mcore:[#207]#132])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/@Optional"}]},
{"label":"37([mcore:[#212]#137])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/(++)"}]},
{"label":"38([mcore:[#217]#143])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/@Optional"}]},
{"label":"39([mcore:[#223]#148])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/@Optional"}]},
{"label":"40([mcore:[#244]#153])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/(++)"}]},
{"label":"41([mcore:[#249]#159])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/@Optional"}]},
{"label":"42([mcore:[#255]#164])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/@Optional"}]},
{"label":"43([mcore:[#262]#169])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/(++)"}]},
{"label":"44([mcore:[#267]#175])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/@Optional"}]},
{"label":"45([mcore:[#273]#180])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/@Optional"}]},
{"label":"46([mcore:[#278]#185])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/(++)"}]},
{"label":"47([mcore:[#283]#191])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/@Optional"}]},
{"label":"48([mcore:[#289]#196])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/@Optional"}]},
{"label":"49([mcore:[#308]#201])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/string/char/string"}]},
{"label":"50([k@[switch case for Bool(true)#210]#215])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"51([switch case for Bool(true)#217])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\n\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\\x5Cn\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"\\n"},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\\x5Cn\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\n\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"52([k@[switch case for Bool(false)#224]#229])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"53([switch case for Bool(true)#231])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\r\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\\x5Cr\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"\\r"},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\\x5Cr\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\r\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"54([k@[switch case for Bool(false)#238]#243])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"55([switch case for Bool(true)#245])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@6,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\t\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\\x5Ct\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"\\t"},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\\x5Ct\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@6,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\t\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"56([k@[switch case for Bool(false)#252]#257])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"57([k@[k@[#280]#289]#295])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"58([k@[#280]#289])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":31}]},
{"label":"59([#280])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Const","format":"string","out":6,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[6]},"in":{"any":[6]}},
{"op":"Push","target":58,"args":{"any":[2]}},
{"op":"Copy","from":4,"to":2},
{"op":"Copy","from":5,"to":4},
{"op":"Copy","from":6,"to":5},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Jump","target":30}]},
{"label":"60([k@[switch case for Bool(true)#259]#268])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@None<bool>","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@Optional<string>(\"\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":4,"value":""},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Push","target":59,"args":{"any":[1,2,0,3]}},
{"op":"Copy","from":5,"to":1},
{"op":"Copy","from":4,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@Optional<string>(\"\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@None<bool>","traced":{"any":[]}},
{"op":"Jump","target":33}]},
{"label":"61([switch case for Bool(true)#259])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@8,{\"op\": \"Var\",\"id\": \"@x3\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val @arg-x229 : int\n      = std/core/char/int(c);\nstd/core/types/(++)(\"\\x5Cx\", (std/core/show/show-hex(@arg-x229, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@arg-x229\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/char/int(c)","traced":{"any":[]}},
{"op":"PrimOp","name":"#1","out":{"any":[0]},"in":{"any":[1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/(++)(\"\\x5Cx\", (std/core/show/show-hex(@arg-x229, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\\x5Cx\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"\\x"},
{"op":"Debug","msg":"BGN: genExpr: std/core/show/show-hex(@arg-x229, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@Optional<int>(2)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 2","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":2},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":60,"args":{"any":[0,1]}},
{"op":"Copy","from":3,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 2","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@Optional<int>(2)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/show/show-hex(@arg-x229, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\\x5Cx\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/(++)(\"\\x5Cx\", (std/core/show/show-hex(@arg-x229, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/char/int(c)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@arg-x229\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val @arg-x229 : int\n      = std/core/char/int(c);\nstd/core/types/(++)(\"\\x5Cx\", (std/core/show/show-hex(@arg-x229, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@8,{\"op\": \"Var\",\"id\": \"@x3\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Jump","target":32}]},
{"label":"62([k@[switch case for Bool(false)#298]#303])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"63([k@[k@[#326]#335]#341])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"64([k@[#326]#335])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":34}]},
{"label":"65([#326])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Const","format":"string","out":6,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[6]},"in":{"any":[6]}},
{"op":"Push","target":64,"args":{"any":[2]}},
{"op":"Copy","from":4,"to":2},
{"op":"Copy","from":5,"to":4},
{"op":"Copy","from":6,"to":5},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Jump","target":30}]},
{"label":"66([k@[switch case for Bool(true)#305]#314])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@None<bool>","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@Optional<string>(\"\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":4,"value":""},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Push","target":65,"args":{"any":[1,2,0,3]}},
{"op":"Copy","from":5,"to":1},
{"op":"Copy","from":4,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@Optional<string>(\"\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@None<bool>","traced":{"any":[]}},
{"op":"Jump","target":36}]},
{"label":"67([switch case for Bool(true)#305])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@10,{\"op\": \"Var\",\"id\": \"@x4\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val @arg-x281 : int\n      = std/core/char/int(c);\nstd/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@arg-x281\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/char/int(c)","traced":{"any":[]}},
{"op":"PrimOp","name":"#1","out":{"any":[0]},"in":{"any":[1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\\x5Cu\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"\\u"},
{"op":"Debug","msg":"BGN: genExpr: std/core/show/show-hex(@arg-x281, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@Optional<int>(4)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 4","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":4},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":66,"args":{"any":[0,1]}},
{"op":"Copy","from":3,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 4","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@Optional<int>(4)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/show/show-hex(@arg-x281, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\\x5Cu\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/char/int(c)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@arg-x281\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val @arg-x281 : int\n      = std/core/char/int(c);\nstd/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@10,{\"op\": \"Var\",\"id\": \"@x4\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Jump","target":35}]},
{"label":"68([k@[k@[#365]#374]#380])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"69([k@[#365]#374])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":37}]},
{"label":"70([#365])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Const","format":"string","out":6,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[6]},"in":{"any":[6]}},
{"op":"Push","target":69,"args":{"any":[2]}},
{"op":"Copy","from":4,"to":2},
{"op":"Copy","from":5,"to":4},
{"op":"Copy","from":6,"to":5},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Jump","target":30}]},
{"label":"71([k@[switch case for Bool(false)#344]#353])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@None<bool>","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@Optional<string>(\"\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":4,"value":""},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Push","target":70,"args":{"any":[1,2,0,3]}},
{"op":"Copy","from":5,"to":1},
{"op":"Copy","from":4,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@Optional<string>(\"\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@None<bool>","traced":{"any":[]}},
{"op":"Jump","target":39}]},
{"label":"72([switch case for Bool(false)#344])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@11,{\"op\": \"Var\",\"id\": \"@x4\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val @arg-x323 : int\n      = std/core/char/int(c);\nstd/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@arg-x323\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/char/int(c)","traced":{"any":[]}},
{"op":"PrimOp","name":"#1","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\\x5CU\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"\\U"},
{"op":"Debug","msg":"BGN: genExpr: std/core/show/show-hex(@arg-x323, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@Optional<int>(6)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 6","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":6},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":71,"args":{"any":[0,1]}},
{"op":"Copy","from":3,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 6","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@Optional<int>(6)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/show/show-hex(@arg-x323, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\\x5CU\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/char/int(c)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@arg-x323\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val @arg-x323 : int\n      = std/core/char/int(c);\nstd/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@11,{\"op\": \"Var\",\"id\": \"@x4\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Jump","target":38}]},
{"label":"73([switch default case#382])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"74([switch default case#343])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Swap","a":0,"b":1},
{"op":"Switch","arg":1,"values":[false],"targets":[72],"default":73}]},
{"label":"75([switch case for Bool(false)#298])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@9,{\"op\": \"Var\",\"id\": \"@x3\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/int/(<=)((std/core/char/int(c)), 65535))) {\n  ((std/core/types/True() : bool ) as @pat@10: bool)\n     -> val @arg-x281 : int\n              = std/core/char/int(c);\n    std/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n  ((@skip std/core/types/False() : bool ) as @pat@11: bool)\n     -> val @arg-x323 : int\n              = std/core/char/int(c);\n    std/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(<=)((std/core/char/int(c)), 65535)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/char/int(c)","traced":{"any":[]}},
{"op":"PrimOp","name":"#1","out":{"any":[1]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: 65535","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":65535},
{"op":"PrimOp","name":"infixLte(Int, Int): Boolean","out":{"any":[1]},"in":{"any":[1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 65535","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/char/int(c)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(<=)((std/core/char/int(c)), 65535)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/int/(<=)((std/core/char/int(c)), 65535))) {\n  ((std/core/types/True() : bool ) as @pat@10: bool)\n     -> val @arg-x281 : int\n              = std/core/char/int(c);\n    std/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n  ((@skip std/core/types/False() : bool ) as @pat@11: bool)\n     -> val @arg-x323 : int\n              = std/core/char/int(c);\n    std/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@9,{\"op\": \"Var\",\"id\": \"@x3\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[67],"default":74}]},
{"label":"76([switch default case#383])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"77([switch default case#297])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Swap","a":0,"b":1},
{"op":"Switch","arg":1,"values":[false],"targets":[75],"default":76}]},
{"label":"78([switch case for Bool(false)#252])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@7,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\t\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/int/(<=)((std/core/char/int(c)), 255))) {\n  ((std/core/types/True() : bool ) as @pat@8: bool)\n     -> val @arg-x229 : int\n              = std/core/char/int(c);\n    std/core/types/(++)(\"\\x5Cx\", (std/core/show/show-hex(@arg-x229, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n  ((@skip std/core/types/False() : bool ) as @pat@9: bool)\n     -> (match ((std/core/int/(<=)((std/core/char/int(c)), 65535))) {\n      ((std/core/types/True() : bool ) as @pat@10: bool)\n         -> val @arg-x281 : int\n                  = std/core/char/int(c);\n        std/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n      ((@skip std/core/types/False() : bool ) as @pat@11: bool)\n         -> val @arg-x323 : int\n                  = std/core/char/int(c);\n        std/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(<=)((std/core/char/int(c)), 255)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/char/int(c)","traced":{"any":[]}},
{"op":"PrimOp","name":"#1","out":{"any":[1]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: 255","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":255},
{"op":"PrimOp","name":"infixLte(Int, Int): Boolean","out":{"any":[1]},"in":{"any":[1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 255","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/char/int(c)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(<=)((std/core/char/int(c)), 255)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/int/(<=)((std/core/char/int(c)), 255))) {\n  ((std/core/types/True() : bool ) as @pat@8: bool)\n     -> val @arg-x229 : int\n              = std/core/char/int(c);\n    std/core/types/(++)(\"\\x5Cx\", (std/core/show/show-hex(@arg-x229, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n  ((@skip std/core/types/False() : bool ) as @pat@9: bool)\n     -> (match ((std/core/int/(<=)((std/core/char/int(c)), 65535))) {\n      ((std/core/types/True() : bool ) as @pat@10: bool)\n         -> val @arg-x281 : int\n                  = std/core/char/int(c);\n        std/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n      ((@skip std/core/types/False() : bool ) as @pat@11: bool)\n         -> val @arg-x323 : int\n                  = std/core/char/int(c);\n        std/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@7,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\t\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[61],"default":77}]},
{"label":"79([switch default case#384])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"80([switch default case#248])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"\t"},
{"op":"PrimOp","name":"(#1 == #2)","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Switch","arg":1,"values":[false],"targets":[78],"default":79}]},
{"label":"81([switch case for Bool(false)#238])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\r\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/char/(==)(c, '\\x09'))) {\n  ((std/core/types/True() : bool ) as @pat@6: bool)\n     -> \"\\x5Ct\";\n  ((@skip std/core/types/False() : bool ) as @pat@7: bool)\n     -> (match ((std/core/int/(<=)((std/core/char/int(c)), 255))) {\n      ((std/core/types/True() : bool ) as @pat@8: bool)\n         -> val @arg-x229 : int\n                  = std/core/char/int(c);\n        std/core/types/(++)(\"\\x5Cx\", (std/core/show/show-hex(@arg-x229, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n      ((@skip std/core/types/False() : bool ) as @pat@9: bool)\n         -> (match ((std/core/int/(<=)((std/core/char/int(c)), 65535))) {\n          ((std/core/types/True() : bool ) as @pat@10: bool)\n             -> val @arg-x281 : int\n                      = std/core/char/int(c);\n            std/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n          ((@skip std/core/types/False() : bool ) as @pat@11: bool)\n             -> val @arg-x323 : int\n                      = std/core/char/int(c);\n            std/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"\t"},
{"op":"PrimOp","name":"(#1 == #2)","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/char/(==)(c, '\\x09'))) {\n  ((std/core/types/True() : bool ) as @pat@6: bool)\n     -> \"\\x5Ct\";\n  ((@skip std/core/types/False() : bool ) as @pat@7: bool)\n     -> (match ((std/core/int/(<=)((std/core/char/int(c)), 255))) {\n      ((std/core/types/True() : bool ) as @pat@8: bool)\n         -> val @arg-x229 : int\n                  = std/core/char/int(c);\n        std/core/types/(++)(\"\\x5Cx\", (std/core/show/show-hex(@arg-x229, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n      ((@skip std/core/types/False() : bool ) as @pat@9: bool)\n         -> (match ((std/core/int/(<=)((std/core/char/int(c)), 65535))) {\n          ((std/core/types/True() : bool ) as @pat@10: bool)\n             -> val @arg-x281 : int\n                      = std/core/char/int(c);\n            std/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n          ((@skip std/core/types/False() : bool ) as @pat@11: bool)\n             -> val @arg-x323 : int\n                      = std/core/char/int(c);\n            std/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\r\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[55],"default":80}]},
{"label":"82([switch default case#385])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"83([switch default case#234])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"\r"},
{"op":"PrimOp","name":"(#1 == #2)","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Switch","arg":1,"values":[false],"targets":[81],"default":82}]},
{"label":"84([switch case for Bool(false)#224])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\n\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/char/(==)(c, '\\x0D'))) {\n  ((std/core/types/True() : bool ) as @pat@4: bool)\n     -> \"\\x5Cr\";\n  ((@skip std/core/types/False() : bool ) as @pat@5: bool)\n     -> (match ((std/core/char/(==)(c, '\\x09'))) {\n      ((std/core/types/True() : bool ) as @pat@6: bool)\n         -> \"\\x5Ct\";\n      ((@skip std/core/types/False() : bool ) as @pat@7: bool)\n         -> (match ((std/core/int/(<=)((std/core/char/int(c)), 255))) {\n          ((std/core/types/True() : bool ) as @pat@8: bool)\n             -> val @arg-x229 : int\n                      = std/core/char/int(c);\n            std/core/types/(++)(\"\\x5Cx\", (std/core/show/show-hex(@arg-x229, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n          ((@skip std/core/types/False() : bool ) as @pat@9: bool)\n             -> (match ((std/core/int/(<=)((std/core/char/int(c)), 65535))) {\n              ((std/core/types/True() : bool ) as @pat@10: bool)\n                 -> val @arg-x281 : int\n                          = std/core/char/int(c);\n                std/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n              ((@skip std/core/types/False() : bool ) as @pat@11: bool)\n                 -> val @arg-x323 : int\n                          = std/core/char/int(c);\n                std/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n            });\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"\r"},
{"op":"PrimOp","name":"(#1 == #2)","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/char/(==)(c, '\\x0D'))) {\n  ((std/core/types/True() : bool ) as @pat@4: bool)\n     -> \"\\x5Cr\";\n  ((@skip std/core/types/False() : bool ) as @pat@5: bool)\n     -> (match ((std/core/char/(==)(c, '\\x09'))) {\n      ((std/core/types/True() : bool ) as @pat@6: bool)\n         -> \"\\x5Ct\";\n      ((@skip std/core/types/False() : bool ) as @pat@7: bool)\n         -> (match ((std/core/int/(<=)((std/core/char/int(c)), 255))) {\n          ((std/core/types/True() : bool ) as @pat@8: bool)\n             -> val @arg-x229 : int\n                      = std/core/char/int(c);\n            std/core/types/(++)(\"\\x5Cx\", (std/core/show/show-hex(@arg-x229, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n          ((@skip std/core/types/False() : bool ) as @pat@9: bool)\n             -> (match ((std/core/int/(<=)((std/core/char/int(c)), 65535))) {\n              ((std/core/types/True() : bool ) as @pat@10: bool)\n                 -> val @arg-x281 : int\n                          = std/core/char/int(c);\n                std/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n              ((@skip std/core/types/False() : bool ) as @pat@11: bool)\n                 -> val @arg-x323 : int\n                          = std/core/char/int(c);\n                std/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n            });\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\n\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[53],"default":83}]},
{"label":"85([switch default case#386])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"86([switch default case#220])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"\n"},
{"op":"PrimOp","name":"(#1 == #2)","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Switch","arg":1,"values":[false],"targets":[84],"default":85}]},
{"label":"87([switch case for Bool(true)#210])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"(#1 < #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \" \"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/char/(==)(c, '\\x0A'))) {\n  ((std/core/types/True() : bool ) as @pat@2: bool)\n     -> \"\\x5Cn\";\n  ((@skip std/core/types/False() : bool ) as @pat@3: bool)\n     -> (match ((std/core/char/(==)(c, '\\x0D'))) {\n      ((std/core/types/True() : bool ) as @pat@4: bool)\n         -> \"\\x5Cr\";\n      ((@skip std/core/types/False() : bool ) as @pat@5: bool)\n         -> (match ((std/core/char/(==)(c, '\\x09'))) {\n          ((std/core/types/True() : bool ) as @pat@6: bool)\n             -> \"\\x5Ct\";\n          ((@skip std/core/types/False() : bool ) as @pat@7: bool)\n             -> (match ((std/core/int/(<=)((std/core/char/int(c)), 255))) {\n              ((std/core/types/True() : bool ) as @pat@8: bool)\n                 -> val @arg-x229 : int\n                          = std/core/char/int(c);\n                std/core/types/(++)(\"\\x5Cx\", (std/core/show/show-hex(@arg-x229, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n              ((@skip std/core/types/False() : bool ) as @pat@9: bool)\n                 -> (match ((std/core/int/(<=)((std/core/char/int(c)), 65535))) {\n                  ((std/core/types/True() : bool ) as @pat@10: bool)\n                     -> val @arg-x281 : int\n                              = std/core/char/int(c);\n                    std/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n                  ((@skip std/core/types/False() : bool ) as @pat@11: bool)\n                     -> val @arg-x323 : int\n                              = std/core/char/int(c);\n                    std/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n                });\n            });\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"\n"},
{"op":"PrimOp","name":"(#1 == #2)","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/char/(==)(c, '\\x0A'))) {\n  ((std/core/types/True() : bool ) as @pat@2: bool)\n     -> \"\\x5Cn\";\n  ((@skip std/core/types/False() : bool ) as @pat@3: bool)\n     -> (match ((std/core/char/(==)(c, '\\x0D'))) {\n      ((std/core/types/True() : bool ) as @pat@4: bool)\n         -> \"\\x5Cr\";\n      ((@skip std/core/types/False() : bool ) as @pat@5: bool)\n         -> (match ((std/core/char/(==)(c, '\\x09'))) {\n          ((std/core/types/True() : bool ) as @pat@6: bool)\n             -> \"\\x5Ct\";\n          ((@skip std/core/types/False() : bool ) as @pat@7: bool)\n             -> (match ((std/core/int/(<=)((std/core/char/int(c)), 255))) {\n              ((std/core/types/True() : bool ) as @pat@8: bool)\n                 -> val @arg-x229 : int\n                          = std/core/char/int(c);\n                std/core/types/(++)(\"\\x5Cx\", (std/core/show/show-hex(@arg-x229, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n              ((@skip std/core/types/False() : bool ) as @pat@9: bool)\n                 -> (match ((std/core/int/(<=)((std/core/char/int(c)), 65535))) {\n                  ((std/core/types/True() : bool ) as @pat@10: bool)\n                     -> val @arg-x281 : int\n                              = std/core/char/int(c);\n                    std/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n                  ((@skip std/core/types/False() : bool ) as @pat@11: bool)\n                     -> val @arg-x323 : int\n                              = std/core/char/int(c);\n                    std/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n                });\n            });\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"(#1 < #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \" \"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[51],"default":86}]},
{"label":"88([k@[switch default case#387]#392])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"89([k@[switch case for Bool(true)#394]#399])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"90([switch case for Bool(true)#401])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\n\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\\x5Cn\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"\\n"},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\\x5Cn\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\n\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"91([k@[switch case for Bool(false)#408]#413])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"92([switch case for Bool(true)#415])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@4@0,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\r\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\\x5Cr\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"\\r"},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\\x5Cr\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4@0,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\r\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"93([k@[switch case for Bool(false)#422]#427])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"94([switch case for Bool(true)#429])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@6@0,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\t\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\\x5Ct\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"\\t"},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\\x5Ct\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@6@0,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\t\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"95([k@[switch case for Bool(false)#436]#441])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"96([k@[k@[#464]#473]#479])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"97([k@[#464]#473])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":40}]},
{"label":"98([#464])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Const","format":"string","out":6,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[6]},"in":{"any":[6]}},
{"op":"Push","target":97,"args":{"any":[2]}},
{"op":"Copy","from":4,"to":2},
{"op":"Copy","from":5,"to":4},
{"op":"Copy","from":6,"to":5},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Jump","target":30}]},
{"label":"99([k@[switch case for Bool(true)#443]#452])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@None<bool>","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@Optional<string>(\"\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":4,"value":""},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Push","target":98,"args":{"any":[1,2,0,3]}},
{"op":"Copy","from":5,"to":1},
{"op":"Copy","from":4,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@Optional<string>(\"\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@None<bool>","traced":{"any":[]}},
{"op":"Jump","target":42}]},
{"label":"100([switch case for Bool(true)#443])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@8@0,{\"op\": \"Var\",\"id\": \"@x5\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val @arg-x229@0 : int\n      = std/core/char/int(c);\nstd/core/types/(++)(\"\\x5Cx\", (std/core/show/show-hex(@arg-x229@0, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@arg-x229@0\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/char/int(c)","traced":{"any":[]}},
{"op":"PrimOp","name":"#1","out":{"any":[0]},"in":{"any":[1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/(++)(\"\\x5Cx\", (std/core/show/show-hex(@arg-x229@0, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\\x5Cx\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"\\x"},
{"op":"Debug","msg":"BGN: genExpr: std/core/show/show-hex(@arg-x229@0, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@Optional<int>(2)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 2","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":2},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":99,"args":{"any":[0,1]}},
{"op":"Copy","from":3,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 2","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@Optional<int>(2)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/show/show-hex(@arg-x229@0, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\\x5Cx\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/(++)(\"\\x5Cx\", (std/core/show/show-hex(@arg-x229@0, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/char/int(c)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@arg-x229@0\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val @arg-x229@0 : int\n      = std/core/char/int(c);\nstd/core/types/(++)(\"\\x5Cx\", (std/core/show/show-hex(@arg-x229@0, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@8@0,{\"op\": \"Var\",\"id\": \"@x5\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Jump","target":41}]},
{"label":"101([k@[switch case for Bool(false)#482]#487])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"102([k@[k@[#510]#519]#525])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"103([k@[#510]#519])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":43}]},
{"label":"104([#510])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Const","format":"string","out":6,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[6]},"in":{"any":[6]}},
{"op":"Push","target":103,"args":{"any":[2]}},
{"op":"Copy","from":4,"to":2},
{"op":"Copy","from":5,"to":4},
{"op":"Copy","from":6,"to":5},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Jump","target":30}]},
{"label":"105([k@[switch case for Bool(true)#489]#498])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@None<bool>","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@Optional<string>(\"\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":4,"value":""},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Push","target":104,"args":{"any":[1,2,0,3]}},
{"op":"Copy","from":5,"to":1},
{"op":"Copy","from":4,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@Optional<string>(\"\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@None<bool>","traced":{"any":[]}},
{"op":"Jump","target":45}]},
{"label":"106([switch case for Bool(true)#489])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@10@0,{\"op\": \"Var\",\"id\": \"@x6\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val @arg-x281@0 : int\n      = std/core/char/int(c);\nstd/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281@0, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@arg-x281@0\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/char/int(c)","traced":{"any":[]}},
{"op":"PrimOp","name":"#1","out":{"any":[0]},"in":{"any":[1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281@0, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\\x5Cu\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"\\u"},
{"op":"Debug","msg":"BGN: genExpr: std/core/show/show-hex(@arg-x281@0, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@Optional<int>(4)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 4","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":4},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":105,"args":{"any":[0,1]}},
{"op":"Copy","from":3,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 4","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@Optional<int>(4)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/show/show-hex(@arg-x281@0, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\\x5Cu\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281@0, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/char/int(c)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@arg-x281@0\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val @arg-x281@0 : int\n      = std/core/char/int(c);\nstd/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281@0, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@10@0,{\"op\": \"Var\",\"id\": \"@x6\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Jump","target":44}]},
{"label":"107([k@[k@[#549]#558]#564])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"108([k@[#549]#558])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":46}]},
{"label":"109([#549])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Const","format":"string","out":6,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[6]},"in":{"any":[6]}},
{"op":"Push","target":108,"args":{"any":[2]}},
{"op":"Copy","from":4,"to":2},
{"op":"Copy","from":5,"to":4},
{"op":"Copy","from":6,"to":5},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Jump","target":30}]},
{"label":"110([k@[switch case for Bool(false)#528]#537])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@None<bool>","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@Optional<string>(\"\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":4,"value":""},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Push","target":109,"args":{"any":[1,2,0,3]}},
{"op":"Copy","from":5,"to":1},
{"op":"Copy","from":4,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@Optional<string>(\"\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@None<bool>","traced":{"any":[]}},
{"op":"Jump","target":48}]},
{"label":"111([switch case for Bool(false)#528])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@11@0,{\"op\": \"Var\",\"id\": \"@x6\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val @arg-x323@0 : int\n      = std/core/char/int(c);\nstd/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323@0, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@arg-x323@0\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/char/int(c)","traced":{"any":[]}},
{"op":"PrimOp","name":"#1","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323@0, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\\x5CU\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"\\U"},
{"op":"Debug","msg":"BGN: genExpr: std/core/show/show-hex(@arg-x323@0, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@Optional<int>(6)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 6","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":6},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":110,"args":{"any":[0,1]}},
{"op":"Copy","from":3,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 6","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@Optional<int>(6)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/show/show-hex(@arg-x323@0, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\\x5CU\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323@0, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/char/int(c)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@arg-x323@0\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val @arg-x323@0 : int\n      = std/core/char/int(c);\nstd/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323@0, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@11@0,{\"op\": \"Var\",\"id\": \"@x6\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Jump","target":47}]},
{"label":"112([switch default case#566])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"113([switch default case#527])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Swap","a":0,"b":1},
{"op":"Switch","arg":1,"values":[false],"targets":[111],"default":112}]},
{"label":"114([switch case for Bool(false)#482])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@9@0,{\"op\": \"Var\",\"id\": \"@x5\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/int/(<=)((std/core/char/int(c)), 65535))) {\n  ((std/core/types/True() : bool ) as @pat@10@0: bool)\n     -> val @arg-x281@0 : int\n              = std/core/char/int(c);\n    std/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281@0, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n  ((@skip std/core/types/False() : bool ) as @pat@11@0: bool)\n     -> val @arg-x323@0 : int\n              = std/core/char/int(c);\n    std/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323@0, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(<=)((std/core/char/int(c)), 65535)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/char/int(c)","traced":{"any":[]}},
{"op":"PrimOp","name":"#1","out":{"any":[1]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: 65535","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":65535},
{"op":"PrimOp","name":"infixLte(Int, Int): Boolean","out":{"any":[1]},"in":{"any":[1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 65535","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/char/int(c)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(<=)((std/core/char/int(c)), 65535)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/int/(<=)((std/core/char/int(c)), 65535))) {\n  ((std/core/types/True() : bool ) as @pat@10@0: bool)\n     -> val @arg-x281@0 : int\n              = std/core/char/int(c);\n    std/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281@0, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n  ((@skip std/core/types/False() : bool ) as @pat@11@0: bool)\n     -> val @arg-x323@0 : int\n              = std/core/char/int(c);\n    std/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323@0, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@9@0,{\"op\": \"Var\",\"id\": \"@x5\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[106],"default":113}]},
{"label":"115([switch default case#567])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"116([switch default case#481])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Swap","a":0,"b":1},
{"op":"Switch","arg":1,"values":[false],"targets":[114],"default":115}]},
{"label":"117([switch case for Bool(false)#436])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@7@0,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\t\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/int/(<=)((std/core/char/int(c)), 255))) {\n  ((std/core/types/True() : bool ) as @pat@8@0: bool)\n     -> val @arg-x229@0 : int\n              = std/core/char/int(c);\n    std/core/types/(++)(\"\\x5Cx\", (std/core/show/show-hex(@arg-x229@0, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n  ((@skip std/core/types/False() : bool ) as @pat@9@0: bool)\n     -> (match ((std/core/int/(<=)((std/core/char/int(c)), 65535))) {\n      ((std/core/types/True() : bool ) as @pat@10@0: bool)\n         -> val @arg-x281@0 : int\n                  = std/core/char/int(c);\n        std/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281@0, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n      ((@skip std/core/types/False() : bool ) as @pat@11@0: bool)\n         -> val @arg-x323@0 : int\n                  = std/core/char/int(c);\n        std/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323@0, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(<=)((std/core/char/int(c)), 255)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/char/int(c)","traced":{"any":[]}},
{"op":"PrimOp","name":"#1","out":{"any":[1]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: 255","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":255},
{"op":"PrimOp","name":"infixLte(Int, Int): Boolean","out":{"any":[1]},"in":{"any":[1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 255","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/char/int(c)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(<=)((std/core/char/int(c)), 255)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/int/(<=)((std/core/char/int(c)), 255))) {\n  ((std/core/types/True() : bool ) as @pat@8@0: bool)\n     -> val @arg-x229@0 : int\n              = std/core/char/int(c);\n    std/core/types/(++)(\"\\x5Cx\", (std/core/show/show-hex(@arg-x229@0, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n  ((@skip std/core/types/False() : bool ) as @pat@9@0: bool)\n     -> (match ((std/core/int/(<=)((std/core/char/int(c)), 65535))) {\n      ((std/core/types/True() : bool ) as @pat@10@0: bool)\n         -> val @arg-x281@0 : int\n                  = std/core/char/int(c);\n        std/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281@0, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n      ((@skip std/core/types/False() : bool ) as @pat@11@0: bool)\n         -> val @arg-x323@0 : int\n                  = std/core/char/int(c);\n        std/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323@0, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@7@0,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\t\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[100],"default":116}]},
{"label":"118([switch default case#568])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"119([switch default case#432])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"\t"},
{"op":"PrimOp","name":"(#1 == #2)","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Switch","arg":1,"values":[false],"targets":[117],"default":118}]},
{"label":"120([switch case for Bool(false)#422])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@5@0,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\r\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/char/(==)(c, '\\x09'))) {\n  ((std/core/types/True() : bool ) as @pat@6@0: bool)\n     -> \"\\x5Ct\";\n  ((@skip std/core/types/False() : bool ) as @pat@7@0: bool)\n     -> (match ((std/core/int/(<=)((std/core/char/int(c)), 255))) {\n      ((std/core/types/True() : bool ) as @pat@8@0: bool)\n         -> val @arg-x229@0 : int\n                  = std/core/char/int(c);\n        std/core/types/(++)(\"\\x5Cx\", (std/core/show/show-hex(@arg-x229@0, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n      ((@skip std/core/types/False() : bool ) as @pat@9@0: bool)\n         -> (match ((std/core/int/(<=)((std/core/char/int(c)), 65535))) {\n          ((std/core/types/True() : bool ) as @pat@10@0: bool)\n             -> val @arg-x281@0 : int\n                      = std/core/char/int(c);\n            std/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281@0, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n          ((@skip std/core/types/False() : bool ) as @pat@11@0: bool)\n             -> val @arg-x323@0 : int\n                      = std/core/char/int(c);\n            std/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323@0, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"\t"},
{"op":"PrimOp","name":"(#1 == #2)","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/char/(==)(c, '\\x09'))) {\n  ((std/core/types/True() : bool ) as @pat@6@0: bool)\n     -> \"\\x5Ct\";\n  ((@skip std/core/types/False() : bool ) as @pat@7@0: bool)\n     -> (match ((std/core/int/(<=)((std/core/char/int(c)), 255))) {\n      ((std/core/types/True() : bool ) as @pat@8@0: bool)\n         -> val @arg-x229@0 : int\n                  = std/core/char/int(c);\n        std/core/types/(++)(\"\\x5Cx\", (std/core/show/show-hex(@arg-x229@0, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n      ((@skip std/core/types/False() : bool ) as @pat@9@0: bool)\n         -> (match ((std/core/int/(<=)((std/core/char/int(c)), 65535))) {\n          ((std/core/types/True() : bool ) as @pat@10@0: bool)\n             -> val @arg-x281@0 : int\n                      = std/core/char/int(c);\n            std/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281@0, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n          ((@skip std/core/types/False() : bool ) as @pat@11@0: bool)\n             -> val @arg-x323@0 : int\n                      = std/core/char/int(c);\n            std/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323@0, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5@0,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\r\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[94],"default":119}]},
{"label":"121([switch default case#569])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"122([switch default case#418])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"\r"},
{"op":"PrimOp","name":"(#1 == #2)","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Switch","arg":1,"values":[false],"targets":[120],"default":121}]},
{"label":"123([switch case for Bool(false)#408])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@3@0,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\n\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/char/(==)(c, '\\x0D'))) {\n  ((std/core/types/True() : bool ) as @pat@4@0: bool)\n     -> \"\\x5Cr\";\n  ((@skip std/core/types/False() : bool ) as @pat@5@0: bool)\n     -> (match ((std/core/char/(==)(c, '\\x09'))) {\n      ((std/core/types/True() : bool ) as @pat@6@0: bool)\n         -> \"\\x5Ct\";\n      ((@skip std/core/types/False() : bool ) as @pat@7@0: bool)\n         -> (match ((std/core/int/(<=)((std/core/char/int(c)), 255))) {\n          ((std/core/types/True() : bool ) as @pat@8@0: bool)\n             -> val @arg-x229@0 : int\n                      = std/core/char/int(c);\n            std/core/types/(++)(\"\\x5Cx\", (std/core/show/show-hex(@arg-x229@0, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n          ((@skip std/core/types/False() : bool ) as @pat@9@0: bool)\n             -> (match ((std/core/int/(<=)((std/core/char/int(c)), 65535))) {\n              ((std/core/types/True() : bool ) as @pat@10@0: bool)\n                 -> val @arg-x281@0 : int\n                          = std/core/char/int(c);\n                std/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281@0, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n              ((@skip std/core/types/False() : bool ) as @pat@11@0: bool)\n                 -> val @arg-x323@0 : int\n                          = std/core/char/int(c);\n                std/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323@0, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n            });\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"\r"},
{"op":"PrimOp","name":"(#1 == #2)","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/char/(==)(c, '\\x0D'))) {\n  ((std/core/types/True() : bool ) as @pat@4@0: bool)\n     -> \"\\x5Cr\";\n  ((@skip std/core/types/False() : bool ) as @pat@5@0: bool)\n     -> (match ((std/core/char/(==)(c, '\\x09'))) {\n      ((std/core/types/True() : bool ) as @pat@6@0: bool)\n         -> \"\\x5Ct\";\n      ((@skip std/core/types/False() : bool ) as @pat@7@0: bool)\n         -> (match ((std/core/int/(<=)((std/core/char/int(c)), 255))) {\n          ((std/core/types/True() : bool ) as @pat@8@0: bool)\n             -> val @arg-x229@0 : int\n                      = std/core/char/int(c);\n            std/core/types/(++)(\"\\x5Cx\", (std/core/show/show-hex(@arg-x229@0, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n          ((@skip std/core/types/False() : bool ) as @pat@9@0: bool)\n             -> (match ((std/core/int/(<=)((std/core/char/int(c)), 65535))) {\n              ((std/core/types/True() : bool ) as @pat@10@0: bool)\n                 -> val @arg-x281@0 : int\n                          = std/core/char/int(c);\n                std/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281@0, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n              ((@skip std/core/types/False() : bool ) as @pat@11@0: bool)\n                 -> val @arg-x323@0 : int\n                          = std/core/char/int(c);\n                std/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323@0, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n            });\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3@0,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\n\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[92],"default":122}]},
{"label":"124([switch default case#570])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"125([switch default case#404])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"\n"},
{"op":"PrimOp","name":"(#1 == #2)","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Switch","arg":1,"values":[false],"targets":[123],"default":124}]},
{"label":"126([switch case for Bool(true)#394])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"(#1 > #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"~\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/char/(==)(c, '\\x0A'))) {\n  ((std/core/types/True() : bool ) as @pat@2@0: bool)\n     -> \"\\x5Cn\";\n  ((@skip std/core/types/False() : bool ) as @pat@3@0: bool)\n     -> (match ((std/core/char/(==)(c, '\\x0D'))) {\n      ((std/core/types/True() : bool ) as @pat@4@0: bool)\n         -> \"\\x5Cr\";\n      ((@skip std/core/types/False() : bool ) as @pat@5@0: bool)\n         -> (match ((std/core/char/(==)(c, '\\x09'))) {\n          ((std/core/types/True() : bool ) as @pat@6@0: bool)\n             -> \"\\x5Ct\";\n          ((@skip std/core/types/False() : bool ) as @pat@7@0: bool)\n             -> (match ((std/core/int/(<=)((std/core/char/int(c)), 255))) {\n              ((std/core/types/True() : bool ) as @pat@8@0: bool)\n                 -> val @arg-x229@0 : int\n                          = std/core/char/int(c);\n                std/core/types/(++)(\"\\x5Cx\", (std/core/show/show-hex(@arg-x229@0, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n              ((@skip std/core/types/False() : bool ) as @pat@9@0: bool)\n                 -> (match ((std/core/int/(<=)((std/core/char/int(c)), 65535))) {\n                  ((std/core/types/True() : bool ) as @pat@10@0: bool)\n                     -> val @arg-x281@0 : int\n                              = std/core/char/int(c);\n                    std/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281@0, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n                  ((@skip std/core/types/False() : bool ) as @pat@11@0: bool)\n                     -> val @arg-x323@0 : int\n                              = std/core/char/int(c);\n                    std/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323@0, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n                });\n            });\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"\n"},
{"op":"PrimOp","name":"(#1 == #2)","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/char/(==)(c, '\\x0A'))) {\n  ((std/core/types/True() : bool ) as @pat@2@0: bool)\n     -> \"\\x5Cn\";\n  ((@skip std/core/types/False() : bool ) as @pat@3@0: bool)\n     -> (match ((std/core/char/(==)(c, '\\x0D'))) {\n      ((std/core/types/True() : bool ) as @pat@4@0: bool)\n         -> \"\\x5Cr\";\n      ((@skip std/core/types/False() : bool ) as @pat@5@0: bool)\n         -> (match ((std/core/char/(==)(c, '\\x09'))) {\n          ((std/core/types/True() : bool ) as @pat@6@0: bool)\n             -> \"\\x5Ct\";\n          ((@skip std/core/types/False() : bool ) as @pat@7@0: bool)\n             -> (match ((std/core/int/(<=)((std/core/char/int(c)), 255))) {\n              ((std/core/types/True() : bool ) as @pat@8@0: bool)\n                 -> val @arg-x229@0 : int\n                          = std/core/char/int(c);\n                std/core/types/(++)(\"\\x5Cx\", (std/core/show/show-hex(@arg-x229@0, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n              ((@skip std/core/types/False() : bool ) as @pat@9@0: bool)\n                 -> (match ((std/core/int/(<=)((std/core/char/int(c)), 65535))) {\n                  ((std/core/types/True() : bool ) as @pat@10@0: bool)\n                     -> val @arg-x281@0 : int\n                              = std/core/char/int(c);\n                    std/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281@0, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n                  ((@skip std/core/types/False() : bool ) as @pat@11@0: bool)\n                     -> val @arg-x323@0 : int\n                              = std/core/char/int(c);\n                    std/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323@0, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n                });\n            });\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"(#1 > #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"~\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[90],"default":125}]},
{"label":"127([k@[switch case for Bool(false)#575]#580])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"128([switch case for Bool(true)#582])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@13,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\'\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\\x5C\\x27\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"\\'"},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\\x5C\\x27\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@13,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\'\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"129([k@[switch case for Bool(false)#589]#594])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"130([switch case for Bool(true)#596])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@15,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\\"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\\x5C\\x22\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"\\\""},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\\x5C\\x22\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@15,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\\"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"131([k@[switch case for Bool(false)#603]#608])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"132([switch case for Bool(true)#610])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@17,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\\\\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\\x5C\\x5C\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"\\\\"},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\\x5C\\x5C\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@17,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\\\\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"133([k@[switch case for Bool(false)#617]#622])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"134([switch case for Bool(false)#617])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@18,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\\\\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/char/string(c)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/char/string(c)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@18,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\\\\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Jump","target":49}]},
{"label":"135([switch default case#624])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"136([switch default case#613])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"\\"},
{"op":"PrimOp","name":"(#1 == #2)","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Switch","arg":1,"values":[false],"targets":[134],"default":135}]},
{"label":"137([switch case for Bool(false)#603])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@16,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\\"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/char/(==)(c, '\\x5C'))) {\n  ((std/core/types/True() : bool ) as @pat@17: bool)\n     -> \"\\x5C\\x5C\";\n  ((@skip std/core/types/False() : bool ) as @pat@18: bool)\n     -> std/core/string/char/string(c);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"\\"},
{"op":"PrimOp","name":"(#1 == #2)","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/char/(==)(c, '\\x5C'))) {\n  ((std/core/types/True() : bool ) as @pat@17: bool)\n     -> \"\\x5C\\x5C\";\n  ((@skip std/core/types/False() : bool ) as @pat@18: bool)\n     -> std/core/string/char/string(c);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@16,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\\"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[132],"default":136}]},
{"label":"138([switch default case#625])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"139([switch default case#599])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"\""},
{"op":"PrimOp","name":"(#1 == #2)","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Switch","arg":1,"values":[false],"targets":[137],"default":138}]},
{"label":"140([switch case for Bool(false)#589])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@14,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\'\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/char/(==)(c, '\\x22'))) {\n  ((std/core/types/True() : bool ) as @pat@15: bool)\n     -> \"\\x5C\\x22\";\n  ((@skip std/core/types/False() : bool ) as @pat@16: bool)\n     -> (match ((std/core/char/(==)(c, '\\x5C'))) {\n      ((std/core/types/True() : bool ) as @pat@17: bool)\n         -> \"\\x5C\\x5C\";\n      ((@skip std/core/types/False() : bool ) as @pat@18: bool)\n         -> std/core/string/char/string(c);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"\""},
{"op":"PrimOp","name":"(#1 == #2)","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/char/(==)(c, '\\x22'))) {\n  ((std/core/types/True() : bool ) as @pat@15: bool)\n     -> \"\\x5C\\x22\";\n  ((@skip std/core/types/False() : bool ) as @pat@16: bool)\n     -> (match ((std/core/char/(==)(c, '\\x5C'))) {\n      ((std/core/types/True() : bool ) as @pat@17: bool)\n         -> \"\\x5C\\x5C\";\n      ((@skip std/core/types/False() : bool ) as @pat@18: bool)\n         -> std/core/string/char/string(c);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@14,{\"op\": \"Primitive\",\"name\": \"(#1 == #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\\'\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[130],"default":139}]},
{"label":"141([switch default case#626])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"142([switch default case#585])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"'"},
{"op":"PrimOp","name":"(#1 == #2)","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Switch","arg":1,"values":[false],"targets":[140],"default":141}]},
{"label":"143([switch case for Bool(false)#575])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@12,{\"op\": \"Primitive\",\"name\": \"(#1 > #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"~\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/char/(==)(c, '\\x27'))) {\n  ((std/core/types/True() : bool ) as @pat@13: bool)\n     -> \"\\x5C\\x27\";\n  ((@skip std/core/types/False() : bool ) as @pat@14: bool)\n     -> (match ((std/core/char/(==)(c, '\\x22'))) {\n      ((std/core/types/True() : bool ) as @pat@15: bool)\n         -> \"\\x5C\\x22\";\n      ((@skip std/core/types/False() : bool ) as @pat@16: bool)\n         -> (match ((std/core/char/(==)(c, '\\x5C'))) {\n          ((std/core/types/True() : bool ) as @pat@17: bool)\n             -> \"\\x5C\\x5C\";\n          ((@skip std/core/types/False() : bool ) as @pat@18: bool)\n             -> std/core/string/char/string(c);\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"'"},
{"op":"PrimOp","name":"(#1 == #2)","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/char/(==)(c, '\\x27'))) {\n  ((std/core/types/True() : bool ) as @pat@13: bool)\n     -> \"\\x5C\\x27\";\n  ((@skip std/core/types/False() : bool ) as @pat@14: bool)\n     -> (match ((std/core/char/(==)(c, '\\x22'))) {\n      ((std/core/types/True() : bool ) as @pat@15: bool)\n         -> \"\\x5C\\x22\";\n      ((@skip std/core/types/False() : bool ) as @pat@16: bool)\n         -> (match ((std/core/char/(==)(c, '\\x5C'))) {\n          ((std/core/types/True() : bool ) as @pat@17: bool)\n             -> \"\\x5C\\x5C\";\n          ((@skip std/core/types/False() : bool ) as @pat@18: bool)\n             -> std/core/string/char/string(c);\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@12,{\"op\": \"Primitive\",\"name\": \"(#1 > #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"~\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[128],"default":142}]},
{"label":"144([switch default case#627])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"145([switch default case#571])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"~"},
{"op":"PrimOp","name":"(#1 > #2)","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Switch","arg":1,"values":[false],"targets":[143],"default":144}]},
{"label":"146([switch default case#387])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"(#1 < #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \" \"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/char/(>)(c, '~'))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> (match ((std/core/char/(==)(c, '\\x0A'))) {\n      ((std/core/types/True() : bool ) as @pat@2@0: bool)\n         -> \"\\x5Cn\";\n      ((@skip std/core/types/False() : bool ) as @pat@3@0: bool)\n         -> (match ((std/core/char/(==)(c, '\\x0D'))) {\n          ((std/core/types/True() : bool ) as @pat@4@0: bool)\n             -> \"\\x5Cr\";\n          ((@skip std/core/types/False() : bool ) as @pat@5@0: bool)\n             -> (match ((std/core/char/(==)(c, '\\x09'))) {\n              ((std/core/types/True() : bool ) as @pat@6@0: bool)\n                 -> \"\\x5Ct\";\n              ((@skip std/core/types/False() : bool ) as @pat@7@0: bool)\n                 -> (match ((std/core/int/(<=)((std/core/char/int(c)), 255))) {\n                  ((std/core/types/True() : bool ) as @pat@8@0: bool)\n                     -> val @arg-x229@0 : int\n                              = std/core/char/int(c);\n                    std/core/types/(++)(\"\\x5Cx\", (std/core/show/show-hex(@arg-x229@0, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n                  ((@skip std/core/types/False() : bool ) as @pat@9@0: bool)\n                     -> (match ((std/core/int/(<=)((std/core/char/int(c)), 65535))) {\n                      ((std/core/types/True() : bool ) as @pat@10@0: bool)\n                         -> val @arg-x281@0 : int\n                                  = std/core/char/int(c);\n                        std/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281@0, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n                      ((@skip std/core/types/False() : bool ) as @pat@11@0: bool)\n                         -> val @arg-x323@0 : int\n                                  = std/core/char/int(c);\n                        std/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323@0, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n                    });\n                });\n            });\n        });\n    });\n  ((@skip std/core/types/False() : bool ) as @pat@12: bool)\n     -> (match ((std/core/char/(==)(c, '\\x27'))) {\n      ((std/core/types/True() : bool ) as @pat@13: bool)\n         -> \"\\x5C\\x27\";\n      ((@skip std/core/types/False() : bool ) as @pat@14: bool)\n         -> (match ((std/core/char/(==)(c, '\\x22'))) {\n          ((std/core/types/True() : bool ) as @pat@15: bool)\n             -> \"\\x5C\\x22\";\n          ((@skip std/core/types/False() : bool ) as @pat@16: bool)\n             -> (match ((std/core/char/(==)(c, '\\x5C'))) {\n              ((std/core/types/True() : bool ) as @pat@17: bool)\n                 -> \"\\x5C\\x5C\";\n              ((@skip std/core/types/False() : bool ) as @pat@18: bool)\n                 -> std/core/string/char/string(c);\n            });\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"~"},
{"op":"PrimOp","name":"(#1 > #2)","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/char/(>)(c, '~'))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> (match ((std/core/char/(==)(c, '\\x0A'))) {\n      ((std/core/types/True() : bool ) as @pat@2@0: bool)\n         -> \"\\x5Cn\";\n      ((@skip std/core/types/False() : bool ) as @pat@3@0: bool)\n         -> (match ((std/core/char/(==)(c, '\\x0D'))) {\n          ((std/core/types/True() : bool ) as @pat@4@0: bool)\n             -> \"\\x5Cr\";\n          ((@skip std/core/types/False() : bool ) as @pat@5@0: bool)\n             -> (match ((std/core/char/(==)(c, '\\x09'))) {\n              ((std/core/types/True() : bool ) as @pat@6@0: bool)\n                 -> \"\\x5Ct\";\n              ((@skip std/core/types/False() : bool ) as @pat@7@0: bool)\n                 -> (match ((std/core/int/(<=)((std/core/char/int(c)), 255))) {\n                  ((std/core/types/True() : bool ) as @pat@8@0: bool)\n                     -> val @arg-x229@0 : int\n                              = std/core/char/int(c);\n                    std/core/types/(++)(\"\\x5Cx\", (std/core/show/show-hex(@arg-x229@0, (std/core/types/@Optional<int>(2)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n                  ((@skip std/core/types/False() : bool ) as @pat@9@0: bool)\n                     -> (match ((std/core/int/(<=)((std/core/char/int(c)), 65535))) {\n                      ((std/core/types/True() : bool ) as @pat@10@0: bool)\n                         -> val @arg-x281@0 : int\n                                  = std/core/char/int(c);\n                        std/core/types/(++)(\"\\x5Cu\", (std/core/show/show-hex(@arg-x281@0, (std/core/types/@Optional<int>(4)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n                      ((@skip std/core/types/False() : bool ) as @pat@11@0: bool)\n                         -> val @arg-x323@0 : int\n                                  = std/core/char/int(c);\n                        std/core/types/(++)(\"\\x5CU\", (std/core/show/show-hex(@arg-x323@0, (std/core/types/@Optional<int>(6)), (std/core/types/@None<bool>), (std/core/types/@Optional<string>(\"\")))));\n                    });\n                });\n            });\n        });\n    });\n  ((@skip std/core/types/False() : bool ) as @pat@12: bool)\n     -> (match ((std/core/char/(==)(c, '\\x27'))) {\n      ((std/core/types/True() : bool ) as @pat@13: bool)\n         -> \"\\x5C\\x27\";\n      ((@skip std/core/types/False() : bool ) as @pat@14: bool)\n         -> (match ((std/core/char/(==)(c, '\\x22'))) {\n          ((std/core/types/True() : bool ) as @pat@15: bool)\n             -> \"\\x5C\\x22\";\n          ((@skip std/core/types/False() : bool ) as @pat@16: bool)\n             -> (match ((std/core/char/(==)(c, '\\x5C'))) {\n              ((std/core/types/True() : bool ) as @pat@17: bool)\n                 -> \"\\x5C\\x5C\";\n              ((@skip std/core/types/False() : bool ) as @pat@18: bool)\n                 -> std/core/string/char/string(c);\n            });\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"(#1 < #2)\",\"args\": [{\"op\": \"Var\",\"id\": \"c\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \" \"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[126],"default":145}]},
{"label":"147([mcore:[#311]#206])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":" "},
{"op":"PrimOp","name":"(#1 < #2)","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[87],"default":146}]},
{"label":"148([mcore:[#312]#628])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/(++)"}]},
{"label":"149([mcore:[#315]#634])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/(++)"}]},
{"label":"150([k@[k@[mcore:[#322]#640]#650]#658])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":148}]},
{"label":"151([k@[mcore:[#322]#640]#650])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: \"\\x27\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"'"},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":150,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":3,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\\x27\"","traced":{"any":[]}},
{"op":"Jump","target":149}]},
{"label":"152([mcore:[#322]#640])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/(++)(\"\\x27\", (std/core/types/(++)((std/core/show/show-char(c)), \"\\x27\")))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\\x27\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"'"},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/(++)((std/core/show/show-char(c)), \"\\x27\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/show/show-char(c)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":151,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":3,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/show/show-char(c)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/(++)((std/core/show/show-char(c)), \"\\x27\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\\x27\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/(++)(\"\\x27\", (std/core/types/(++)((std/core/show/show-char(c)), \"\\x27\")))","traced":{"any":[]}},
{"op":"Jump","target":147}]},
{"label":"153([mcore:[#323]#663])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/list/map"}]},
{"label":"154([mcore:[#325]#669])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/string/list"}]},
{"label":"155([mcore:[#330]#674])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/(++)"}]},
{"label":"156([mcore:[#333]#680])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/(++)"}]},
{"label":"157([mcore:[#335]#686])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"CallLib","lib":3,"symbol":"std/core/list/@lift-joinsep@4797"}]},
{"label":"158([method_apply@[k@[mcore:[#343]#693]#698]#702])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Jump","target":147}]},
{"label":"159([#727])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":155}]},
{"label":"160([k@[k@[k@[mcore:[#343]#693]#698]#715]#719])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: \"\\x22\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"\""},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":159,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":3,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\\x22\"","traced":{"any":[]}},
{"op":"Jump","target":156}]},
{"label":"161([match_def@[#732]#733])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"162([#741])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"163([match_std/core/types/Cons@[#732]#734])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs@10000\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"7\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"7\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"8\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-joinsep@4797(\"\", xx, x)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":""},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":2,"b":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-joinsep@4797(\"\", xx, x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs@10000\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"7\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"7\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"8\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":157}]},
{"label":"164([#732])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs@10000\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"7\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"8\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs@10000\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"7\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"8\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":163,"args":{"any":[0,1]}}],"default":{"tag":"cdc7df2c-ff50-4cc1-9dd6-171c265fb346#[Missing Tag#854]","target":161,"args":{"any":[]}}}]},
{"label":"165([#743])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs@10000\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs@10000\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"166([k@[k@[mcore:[#343]#693]#698]#715])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/(++)(\"\\x22\", (std/core/types/(++)((match (xs@10000) {\n      ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n         -> std/core/list/@lift-joinsep@4797(\"\", xx, x);\n    }), \"\\x22\")))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\\x22\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"\""},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/(++)((match (xs@10000) {\n    ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n       -> \"\";\n    ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n       -> std/core/list/@lift-joinsep@4797(\"\", xx, x);\n  }), \"\\x22\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (xs@10000) {\n  ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n     -> std/core/list/@lift-joinsep@4797(\"\", xx, x);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs@10000\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Push","target":160,"args":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs@10000\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (xs@10000) {\n  ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n     -> std/core/list/@lift-joinsep@4797(\"\", xx, x);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/(++)((match (xs@10000) {\n    ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n       -> \"\";\n    ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n       -> std/core/list/@lift-joinsep@4797(\"\", xx, x);\n  }), \"\\x22\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\\x22\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/(++)(\"\\x22\", (std/core/types/(++)((match (xs@10000) {\n      ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n         -> std/core/list/@lift-joinsep@4797(\"\", xx, x);\n    }), \"\\x22\")))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":165,"args":{"any":[]}}],"default":{"tag":"cdc7df2c-ff50-4cc1-9dd6-171c265fb346#[Missing Tag#855]","target":164,"args":{"any":[]}}}]},
{"label":"167([k@[mcore:[#343]#693]#698])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"New","out":1,"targets":[158],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":166,"args":{"any":[]}},
{"op":"Jump","target":153}]},
{"label":"168([mcore:[#343]#693])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"xs@10000\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/map<char,string,(total :: E)>((std/core/string/list(s)), std/core/show/show-char)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/list(s)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":167,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/list(s)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/map<char,string,(total :: E)>((std/core/string/list(s)), std/core/show/show-char)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"xs@10000\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Jump","target":154}]},
{"label":"169([mcore:[#345]#746])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/sslice/string"}]},
{"label":"170([k@[mcore:[#349]#751]#756])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Jump","target":168}]},
{"label":"171([mcore:[#349]#751])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/show/string/show((std/core/sslice/string(s)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/string(s)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":170,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/string(s)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/show/string/show((std/core/sslice/string(s)))","traced":{"any":[]}},
{"op":"Jump","target":169}]},
{"label":"172([#837])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"ThisLib_fe819837-307a-490f-a97f-179effd3c6a9"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Copy","from":2,"to":0},
{"op":"Return","args":{"any":[0]}}]},
{"label":"173([k@[k@[k@[k@[#787]#797]#807]#817]#827])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#135]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_list.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/list)"},
{"op":"Push","target":172,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"174([k@[k@[k@[#787]#797]#807]#817])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#134]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_sslice.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/sslice)"},
{"op":"Push","target":173,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"175([k@[k@[#787]#797]#807])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#133]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_string.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/string)"},
{"op":"Push","target":174,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"176([k@[#787]#797])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#132]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_char.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/char)"},
{"op":"Push","target":175,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"177([#787])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#131]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_int.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/int)"},
{"op":"Push","target":176,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"178([k@[mcore:[static initializers#354]#767]#777])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#130]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_hnd.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"Push","target":177,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"179([mcore:[static initializers#354]#767])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"[#129]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_types.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,2]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"Push","target":178,"args":{"any":[1,0]}},
{"op":"LoadLib","path":2}]},
{"label":"180([k@[main entrypoint#2]#845])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Undefined: is a library"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"181([main entrypoint#2])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Copy","from":-1,"to":0},
{"op":"Push","target":180,"args":{"any":[]}},
{"op":"Jump","target":179}]}],
"symbols":[{"name":"std/core/show/gshow","position":0},
{"name":"std/core/show/int-show-hex","position":1},
{"name":"std/core/show/show-hex","position":30},
{"name":"std/core/show/show-char","position":147},
{"name":"std/core/show/char/show","position":152},
{"name":"std/core/show/string/show","position":168},
{"name":"std/core/show/sslice/show","position":171},
{"name":"$static-init","position":179},
{"name":"$entrypoint","position":181}],
"frameSize":{"regs_any":16}}