{"blocks":[{"label":"0([match_def@[mcore:[#768]#3]#4])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1([match_std/os/path/Path@[mcore:[#768]#3]#5])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"path@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"0\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"path@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"0\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"2([mcore:[#768]#3])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"path@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"0\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"path@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"0\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":0,"clauses":[{"tag":"std/os/path/Path","target":1,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3844]","target":0,"args":{"any":[]}}}]},
{"label":"3([match_def@[mcore:[#769]#6]#7])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"4([match_std/os/path/Path@[mcore:[#769]#6]#8])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"path@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"2\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"path@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"2\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"5([mcore:[#769]#6])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"path@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"2\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"path@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"2\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":0,"clauses":[{"tag":"std/os/path/Path","target":4,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3845]","target":3,"args":{"any":[]}}}]},
{"label":"6([k@[k@[mcore:[#773]#9]#11]#14])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":1139}]},
{"label":"7([#18])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"8([k@[#19]#21])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"9([match_def@[#19]#23])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"10([match_std/os/path/Path@[#19]#24])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"8\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"9\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"8\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"9\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"11([#19])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@this) {\n  ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n     -> @x@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"8\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"8\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@this) {\n  ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n     -> @x@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":0,"clauses":[{"tag":"std/os/path/Path","target":10,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3846]","target":9,"args":{"any":[]}}}]},
{"label":"12([match_def@[k@[mcore:[#773]#9]#11]#17])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":1,"clauses":[{"tag":"std/core/types/@None","target":11,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3847]","target":7,"args":{"any":[]}}}]},
{"label":"13([#25])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-parts@115,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"7\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-parts@115: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"7\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-parts@115,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"7\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-parts@115: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"7\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"14([k@[mcore:[#773]#9]#11])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match (parts) {\n  ((std/core/types/@Optional((@uniq-parts@115: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1@0: ? ((list :: V -> V)<string>))\n     -> @uniq-parts@115;\n  ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n     -> (match (@this) {\n      ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n         -> @x@0;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"7\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":6,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":2,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"7\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (parts) {\n  ((std/core/types/@Optional((@uniq-parts@115: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1@0: ? ((list :: V -> V)<string>))\n     -> @uniq-parts@115;\n  ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n     -> (match (@this) {\n      ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n         -> @x@0;\n    });\n}","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":1,"clauses":[{"tag":"std/core/types/@Optional","target":13,"args":{"any":[2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3848]","target":12,"args":{"any":[]}}}]},
{"label":"15([#27])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"16([k@[#28]#30])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"17([match_def@[#28]#32])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"18([match_std/os/path/Path@[#28]#33])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"5\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"5\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"6\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"5\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"5\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"6\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"19([#28])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"root\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@this) {\n  ((@skip std/os/path/Path((@x: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@1: std/os/path/path)\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"5\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"5\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@this) {\n  ((@skip std/os/path/Path((@x: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@1: std/os/path/path)\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"root\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":0,"clauses":[{"tag":"std/os/path/Path","target":18,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3849]","target":17,"args":{"any":[]}}}]},
{"label":"20([match_def@[mcore:[#773]#9]#26])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"root\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"root\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":1,"clauses":[{"tag":"std/core/types/@None","target":19,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3850]","target":15,"args":{"any":[]}}}]},
{"label":"21([#34])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"root\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-root@108,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"4\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-root@108: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"root\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-root@108,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"4\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-root@108: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"22([mcore:[#773]#9])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/Path((match (root) {\n    ((std/core/types/@Optional((@uniq-root@108: string) : string) : ? string ) as @pat: ? string)\n       -> @uniq-root@108;\n    ((@skip std/core/types/@None() : ? string ) as @pat@0: ? string)\n       -> (match (@this) {\n        ((@skip std/os/path/Path((@x: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@1: std/os/path/path)\n           -> @x;\n      });\n  }), (match (parts) {\n    ((std/core/types/@Optional((@uniq-parts@115: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1@0: ? ((list :: V -> V)<string>))\n       -> @uniq-parts@115;\n    ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n       -> (match (@this) {\n        ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n           -> @x@0;\n      });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (root) {\n  ((std/core/types/@Optional((@uniq-root@108: string) : string) : ? string ) as @pat: ? string)\n     -> @uniq-root@108;\n  ((@skip std/core/types/@None() : ? string ) as @pat@0: ? string)\n     -> (match (@this) {\n      ((@skip std/os/path/Path((@x: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@1: std/os/path/path)\n         -> @x;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"root\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"4\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":14,"args":{"any":[0,2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"root\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"4\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (root) {\n  ((std/core/types/@Optional((@uniq-root@108: string) : string) : ? string ) as @pat: ? string)\n     -> @uniq-root@108;\n  ((@skip std/core/types/@None() : ? string ) as @pat@0: ? string)\n     -> (match (@this) {\n      ((@skip std/os/path/Path((@x: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@1: std/os/path/path)\n         -> @x;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/Path((match (root) {\n    ((std/core/types/@Optional((@uniq-root@108: string) : string) : ? string ) as @pat: ? string)\n       -> @uniq-root@108;\n    ((@skip std/core/types/@None() : ? string ) as @pat@0: ? string)\n       -> (match (@this) {\n        ((@skip std/os/path/Path((@x: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@1: std/os/path/path)\n           -> @x;\n      });\n  }), (match (parts) {\n    ((std/core/types/@Optional((@uniq-parts@115: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1@0: ? ((list :: V -> V)<string>))\n       -> @uniq-parts@115;\n    ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n       -> (match (@this) {\n        ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n           -> @x@0;\n      });\n  }))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":1,"clauses":[{"tag":"std/core/types/@Optional","target":21,"args":{"any":[2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3851]","target":20,"args":{"any":[]}}}]},
{"label":"23([mcore:[#774]#35])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/os/path/@extern-xapp-path"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"24([match_def@[mcore:[#778]#38]#39])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"25([k@[#40]#42])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"26([match_def@[match_def@[#40]#44]#45])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"27([k@[#46]#51])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"28([match_def@[match_def@[#46]#53]#54])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"29([#55])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@2,{\"op\": \"Var\",\"id\": \"@x14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"15\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@2,{\"op\": \"Var\",\"id\": \"@x14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"15\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"30([match_def@[#46]#53])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"15\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"15\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":29,"args":{"any":[0]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3852]","target":28,"args":{"any":[]}}}]},
{"label":"31([match_std/core/types/Nothing@[#46]#56])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"32([#46])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@2: ((maybe :: V -> V)<string>))\n     -> x@1;\n}","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@2: ((maybe :: V -> V)<string>))\n     -> x@1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Nothing","target":31,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3853]","target":30,"args":{"any":[]}}}]},
{"label":"33([match_def@[#40]#44])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":32,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3854]","target":26,"args":{"any":[]}}}]},
{"label":"34([match_std/core/types/Cons@[#40]#59])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"12\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"12\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"13\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"12\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"12\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"13\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"35([#40])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"10\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"10\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@x) {\n  ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> x@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@2: ((maybe :: V -> V)<string>))\n         -> x@1;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"12\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"12\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@x) {\n  ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> x@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@2: ((maybe :: V -> V)<string>))\n         -> x@1;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"10\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"10\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":34,"args":{"any":[1,2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3855]","target":33,"args":{"any":[]}}}]},
{"label":"36([mcore:[#778]#38])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"10\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"10\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":0,"clauses":[{"tag":"std/os/path/Path","target":35,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3856]","target":24,"args":{"any":[]}}}]},
{"label":"37([k@[k@[mcore:[#786]#60]#65]#68])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":1139}]},
{"label":"38([match_def@[k@[mcore:[#786]#60]#65]#70])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"39([k@[#71]#73])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"40([match_def@[match_def@[#71]#75]#76])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"41([#77])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"21\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"21\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"42([match_def@[#71]#75])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"21\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"21\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":41,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3857]","target":40,"args":{"any":[]}}}]},
{"label":"43([match_std/core/types/Cons@[#71]#82])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"21\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"22\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"22\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"23\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"21\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"22\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"22\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"23\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"44([#71])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"20\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"20\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"21\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@x) {\n  ((std/core/types/Cons((@pat@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat: ((list :: V -> V)<string>))\n     -> xx;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"21\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"22\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"21\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"22\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@x) {\n  ((std/core/types/Cons((@pat@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat: ((list :: V -> V)<string>))\n     -> xx;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"20\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"20\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"21\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":43,"args":{"any":[1,2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3858]","target":42,"args":{"any":[]}}}]},
{"label":"45([k@[mcore:[#786]#60]#65])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@0: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2: std/os/path/path)\n     -> (match (@x) {\n      ((std/core/types/Cons((@pat@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat: ((list :: V -> V)<string>))\n         -> xx;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n         -> std/core/types/Nil<string>;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"20\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":37,"args":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"20\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@0: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2: std/os/path/path)\n     -> (match (@x) {\n      ((std/core/types/Cons((@pat@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat: ((list :: V -> V)<string>))\n         -> xx;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n         -> std/core/types/Nil<string>;\n    });\n}","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":1,"clauses":[{"tag":"std/os/path/Path","target":44,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3859]","target":38,"args":{"any":[]}}}]},
{"label":"46([#84])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"47([k@[#85]#87])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"48([match_def@[#85]#89])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"49([match_std/os/path/Path@[#85]#90])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"18\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"19\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@2: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"19\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"18\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"19\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@2: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"19\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"50([#85])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"@x16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (p) {\n  ((@skip std/os/path/Path((@x@0: string) : string, (@pat@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n     -> @x@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"18\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"19\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"18\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"19\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p) {\n  ((@skip std/os/path/Path((@x@0: string) : string, (@pat@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n     -> @x@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"@x16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":0,"clauses":[{"tag":"std/os/path/Path","target":49,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3860]","target":48,"args":{"any":[]}}}]},
{"label":"51([match_def@[mcore:[#786]#60]#83])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":1,"clauses":[{"tag":"std/core/types/@None","target":50,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3861]","target":46,"args":{"any":[]}}}]},
{"label":"52([#91])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-root@108,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"17\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-root@108: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-root@108,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"17\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-root@108: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"53([mcore:[#786]#60])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/Path((match ((std/core/types/@None<string>)) {\n    ((std/core/types/@Optional((@uniq-root@108: string) : string) : ? string ) as @pat@3: ? string)\n       -> @uniq-root@108;\n    ((@skip std/core/types/@None() : ? string ) as @pat@0@1: ? string)\n       -> (match (p) {\n        ((@skip std/os/path/Path((@x@0: string) : string, (@pat@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n           -> @x@0;\n      });\n  }), (match (p) {\n    ((@skip std/os/path/Path((@pat@0@0: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2: std/os/path/path)\n       -> (match (@x) {\n        ((std/core/types/Cons((@pat@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat: ((list :: V -> V)<string>))\n           -> xx;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n           -> std/core/types/Nil<string>;\n      });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/types/@None<string>)) {\n  ((std/core/types/@Optional((@uniq-root@108: string) : string) : ? string ) as @pat@3: ? string)\n     -> @uniq-root@108;\n  ((@skip std/core/types/@None() : ? string ) as @pat@0@1: ? string)\n     -> (match (p) {\n      ((@skip std/os/path/Path((@x@0: string) : string, (@pat@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n         -> @x@0;\n    });\n}","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"17\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":45,"args":{"any":[0]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"17\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/types/@None<string>)) {\n  ((std/core/types/@Optional((@uniq-root@108: string) : string) : ? string ) as @pat@3: ? string)\n     -> @uniq-root@108;\n  ((@skip std/core/types/@None() : ? string ) as @pat@0@1: ? string)\n     -> (match (p) {\n      ((@skip std/os/path/Path((@x@0: string) : string, (@pat@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n         -> @x@0;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/Path((match ((std/core/types/@None<string>)) {\n    ((std/core/types/@Optional((@uniq-root@108: string) : string) : ? string ) as @pat@3: ? string)\n       -> @uniq-root@108;\n    ((@skip std/core/types/@None() : ? string ) as @pat@0@1: ? string)\n       -> (match (p) {\n        ((@skip std/os/path/Path((@x@0: string) : string, (@pat@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n           -> @x@0;\n      });\n  }), (match (p) {\n    ((@skip std/os/path/Path((@pat@0@0: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2: std/os/path/path)\n       -> (match (@x) {\n        ((std/core/types/Cons((@pat@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat: ((list :: V -> V)<string>))\n           -> xx;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n           -> std/core/types/Nil<string>;\n      });\n  }))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":52,"args":{"any":[2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3862]","target":51,"args":{"any":[]}}}]},
{"label":"54([mcore:[#787]#92])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"55([k@[k@[mcore:[#793]#98]#100]#103])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":54}]},
{"label":"56([#109])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"57([#110])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@1,{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@1,{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"58([match_def@[k@[mcore:[#793]#98]#100]#108])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":57,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3863]","target":56,"args":{"any":[]}}}]},
{"label":"59([#115])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(@pat@0@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"28\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"28\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"29\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"29\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(@pat@0@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"28\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"28\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"29\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"29\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"60([k@[mcore:[#793]#98]#100])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match (parts) {\n  ((std/core/types/Cons((@pat@0@1@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n     -> xx;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1: ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"28\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"29\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":55,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"28\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"29\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (parts) {\n  ((std/core/types/Cons((@pat@0@1@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n     -> xx;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1: ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":59,"args":{"any":[1,2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3864]","target":58,"args":{"any":[]}}}]},
{"label":"61([#117])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"62([k@[#118]#123])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"63([match_def@[match_def@[#118]#125]#126])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"64([#127])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"@x26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"27\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"27\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"@x26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"27\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"27\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"65([match_def@[#118]#125])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"27\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"27\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":64,"args":{"any":[0]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3865]","target":63,"args":{"any":[]}}}]},
{"label":"66([match_std/core/types/Nothing@[#118]#128])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"67([#118])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@1: ((maybe :: V -> V)<string>))\n     -> x@1;\n}","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@1: ((maybe :: V -> V)<string>))\n     -> x@1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Nothing","target":66,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3866]","target":65,"args":{"any":[]}}}]},
{"label":"68([match_def@[mcore:[#793]#98]#116])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":67,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3867]","target":61,"args":{"any":[]}}}]},
{"label":"69([#131])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"24\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"25\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"24\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"25\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"70([mcore:[#793]#98])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<string,(list :: V -> V)<string>>((match (parts) {\n    ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n       -> x@0;\n    ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n       -> (match ((std/core/types/Nothing<string>)) {\n        ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat: ((maybe :: V -> V)<string>))\n           -> \"\";\n        ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@1: ((maybe :: V -> V)<string>))\n           -> x@1;\n      });\n  }), (match (parts) {\n    ((std/core/types/Cons((@pat@0@1@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n       -> xx;\n    ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1: ((list :: V -> V)<string>))\n       -> std/core/types/Nil<string>;\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (parts) {\n  ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> x@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@1: ((maybe :: V -> V)<string>))\n         -> x@1;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"24\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"25\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":60,"args":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"24\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"25\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (parts) {\n  ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> x@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@1: ((maybe :: V -> V)<string>))\n         -> x@1;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<string,(list :: V -> V)<string>>((match (parts) {\n    ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n       -> x@0;\n    ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n       -> (match ((std/core/types/Nothing<string>)) {\n        ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat: ((maybe :: V -> V)<string>))\n           -> \"\";\n        ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@1: ((maybe :: V -> V)<string>))\n           -> x@1;\n      });\n  }), (match (parts) {\n    ((std/core/types/Cons((@pat@0@1@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n       -> xx;\n    ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1: ((list :: V -> V)<string>))\n       -> std/core/types/Nil<string>;\n  }))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":69,"args":{"any":[1,2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3868]","target":68,"args":{"any":[]}}}]},
{"label":"71([mcore:[#794]#132])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/os/path/@extern-xrealpath"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"72([mcore:[#795]#135])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/list/@lift-reverse-append@4790"}]},
{"label":"73([mcore:[#803]#141])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/(++)"}]},
{"label":"74([mcore:[#806]#147])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"CallLib","lib":3,"symbol":"std/core/list/@lift-joinsep@4797"}]},
{"label":"75([#171])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":73}]},
{"label":"76([match_def@[#176]#177])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"77([#185])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"78([match_std/core/types/Cons@[#176]#178])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"32\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"32\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"33\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"33\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-joinsep@4797(\"/\", xx, x)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"/\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"/"},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":2,"b":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"/\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-joinsep@4797(\"/\", xx, x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"32\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"32\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"33\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"33\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":74}]},
{"label":"79([#176])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"32\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"33\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"32\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"33\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":78,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3869]","target":76,"args":{"any":[]}}}]},
{"label":"80([#187])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"81([k@[k@[k@[mcore:[#812]#154]#160]#166]#168])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match (xs@10015) {\n  ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n     -> std/core/list/@lift-joinsep@4797(\"/\", xx, x);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Push","target":75,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (xs@10015) {\n  ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n     -> std/core/list/@lift-joinsep@4797(\"/\", xx, x);\n}","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":80,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3870]","target":79,"args":{"any":[]}}}]},
{"label":"82([#190])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"83([#191])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"30\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"30\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"30\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"30\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"84([k@[k@[mcore:[#812]#154]#160]#166])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/(++)((match (p) {\n    ((@skip std/os/path/Path((@x: string) : string, (@pat@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat: std/os/path/path)\n       -> @x;\n  }), (match (xs@10015) {\n    ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n       -> \"\";\n    ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n       -> std/core/list/@lift-joinsep@4797(\"/\", xx, x);\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (p) {\n  ((@skip std/os/path/Path((@x: string) : string, (@pat@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat: std/os/path/path)\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"30\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":81,"args":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"30\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p) {\n  ((@skip std/os/path/Path((@x: string) : string, (@pat@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat: std/os/path/path)\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/(++)((match (p) {\n    ((@skip std/os/path/Path((@x: string) : string, (@pat@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat: std/os/path/path)\n       -> @x;\n  }), (match (xs@10015) {\n    ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n       -> \"\";\n    ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n       -> std/core/list/@lift-joinsep@4797(\"/\", xx, x);\n  }))","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":1,"clauses":[{"tag":"std/os/path/Path","target":83,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3871]","target":82,"args":{"any":[]}}}]},
{"label":"85([k@[mcore:[#812]#154]#160])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":84,"args":{"any":[1]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Copy","from":3,"to":2},
{"op":"Jump","target":72}]},
{"label":"86([match_def@[mcore:[#812]#154]#192])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"87([k@[#193]#195])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"88([match_def@[match_def@[#193]#197]#198])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"89([#199])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"90([match_def@[#193]#197])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":89,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3872]","target":88,"args":{"any":[]}}}]},
{"label":"91([match_std/core/types/Cons@[#193]#204])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"32\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"32\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"33\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"33\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"32\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"32\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"33\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"33\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"92([#193])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"30\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"30\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@x@0) {\n  ((std/core/types/Cons((@pat@0@0: string) : string, (xx@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@3: ((list :: V -> V)<string>))\n     -> xx@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"32\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"33\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"32\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"33\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@x@0) {\n  ((std/core/types/Cons((@pat@0@0: string) : string, (xx@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@3: ((list :: V -> V)<string>))\n     -> xx@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"30\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"30\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":91,"args":{"any":[1,2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3873]","target":90,"args":{"any":[]}}}]},
{"label":"93([mcore:[#812]#154])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"xs@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-reverse-append@4790<string>((std/core/types/Nil<string>), (match (p) {\n    ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n       -> (match (@x@0) {\n        ((std/core/types/Cons((@pat@0@0: string) : string, (xx@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@3: ((list :: V -> V)<string>))\n           -> xx@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n           -> std/core/types/Nil<string>;\n      });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"BGN: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n     -> (match (@x@0) {\n      ((std/core/types/Cons((@pat@0@0: string) : string, (xx@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@3: ((list :: V -> V)<string>))\n         -> xx@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n         -> std/core/types/Nil<string>;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"30\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":85,"args":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"30\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n     -> (match (@x@0) {\n      ((std/core/types/Cons((@pat@0@0: string) : string, (xx@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@3: ((list :: V -> V)<string>))\n         -> xx@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n         -> std/core/types/Nil<string>;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-reverse-append@4790<string>((std/core/types/Nil<string>), (match (p) {\n    ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n       -> (match (@x@0) {\n        ((std/core/types/Cons((@pat@0@0: string) : string, (xx@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@3: ((list :: V -> V)<string>))\n           -> xx@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n           -> std/core/types/Nil<string>;\n      });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"xs@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":0,"clauses":[{"tag":"std/os/path/Path","target":92,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3874]","target":86,"args":{"any":[]}}}]},
{"label":"94([mcore:[#813]#205])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/list/@lift-reverse-append@4790"}]},
{"label":"95([k@[mcore:[#818]#211]#217])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":94}]},
{"label":"96([match_def@[mcore:[#818]#211]#222])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"97([#223])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"34\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"34\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"35\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"35\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"34\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"34\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"35\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"35\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"98([mcore:[#818]#211])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-reverse-append@4790<string>((std/core/types/Nil<string>), (match (p) {\n    ((@skip std/os/path/Path((@pat@0: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat: std/os/path/path)\n       -> @x;\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"BGN: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat: std/os/path/path)\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"34\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"35\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":95,"args":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"34\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"35\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat: std/os/path/path)\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-reverse-append@4790<string>((std/core/types/Nil<string>), (match (p) {\n    ((@skip std/os/path/Path((@pat@0: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat: std/os/path/path)\n       -> @x;\n  }))","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":0,"clauses":[{"tag":"std/os/path/Path","target":97,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3875]","target":96,"args":{"any":[]}}}]},
{"label":"99([mcore:[#819]#224])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/os/path/@extern-xhomedir"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"100([mcore:[#820]#227])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/@Optional"}]},
{"label":"101([mcore:[#822]#232])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/list/take"}]},
{"label":"102([#258])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":1139}]},
{"label":"103([match_def@[#260]#261])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"104([#264])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"105([#266])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"106([#267])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"37\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"37\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"38\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"38\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"37\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"37\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"38\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"38\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"107([match_std/core/types/@None@[#260]#262])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"parts@10024\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n     -> @x@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"37\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"38\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"37\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"38\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n     -> @x@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"parts@10024\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":0,"clauses":[{"tag":"std/os/path/Path","target":106,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3876]","target":105,"args":{"any":[]}}}]},
{"label":"108([#260])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"parts@10024\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"parts@10024\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":1,"clauses":[{"tag":"std/core/types/@None","target":107,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3877]","target":103,"args":{"any":[]}}}]},
{"label":"109([#268])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"parts@10024\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-parts@115,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"36\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-parts@115: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"36\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"parts@10024\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-parts@115,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"36\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-parts@115: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"36\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"110([k@[k@[k@[mcore:[#830]#238]#240]#248]#254])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/Path(\"\", (match (parts@10024) {\n    ((std/core/types/@Optional((@uniq-parts@115: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1@0: ? ((list :: V -> V)<string>))\n       -> @uniq-parts@115;\n    ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n       -> (match (p) {\n        ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n           -> @x@0;\n      });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":""},
{"op":"Debug","msg":"BGN: genExpr: match (parts@10024) {\n  ((std/core/types/@Optional((@uniq-parts@115: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1@0: ? ((list :: V -> V)<string>))\n     -> @uniq-parts@115;\n  ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n     -> (match (p) {\n      ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n         -> @x@0;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"parts@10024\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"36\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":102,"args":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"parts@10024\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"36\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (parts@10024) {\n  ((std/core/types/@Optional((@uniq-parts@115: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1@0: ? ((list :: V -> V)<string>))\n     -> @uniq-parts@115;\n  ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n     -> (match (p) {\n      ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n         -> @x@0;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/Path(\"\", (match (parts@10024) {\n    ((std/core/types/@Optional((@uniq-parts@115: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1@0: ? ((list :: V -> V)<string>))\n       -> @uniq-parts@115;\n    ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n       -> (match (p) {\n        ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n           -> @x@0;\n      });\n  }))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":1,"clauses":[{"tag":"std/core/types/@Optional","target":109,"args":{"any":[2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3878]","target":108,"args":{"any":[]}}}]},
{"label":"111([k@[k@[mcore:[#830]#238]#240]#248])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":110,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Jump","target":100}]},
{"label":"112([k@[mcore:[#830]#238]#240])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: 1","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":1},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":111,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":3,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1","traced":{"any":[]}},
{"op":"Jump","target":101}]},
{"label":"113([match_def@[mcore:[#830]#238]#269])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"114([#270])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"36\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"36\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"37\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"37\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"36\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"36\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"37\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"37\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"115([mcore:[#830]#238])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"parts@10024\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@Optional<(list :: V -> V)<string>>((std/core/list/take<string>((match (p) {\n    ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n       -> @x@1;\n  }), 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/take<string>((match (p) {\n    ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n       -> @x@1;\n  }), 1)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n     -> @x@1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"36\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"37\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":112,"args":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"36\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"37\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n     -> @x@1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/take<string>((match (p) {\n    ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n       -> @x@1;\n  }), 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@Optional<(list :: V -> V)<string>>((std/core/list/take<string>((match (p) {\n    ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n       -> @x@1;\n  }), 1)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"parts@10024\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":0,"clauses":[{"tag":"std/os/path/Path","target":114,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3879]","target":113,"args":{"any":[]}}}]},
{"label":"116([match_def@[mcore:[#835]#271]#272])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"117([k@[k@[#273]#275]#277])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"118([#280])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"119([k@[#281]#286])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"120([match_def@[match_def@[#281]#288]#289])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"121([#290])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@3,{\"op\": \"Var\",\"id\": \"@x46\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"47\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"47\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@3,{\"op\": \"Var\",\"id\": \"@x46\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"47\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"47\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"122([match_def@[#281]#288])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x46\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"47\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x46\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"47\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":121,"args":{"any":[0]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3880]","target":120,"args":{"any":[]}}}]},
{"label":"123([match_std/core/types/Nothing@[#281]#291])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x46\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x46\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"124([#281])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"@x41\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n     -> x@1;\n}","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x46\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x46\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n     -> x@1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"@x41\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Nothing","target":123,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3881]","target":122,"args":{"any":[]}}}]},
{"label":"125([match_def@[k@[#273]#275]#279])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x41\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x41\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":124,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3882]","target":118,"args":{"any":[]}}}]},
{"label":"126([#294])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x41\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"44\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"44\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"45\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"45\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x41\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"44\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"44\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"45\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"45\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"127([k@[#273]#275])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x41\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"44\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"45\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x41\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"44\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"45\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":126,"args":{"any":[1,2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3883]","target":125,"args":{"any":[]}}}]},
{"label":"128([match_def@[match_def@[#273]#295]#296])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"129([#297])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"40\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"40\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"40\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"40\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"130([match_def@[#273]#295])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"40\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"40\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"40\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"40\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":129,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3884]","target":128,"args":{"any":[]}}}]},
{"label":"131([match_std/core/types/Cons@[#273]#302])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"40\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"40\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"42\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"42\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"43\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"43\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"40\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"40\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"42\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"42\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"43\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"43\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"132([#273])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"39\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"39\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"40\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"40\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((match (@x) {\n  ((std/core/types/Cons((@pat@0@1: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n     -> xx;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1: ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n})) {\n  ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> x@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n         -> x@1;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"40\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"40\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"42\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"43\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":127,"args":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"40\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"40\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"42\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"43\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((match (@x) {\n  ((std/core/types/Cons((@pat@0@1: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n     -> xx;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1: ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n})) {\n  ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> x@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n         -> x@1;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"39\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"39\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"40\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"40\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":131,"args":{"any":[1,2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3885]","target":130,"args":{"any":[]}}}]},
{"label":"133([mcore:[#835]#271])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"39\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"40\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"39\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"40\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":0,"clauses":[{"tag":"std/os/path/Path","target":132,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3886]","target":116,"args":{"any":[]}}}]},
{"label":"134([mcore:[#836]#303])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/os/path/@extern-partsep"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"135([mcore:[#837]#306])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/os/path/@extern-pathsep"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"136([match_def@[mcore:[#838]#309]#310])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"137([#311])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"48\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"48\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"49\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"49\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"48\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"48\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"49\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"49\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"138([mcore:[#838]#309])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"48\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"49\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"48\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"49\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":0,"clauses":[{"tag":"std/os/path/Path","target":137,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3887]","target":136,"args":{"any":[]}}}]},
{"label":"139([mcore:[#839]#312])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/os/path/@extern-xtempdir"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"140([k@[switch case for Bool(true)#321]#323])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"141([#325])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"142([k@[#326]#328])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"143([match_def@[#326]#330])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"54\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"54\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"54\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"54\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"144([match_std/core/types/Nil@[#326]#333])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"54\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"54\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"54\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"54\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"145([#326])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"53\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"53\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"54\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"54\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@x@0) {\n  ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n     -> std/core/types/True;\n  (@pat@0@0: ((list :: V -> V)<string>))\n     -> std/core/types/False;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"54\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"54\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"54\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"54\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@x@0) {\n  ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n     -> std/core/types/True;\n  (@pat@0@0: ((list :: V -> V)<string>))\n     -> std/core/types/False;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"53\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"53\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"54\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"54\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Nil","target":144,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3888]","target":143,"args":{"any":[]}}}]},
{"label":"146([switch case for Bool(true)#321])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x50\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n     -> (match (@x@0) {\n      ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n         -> std/core/types/True;\n      (@pat@0@0: ((list :: V -> V)<string>))\n         -> std/core/types/False;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"53\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"54\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"53\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"54\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n     -> (match (@x@0) {\n      ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n         -> std/core/types/True;\n      (@pat@0@0: ((list :: V -> V)<string>))\n         -> std/core/types/False;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x50\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":0,"clauses":[{"tag":"std/os/path/Path","target":145,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3889]","target":141,"args":{"any":[]}}}]},
{"label":"147([switch default case#336])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@2,{\"op\": \"Var\",\"id\": \"@x50\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@2,{\"op\": \"Var\",\"id\": \"@x50\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"148([k@[mcore:[#843]#315]#317])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":""},
{"op":"PrimOp","name":"infixEq(String, String): Boolean","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[146],"default":147}]},
{"label":"149([match_def@[mcore:[#843]#315]#339])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"150([#340])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"51\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"51\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"52\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"52\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"51\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"51\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"52\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"52\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"151([mcore:[#843]#315])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/(==)((match (p) {\n    ((@skip std/os/path/Path((@x: string) : string, (@pat@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat: std/os/path/path)\n       -> @x;\n  }), \"\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (p) {\n  ((@skip std/os/path/Path((@x: string) : string, (@pat@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat: std/os/path/path)\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"51\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"52\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":148,"args":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"51\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"52\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p) {\n  ((@skip std/os/path/Path((@x: string) : string, (@pat@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat: std/os/path/path)\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/(==)((match (p) {\n    ((@skip std/os/path/Path((@x: string) : string, (@pat@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat: std/os/path/path)\n       -> @x;\n  }), \"\")","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":0,"clauses":[{"tag":"std/os/path/Path","target":150,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3890]","target":149,"args":{"any":[]}}}]},
{"label":"152([k@[switch case for Bool(true)#347]#349])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"153([#351])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"154([k@[#352]#354])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"155([match_def@[#352]#356])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"59\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"59\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"59\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"59\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"156([match_std/core/types/Nil@[#352]#357])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"59\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"59\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"59\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"59\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"157([#352])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"p1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"58\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"58\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"59\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"59\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@x@0) {\n  ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n     -> p2;\n  (@pat@0@0: ((list :: V -> V)<string>))\n     -> p1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"59\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"59\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"59\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"59\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@x@0) {\n  ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n     -> p2;\n  (@pat@0@0: ((list :: V -> V)<string>))\n     -> p1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"p1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"58\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"58\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"59\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"59\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":3,"clauses":[{"tag":"std/core/types/Nil","target":156,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3891]","target":155,"args":{"any":[]}}}]},
{"label":"158([switch case for Bool(true)#347])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x55\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (p1) {\n  ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n     -> (match (@x@0) {\n      ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n         -> p2;\n      (@pat@0@0: ((list :: V -> V)<string>))\n         -> p1;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"58\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"59\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"58\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"59\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p1) {\n  ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n     -> (match (@x@0) {\n      ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n         -> p2;\n      (@pat@0@0: ((list :: V -> V)<string>))\n         -> p1;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x55\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":0,"clauses":[{"tag":"std/os/path/Path","target":157,"args":{"any":[2,3]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3892]","target":153,"args":{"any":[]}}}]},
{"label":"159([switch default case#358])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@2,{\"op\": \"Var\",\"id\": \"@x55\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@2,{\"op\": \"Var\",\"id\": \"@x55\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"160([k@[mcore:[#847]#341]#343])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":""},
{"op":"PrimOp","name":"infixEq(String, String): Boolean","out":{"any":[0]},"in":{"any":[0,3]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[158],"default":159}]},
{"label":"161([match_def@[mcore:[#847]#341]#359])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"162([#360])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"p1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"56\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"56\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"57\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"57\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"p1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"56\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"56\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"57\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"57\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"163([mcore:[#847]#341])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/(==)((match (p1) {\n    ((@skip std/os/path/Path((@x: string) : string, (@pat@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat: std/os/path/path)\n       -> @x;\n  }), \"\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (p1) {\n  ((@skip std/os/path/Path((@x: string) : string, (@pat@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat: std/os/path/path)\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"56\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"57\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":160,"args":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"56\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"57\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p1) {\n  ((@skip std/os/path/Path((@x: string) : string, (@pat@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat: std/os/path/path)\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/(==)((match (p1) {\n    ((@skip std/os/path/Path((@x: string) : string, (@pat@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat: std/os/path/path)\n       -> @x;\n  }), \"\")","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":0,"clauses":[{"tag":"std/os/path/Path","target":162,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3893]","target":161,"args":{"any":[]}}}]},
{"label":"164([mcore:[#857]#361])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"165([mcore:[#861]#367])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"166([switch case for Bool(true)#377])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"dir\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \".\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"dir\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \".\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"167([k@[switch default case#378]#383])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"168([switch case for Bool(true)#385])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"dir\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"dir\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"169([k@[switch case for Bool(false)#390]#395])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"170([k@[switch case for Bool(true)#397]#399])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"171([match_def@[#401]#402])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"172([k@[match_std/core/types/Nil@[#401]#403]#408])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"173([match_std/core/types/Nil@[#401]#403])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"dirs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<string>(dir, dirs)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<string>(dir, dirs)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"dirs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Jump","target":164}]},
{"label":"174([#401])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"dirs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"dirs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Nil","target":173,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3894]","target":171,"args":{"any":[]}}}]},
{"label":"175([k@[#410]#412])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"176([match_def@[match_def@[#410]#414]#415])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"177([#416])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@1,{\"op\": \"Var\",\"id\": \"dirs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@1,{\"op\": \"Var\",\"id\": \"dirs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"178([match_def@[#410]#414])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"dirs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"dirs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":177,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3895]","target":176,"args":{"any":[]}}}]},
{"label":"179([match_std/core/types/Cons@[#410]#421])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@6,{\"op\": \"Var\",\"id\": \"dirs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"62\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"62\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"63\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"63\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@6,{\"op\": \"Var\",\"id\": \"dirs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"62\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"62\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"63\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"63\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"180([#410])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"dirs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"60\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"60\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"61\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@1@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"61\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (dirs) {\n  ((std/core/types/Cons((@pat@0@1: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@6: ((list :: V -> V)<string>))\n     -> xx;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1: ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"dirs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"62\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"63\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"dirs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"62\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"63\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (dirs) {\n  ((std/core/types/Cons((@pat@0@1: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@6: ((list :: V -> V)<string>))\n     -> xx;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1: ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"dirs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"60\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"60\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"61\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@1@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"61\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":179,"args":{"any":[1,2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3896]","target":178,"args":{"any":[]}}}]},
{"label":"181([switch case for Bool(true)#397])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"dir\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"..\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (dirs) {\n  ((std/core/types/Cons((@pat@0@0: string) : string, (@pat@1@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@4: ((list :: V -> V)<string>))\n     -> (match (dirs) {\n      ((std/core/types/Cons((@pat@0@1: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@6: ((list :: V -> V)<string>))\n         -> xx;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1: ((list :: V -> V)<string>))\n         -> std/core/types/Nil<string>;\n    });\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@2@0: ((list :: V -> V)<string>))\n     -> std/core/types/Cons<string>(dir, dirs);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"dirs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"60\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"61\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"dirs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"60\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"61\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (dirs) {\n  ((std/core/types/Cons((@pat@0@0: string) : string, (@pat@1@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@4: ((list :: V -> V)<string>))\n     -> (match (dirs) {\n      ((std/core/types/Cons((@pat@0@1: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@6: ((list :: V -> V)<string>))\n         -> xx;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1: ((list :: V -> V)<string>))\n         -> std/core/types/Nil<string>;\n    });\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@2@0: ((list :: V -> V)<string>))\n     -> std/core/types/Cons<string>(dir, dirs);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"dir\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"..\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Cons","target":180,"args":{"any":[2,3]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3897]","target":174,"args":{"any":[]}}}]},
{"label":"182([k@[switch default case#422]#427])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"183([switch default case#422])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@4@0,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"dir\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"..\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<string>(dir, dirs)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<string>(dir, dirs)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4@0,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"dir\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"..\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Jump","target":165}]},
{"label":"184([switch case for Bool(false)#390])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"dir\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/string/(==)(dir, \"..\"))) {\n  ((std/core/types/True() : bool ) as @pat@3: bool)\n     -> (match (dirs) {\n      ((std/core/types/Cons((@pat@0@0: string) : string, (@pat@1@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@4: ((list :: V -> V)<string>))\n         -> (match (dirs) {\n          ((std/core/types/Cons((@pat@0@1: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@6: ((list :: V -> V)<string>))\n             -> xx;\n          ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1: ((list :: V -> V)<string>))\n             -> std/core/types/Nil<string>;\n        });\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@2@0: ((list :: V -> V)<string>))\n         -> std/core/types/Cons<string>(dir, dirs);\n    });\n  (@pat@4@0: bool)\n     -> std/core/types/Cons<string>(dir, dirs);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":".."},
{"op":"PrimOp","name":"infixEq(String, String): Boolean","out":{"any":[2]},"in":{"any":[0,2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/string/(==)(dir, \"..\"))) {\n  ((std/core/types/True() : bool ) as @pat@3: bool)\n     -> (match (dirs) {\n      ((std/core/types/Cons((@pat@0@0: string) : string, (@pat@1@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@4: ((list :: V -> V)<string>))\n         -> (match (dirs) {\n          ((std/core/types/Cons((@pat@0@1: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@6: ((list :: V -> V)<string>))\n             -> xx;\n          ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1: ((list :: V -> V)<string>))\n             -> std/core/types/Nil<string>;\n        });\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@2@0: ((list :: V -> V)<string>))\n         -> std/core/types/Cons<string>(dir, dirs);\n    });\n  (@pat@4@0: bool)\n     -> std/core/types/Cons<string>(dir, dirs);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"dir\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[181],"default":183}]},
{"label":"185([switch default case#429])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"186([switch default case#386])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":2,"value":""},
{"op":"PrimOp","name":"infixEq(String, String): Boolean","out":{"any":[2]},"in":{"any":[0,2]}},
{"op":"Switch","arg":2,"values":[false],"targets":[184],"default":185}]},
{"label":"187([switch default case#378])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"dir\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \".\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/string/(==)(dir, \"\"))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> dirs;\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> (match ((std/core/string/(==)(dir, \"..\"))) {\n      ((std/core/types/True() : bool ) as @pat@3: bool)\n         -> (match (dirs) {\n          ((std/core/types/Cons((@pat@0@0: string) : string, (@pat@1@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@4: ((list :: V -> V)<string>))\n             -> (match (dirs) {\n              ((std/core/types/Cons((@pat@0@1: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@6: ((list :: V -> V)<string>))\n                 -> xx;\n              ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1: ((list :: V -> V)<string>))\n                 -> std/core/types/Nil<string>;\n            });\n          ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@2@0: ((list :: V -> V)<string>))\n             -> std/core/types/Cons<string>(dir, dirs);\n        });\n      (@pat@4@0: bool)\n         -> std/core/types/Cons<string>(dir, dirs);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":""},
{"op":"PrimOp","name":"infixEq(String, String): Boolean","out":{"any":[2]},"in":{"any":[0,2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/string/(==)(dir, \"\"))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> dirs;\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> (match ((std/core/string/(==)(dir, \"..\"))) {\n      ((std/core/types/True() : bool ) as @pat@3: bool)\n         -> (match (dirs) {\n          ((std/core/types/Cons((@pat@0@0: string) : string, (@pat@1@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@4: ((list :: V -> V)<string>))\n             -> (match (dirs) {\n              ((std/core/types/Cons((@pat@0@1: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@6: ((list :: V -> V)<string>))\n                 -> xx;\n              ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1: ((list :: V -> V)<string>))\n                 -> std/core/types/Nil<string>;\n            });\n          ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@2@0: ((list :: V -> V)<string>))\n             -> std/core/types/Cons<string>(dir, dirs);\n        });\n      (@pat@4@0: bool)\n         -> std/core/types/Cons<string>(dir, dirs);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"dir\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \".\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[168],"default":186}]},
{"label":"188([mcore:[#865]#373])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"."},
{"op":"PrimOp","name":"infixEq(String, String): Boolean","out":{"any":[2]},"in":{"any":[0,2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[166],"default":187}]},
{"label":"189([#432])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"190([#433])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"191([match_def@[mcore:[#872]#430]#431])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Nil","target":190,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3898]","target":189,"args":{"any":[]}}}]},
{"label":"192([k@[k@[#434]#439]#445])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"193([k@[#434]#439])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":195}]},
{"label":"194([#434])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(part,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"64\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (part: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"64\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"65\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (rest: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"65\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/push-parts(rest, (std/os/path/push-part(part, dirs)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/push-part(part, dirs)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":193,"args":{"any":[3]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/push-part(part, dirs)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/push-parts(rest, (std/os/path/push-part(part, dirs)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(part,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"64\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (part: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"64\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"65\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (rest: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"65\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":188}]},
{"label":"195([mcore:[#872]#430])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"64\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"65\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"64\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"65\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":1,"clauses":[{"tag":"std/core/types/Cons","target":194,"args":{"any":[2,3]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3899]","target":191,"args":{"any":[]}}}]},
{"label":"196([mcore:[#873]#447])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/text/parse/(||)"}]},
{"label":"197([mcore:[#875]#453])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"CallLib","lib":0,"symbol":"std/text/parse/alpha"}]},
{"label":"198([mcore:[#877]#457])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/text/parse/char"}]},
{"label":"199([k@[k@[mcore:[#880]#462]#467]#474])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Construct","out":0,"type":"Unit","tag":"unit","args":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"200([k@[mcore:[#880]#462]#467])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"_@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/char(':')","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: ':'","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":":"},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":199,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: ':'","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/char(':')","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"_@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}","traced":{"any":[]}},
{"op":"Jump","target":198}]},
{"label":"201([mcore:[#880]#462])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/alpha()","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Push","target":200,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/alpha()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}","traced":{"any":[]}},
{"op":"Jump","target":197}]},
{"label":"202([mcore:[#882]#476])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/text/parse/char"}]},
{"label":"203([mcore:[#885]#481])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"204([mcore:[#887]#487])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/text/parse/none-of"}]},
{"label":"205([mcore:[#891]#492])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/text/parse/many-acc"}]},
{"label":"206([mcore:[#893]#498])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/text/parse/none-of"}]},
{"label":"207([mcore:[#896]#503])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/none-of(\"/\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"/\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"/"},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"/\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/none-of(\"/\")","traced":{"any":[]}},
{"op":"Jump","target":206}]},
{"label":"208([#530])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Const","format":"string","out":0,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Jump","target":207}]},
{"label":"209([#546])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Construct","out":0,"type":"Unit","tag":"unit","args":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"210([k@[k@[k@[mcore:[#901]#509]#516]#523]#540])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":209,"args":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":203}]},
{"label":"211([k@[k@[mcore:[#901]#509]#516]#523])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/many-acc<char,(total :: E)>((fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    (std/text/parse/none-of(\"/\"));\n  }), (std/core/types/Nil<char>))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<char>","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"New","out":2,"targets":[208],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":210,"args":{"any":[0]}},
{"op":"Copy","from":2,"to":0},
{"op":"Copy","from":3,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<char>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/many-acc<char,(total :: E)>((fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    (std/text/parse/none-of(\"/\"));\n  }), (std/core/types/Nil<char>))","traced":{"any":[]}},
{"op":"Jump","target":205}]},
{"label":"212([k@[mcore:[#901]#509]#516])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"_@2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<char>((std/text/parse/none-of(\"/\")), (std/text/parse/many-acc<char,(total :: E)>((fn<(std/text/parse/parse :: (E, V) -> V)>(){\n      (std/text/parse/none-of(\"/\"));\n    }), (std/core/types/Nil<char>))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/none-of(\"/\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"/\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"/"},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":211,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"/\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/none-of(\"/\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<char>((std/text/parse/none-of(\"/\")), (std/text/parse/many-acc<char,(total :: E)>((fn<(std/text/parse/parse :: (E, V) -> V)>(){\n      (std/text/parse/none-of(\"/\"));\n    }), (std/core/types/Nil<char>))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"_@2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Jump","target":204}]},
{"label":"213([mcore:[#901]#509])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"_@1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/char('/')","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: '/'","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"/"},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":212,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: '/'","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/char('/')","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"_@1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}","traced":{"any":[]}},
{"op":"Jump","target":202}]},
{"label":"214([mcore:[#903]#548])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/text/parse/(||)"}]},
{"label":"215([mcore:[#905]#554])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/text/parse/char"}]},
{"label":"216([k@[mcore:[#908]#559]#566])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Return","args":{"any":[0]}}]},
{"label":"217([mcore:[#908]#559])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"_@4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/char('/')","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: '/'","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"/"},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":216,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: '/'","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/char('/')","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"_@4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}","traced":{"any":[]}},
{"op":"Jump","target":215}]},
{"label":"218([mcore:[#910]#568])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"CallLib","lib":0,"symbol":"std/text/parse/eof"}]},
{"label":"219([k@[mcore:[#912]#572]#577])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Return","args":{"any":[0]}}]},
{"label":"220([mcore:[#912]#572])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"_@5\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/eof()","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Push","target":219,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/eof()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"_@5\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Jump","target":218}]},
{"label":"221([method_apply@[mcore:[#914]#579]#581])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Const","format":"string","out":0,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Jump","target":201}]},
{"label":"222([method_apply@[mcore:[#914]#579]#588])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":213}]},
{"label":"223([method_apply@[k@[mcore:[#914]#579]#601]#603])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Const","format":"string","out":0,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Jump","target":217}]},
{"label":"224([method_apply@[k@[mcore:[#914]#579]#601]#610])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Const","format":"string","out":0,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Jump","target":220}]},
{"label":"225([k@[mcore:[#914]#579]#601])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/(||)<bool,(total :: E)>((fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    val _@4 : char\n          = (std/text/parse/char('/'));\n    std/core/types/False;\n  }), (fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    val _@5 : ()\n          = (std/text/parse/eof());\n    std/core/types/True;\n  }))","traced":{"any":[]}},
{"op":"New","out":0,"targets":[223],"args":{"any":[]},"tags":["apply"]},
{"op":"New","out":1,"targets":[224],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/(||)<bool,(total :: E)>((fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    val _@4 : char\n          = (std/text/parse/char('/'));\n    std/core/types/False;\n  }), (fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    val _@5 : ()\n          = (std/text/parse/eof());\n    std/core/types/True;\n  }))","traced":{"any":[]}},
{"op":"Jump","target":214}]},
{"label":"226([mcore:[#914]#579])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"_@3\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/(||)<(),(total :: E)>((fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    val _ : char;\n    val _@0 : char;\n    std/core/types/Unit;\n  }), (fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    val _@1 : char;\n    val _@2 : ((list :: V -> V)<char>);\n    std/core/types/Unit;\n  }))","traced":{"any":[]}},
{"op":"New","out":0,"targets":[221],"args":{"any":[]},"tags":["apply"]},
{"op":"New","out":1,"targets":[222],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":225,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/(||)<(),(total :: E)>((fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    val _ : char;\n    val _@0 : char;\n    std/core/types/Unit;\n  }), (fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    val _@1 : char;\n    val _@2 : ((list :: V -> V)<char>);\n    std/core/types/Unit;\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"_@3\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Jump","target":196}]},
{"label":"227([mcore:[#915]#619])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/list/@lift-reverse-append@4790"}]},
{"label":"228([mcore:[#920]#625])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/(++)"}]},
{"label":"229([mcore:[#923]#631])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"CallLib","lib":3,"symbol":"std/core/list/@lift-joinsep@4797"}]},
{"label":"230([switch case for Bool(true)#665])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"s\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \".\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"."},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \".\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"s\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"231([switch case for Bool(false)#672])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@1,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"s\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@1,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"s\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"232([switch default case#673])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"233([switch default case#668])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":""},
{"op":"PrimOp","name":"infixEq(String, String): Boolean","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Switch","arg":1,"values":[false],"targets":[231],"default":232}]},
{"label":"234([k@[#655]#661])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":""},
{"op":"PrimOp","name":"infixEq(String, String): Boolean","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[230],"default":233}]},
{"label":"235([#655])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":234,"args":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":228}]},
{"label":"236([match_def@[#674]#675])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"237([#683])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"238([match_std/core/types/Cons@[#674]#676])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs@10042\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"70\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"70\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"71\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"71\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-joinsep@4797(\"/\", xx, x)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"/\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"/"},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":2,"b":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"/\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-joinsep@4797(\"/\", xx, x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs@10042\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"70\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"70\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"71\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"71\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":229}]},
{"label":"239([#674])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs@10042\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"70\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"71\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs@10042\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"70\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"71\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":238,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3900]","target":236,"args":{"any":[]}}}]},
{"label":"240([#685])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs@10042\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs@10042\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"241([k@[k@[k@[mcore:[#933]#638]#644]#650]#652])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match (xs@10042) {\n  ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n     -> std/core/list/@lift-joinsep@4797(\"/\", xx, x);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs@10042\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Push","target":235,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs@10042\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (xs@10042) {\n  ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n     -> std/core/list/@lift-joinsep@4797(\"/\", xx, x);\n}","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":240,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3901]","target":239,"args":{"any":[]}}}]},
{"label":"242([#688])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"243([#689])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"68\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"68\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"69\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"69\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"68\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"68\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"69\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"69\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"244([k@[k@[mcore:[#933]#638]#644]#650])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"s\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/(++)((match (p) {\n    ((@skip std/os/path/Path((@x: string) : string, (@pat@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat: std/os/path/path)\n       -> @x;\n  }), (match (xs@10042) {\n    ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n       -> \"\";\n    ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n       -> std/core/list/@lift-joinsep@4797(\"/\", xx, x);\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (p) {\n  ((@skip std/os/path/Path((@x: string) : string, (@pat@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat: std/os/path/path)\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"68\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"69\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":241,"args":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"68\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"69\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p) {\n  ((@skip std/os/path/Path((@x: string) : string, (@pat@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat: std/os/path/path)\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/(++)((match (p) {\n    ((@skip std/os/path/Path((@x: string) : string, (@pat@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat: std/os/path/path)\n       -> @x;\n  }), (match (xs@10042) {\n    ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n       -> \"\";\n    ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n       -> std/core/list/@lift-joinsep@4797(\"/\", xx, x);\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"s\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":1,"clauses":[{"tag":"std/os/path/Path","target":243,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3902]","target":242,"args":{"any":[]}}}]},
{"label":"245([k@[mcore:[#933]#638]#644])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":244,"args":{"any":[1]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Copy","from":3,"to":2},
{"op":"Jump","target":227}]},
{"label":"246([match_def@[mcore:[#933]#638]#690])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"247([#691])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"66\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"66\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"67\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"67\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"66\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"66\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"67\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"67\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"248([mcore:[#933]#638])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"xs@10042\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-reverse-append@4790<string>((std/core/types/Nil<string>), (match (p) {\n    ((@skip std/os/path/Path((@pat@0@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n       -> @x@0;\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"BGN: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n     -> @x@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"66\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"67\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":245,"args":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"66\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"67\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n     -> @x@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-reverse-append@4790<string>((std/core/types/Nil<string>), (match (p) {\n    ((@skip std/os/path/Path((@pat@0@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n       -> @x@0;\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"xs@10042\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":0,"clauses":[{"tag":"std/os/path/Path","target":247,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3903]","target":246,"args":{"any":[]}}}]},
{"label":"249([k@[k@[mcore:[#938]#692]#694]#697])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":1139}]},
{"label":"250([#700])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"251([#701])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"252([match_def@[k@[mcore:[#938]#692]#694]#699])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@None","target":251,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3904]","target":250,"args":{"any":[]}}}]},
{"label":"253([#706])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-parts@807,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"67\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-parts@807: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"67\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-parts@807,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"67\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-parts@807: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"67\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"254([k@[mcore:[#938]#692]#694])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match (parts) {\n  ((std/core/types/@Optional((@uniq-parts@807: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1: ? ((list :: V -> V)<string>))\n     -> @uniq-parts@807;\n  ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"67\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":249,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"67\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (parts) {\n  ((std/core/types/@Optional((@uniq-parts@807: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1: ? ((list :: V -> V)<string>))\n     -> @uniq-parts@807;\n  ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":253,"args":{"any":[1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3905]","target":252,"args":{"any":[]}}}]},
{"label":"255([#708])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"256([#709])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"root\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"root\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"257([match_def@[mcore:[#938]#692]#707])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"root\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"root\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@None","target":256,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3906]","target":255,"args":{"any":[]}}}]},
{"label":"258([#712])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"root\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-root@801,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"66\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-root@801: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"66\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"root\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-root@801,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"66\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-root@801: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"66\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"259([mcore:[#938]#692])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/Path((match (root) {\n    ((std/core/types/@Optional((@uniq-root@801: string) : string) : ? string ) as @pat: ? string)\n       -> @uniq-root@801;\n    ((@skip std/core/types/@None() : ? string ) as @pat@0: ? string)\n       -> \"\";\n  }), (match (parts) {\n    ((std/core/types/@Optional((@uniq-parts@807: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1: ? ((list :: V -> V)<string>))\n       -> @uniq-parts@807;\n    ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n       -> std/core/types/Nil<string>;\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (root) {\n  ((std/core/types/@Optional((@uniq-root@801: string) : string) : ? string ) as @pat: ? string)\n     -> @uniq-root@801;\n  ((@skip std/core/types/@None() : ? string ) as @pat@0: ? string)\n     -> \"\";\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"root\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"66\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":254,"args":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"root\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"66\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (root) {\n  ((std/core/types/@Optional((@uniq-root@801: string) : string) : ? string ) as @pat: ? string)\n     -> @uniq-root@801;\n  ((@skip std/core/types/@None() : ? string ) as @pat@0: ? string)\n     -> \"\";\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/Path((match (root) {\n    ((std/core/types/@Optional((@uniq-root@801: string) : string) : ? string ) as @pat: ? string)\n       -> @uniq-root@801;\n    ((@skip std/core/types/@None() : ? string ) as @pat@0: ? string)\n       -> \"\";\n  }), (match (parts) {\n    ((std/core/types/@Optional((@uniq-parts@807: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1: ? ((list :: V -> V)<string>))\n       -> @uniq-parts@807;\n    ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n       -> std/core/types/Nil<string>;\n  }))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":258,"args":{"any":[1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3907]","target":257,"args":{"any":[]}}}]},
{"label":"260([mcore:[#940]#713])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/vector/vlist"}]},
{"label":"261([k@[k@[k@[mcore:[#951]#719]#730]#733]#739])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/Path(root, parts)","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/Path(root, parts)","traced":{"any":[]}},
{"op":"Jump","target":1139}]},
{"label":"262([k@[k@[mcore:[#951]#719]#730]#733])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":261,"args":{"any":[1]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Copy","from":3,"to":2},
{"op":"Jump","target":195}]},
{"label":"263([#741])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"264([#742])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"dirs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"dirs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"265([match_def@[k@[mcore:[#951]#719]#730]#740])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"dirs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"dirs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@None","target":264,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3908]","target":263,"args":{"any":[]}}}]},
{"label":"266([#747])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"dirs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-dirs@921,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"68\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-dirs@921: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"68\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"dirs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-dirs@921,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"68\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-dirs@921: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"68\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"267([k@[mcore:[#951]#719]#730])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match (dirs) {\n  ((std/core/types/@Optional((@uniq-dirs@921: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat: ? ((list :: V -> V)<string>))\n     -> @uniq-dirs@921;\n  ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@0: ? ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"dirs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"68\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":262,"args":{"any":[2,0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"dirs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"68\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (dirs) {\n  ((std/core/types/@Optional((@uniq-dirs@921: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat: ? ((list :: V -> V)<string>))\n     -> @uniq-dirs@921;\n  ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@0: ? ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":266,"args":{"any":[1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3909]","target":265,"args":{"any":[]}}}]},
{"label":"268([mcore:[#951]#719])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"v@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/splitv(s, \"/\")","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Undefined:  std/core/string/splitv"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/push-parts((std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>))), (match (dirs) {\n    ((std/core/types/@Optional((@uniq-dirs@921: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat: ? ((list :: V -> V)<string>))\n       -> @uniq-dirs@921;\n    ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@0: ? ((list :: V -> V)<string>))\n       -> std/core/types/Nil<string>;\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@None<(list :: V -> V)<string>>","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":267,"args":{"any":[2,0]}},
{"op":"Copy","from":4,"to":2},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":3,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@None<(list :: V -> V)<string>>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/push-parts((std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>))), (match (dirs) {\n    ((std/core/types/@Optional((@uniq-dirs@921: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat: ? ((list :: V -> V)<string>))\n       -> @uniq-dirs@921;\n    ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@0: ? ((list :: V -> V)<string>))\n       -> std/core/types/Nil<string>;\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/splitv(s, \"/\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"v@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}}","traced":{"any":[]}},
{"op":"Jump","target":260}]},
{"label":"269([mcore:[#960]#748])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/text/parse/starts-with"}]},
{"label":"270([mcore:[#965]#754])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/vector/vlist"}]},
{"label":"271([mcore:[#979]#760])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/(++)"}]},
{"label":"272([mcore:[#981]#766])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/sslice/string"}]},
{"label":"273([mcore:[#984]#771])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"CallLib","lib":3,"symbol":"std/core/sslice/Sslice"}]},
{"label":"274([mcore:[#994]#778])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/sslice/string"}]},
{"label":"275([mcore:[#998]#783])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/vector/vlist"}]},
{"label":"276([k@[switch case for Bool(true)#793]#801])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"277([switch case for Bool(true)#793])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"s\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/Path(\"\", (std/core/types/Nil<string>))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/Path(\"\", (std/core/types/Nil<string>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"s\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Jump","target":1139}]},
{"label":"278([#811])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":226}]},
{"label":"279([#826])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"280([match_def@[#828]#829])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"281([#831])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"282([match_def@[#832]#833])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"283([k@[k@[k@[#867]#873]#879]#881])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"284([k@[k@[#867]#873]#879])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/Path(root@0@10105, parts@0)","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/Path(root@0@10105, parts@0)","traced":{"any":[]}},
{"op":"Jump","target":1139}]},
{"label":"285([k@[#867]#873])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":284,"args":{"any":[1]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Copy","from":3,"to":2},
{"op":"Jump","target":195}]},
{"label":"286([match_def@[match_def@[#867]#883]#884])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"287([#885])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@2,{\"op\": \"Var\",\"id\": \"@x78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@2,{\"op\": \"Var\",\"id\": \"@x78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"288([match_def@[#867]#883])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@None","target":287,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3910]","target":286,"args":{"any":[]}}}]},
{"label":"289([match_std/core/types/@Optional@[#867]#890])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@7,{\"op\": \"Var\",\"id\": \"@x78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-dirs@921@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"79\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-dirs@921@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"79\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@7,{\"op\": \"Var\",\"id\": \"@x78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-dirs@921@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"79\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-dirs@921@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"79\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"290([#867])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/types/@None<(list :: V -> V)<string>>)) {\n  ((std/core/types/@Optional((@uniq-dirs@921@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@7: ? ((list :: V -> V)<string>))\n     -> @uniq-dirs@921@0;\n  ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@0@2: ? ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"79\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":285,"args":{"any":[1,0]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"79\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/types/@None<(list :: V -> V)<string>>)) {\n  ((std/core/types/@Optional((@uniq-dirs@921@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@7: ? ((list :: V -> V)<string>))\n     -> @uniq-dirs@921@0;\n  ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@0@2: ? ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":289,"args":{"any":[1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3911]","target":288,"args":{"any":[]}}}]},
{"label":"291([k@[k@[k@[k@[#836]#842]#845]#851]#856])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"v@10012@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/splitv(s@1@10106, \"/\")","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/string/splitv"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"parts@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/push-parts((std/core/vector/vlist<string>(v@10012@0, (std/core/types/@None<(list :: V -> V)<string>>))), (match ((std/core/types/@None<(list :: V -> V)<string>>)) {\n    ((std/core/types/@Optional((@uniq-dirs@921@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@7: ? ((list :: V -> V)<string>))\n       -> @uniq-dirs@921@0;\n    ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@0@2: ? ((list :: V -> V)<string>))\n       -> std/core/types/Nil<string>;\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/vector/vlist<string>(v@10012@0, (std/core/types/@None<(list :: V -> V)<string>>))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@None<(list :: V -> V)<string>>","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":290,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":3,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@None<(list :: V -> V)<string>>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/vector/vlist<string>(v@10012@0, (std/core/types/@None<(list :: V -> V)<string>>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/push-parts((std/core/vector/vlist<string>(v@10012@0, (std/core/types/@None<(list :: V -> V)<string>>))), (match ((std/core/types/@None<(list :: V -> V)<string>>)) {\n    ((std/core/types/@Optional((@uniq-dirs@921@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@7: ? ((list :: V -> V)<string>))\n       -> @uniq-dirs@921@0;\n    ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@0@2: ? ((list :: V -> V)<string>))\n       -> std/core/types/Nil<string>;\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"parts@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/splitv(s@1@10106, \"/\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"v@10012@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}}","traced":{"any":[]}},
{"op":"Jump","target":275}]},
{"label":"292([k@[k@[k@[#836]#842]#845]#851])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"s@1@10106\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/string(rest)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":291,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":2,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/string(rest)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"s@1@10106\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Jump","target":274}]},
{"label":"293([k@[k@[#836]#842]#845])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":292,"args":{"any":[1]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Copy","from":3,"to":2},
{"op":"Jump","target":271}]},
{"label":"294([switch case for Bool(true)#891])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@7@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"70\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (eof: bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"70\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"/\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"/"},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"/\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@7@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"70\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (eof: bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"70\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"295([switch case for Bool(false)#895])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"70\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (eof: bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"70\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"70\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (eof: bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"70\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"296([switch default case#898])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"297([switch default case#894])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Switch","arg":0,"values":[false],"targets":[295],"default":296}]},
{"label":"298([k@[#836]#842])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match (eof) {\n  ((std/core/types/True() : bool ) as @pat@7@0@0: bool)\n     -> \"/\";\n  ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n     -> \"\";\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Push","target":293,"args":{"any":[2,0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (eof) {\n  ((std/core/types/True() : bool ) as @pat@7@0@0: bool)\n     -> \"/\";\n  ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n     -> \"\";\n}","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[294],"default":297}]},
{"label":"299([#836])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":298,"args":{"any":[1,2]}},
{"op":"Copy","from":3,"to":1},
{"op":"Jump","target":272}]},
{"label":"300([#899])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"301([k@[#900]#907])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"302([#900])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@7@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"71\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@4: string), (@pat@5: int), (@pat@6: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"71\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(s@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"75\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"75\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"76\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"76\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"77\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@2@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"77\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/Sslice(s@1@0, 0, start)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/Sslice(s@1@0, 0, start)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@7@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"71\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@4: string), (@pat@5: int), (@pat@6: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"71\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(s@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"75\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"75\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"76\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"76\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"77\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@2@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"77\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":273}]},
{"label":"303([match_std/core/sslice/Sslice@[#832]#834])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"@x68\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"69\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/types/Tuple2((eof: bool), ((@skip std/core/sslice/Sslice((@pat@4: string), (@pat@5: int), (@pat@6: int)) : sslice/sslice ) as rest: sslice/sslice)) : (bool, sslice/sslice) ) as @pat@3: (bool, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"69\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(eof,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"70\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (eof: bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"70\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"71\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@4: string), (@pat@5: int), (@pat@6: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"71\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"72\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@4: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"72\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"73\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@5: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"73\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"74\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@6: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"74\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val root@0@10105 : string;\nval s@1@10106 : string;\nval v@10012@0 : (vector :: V -> V)<string>;\nval parts@0 : (list :: V -> V)<string>;\nstd/os/path/Path(root@0@10105, parts@0)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"root@0@10105\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/(++)((std/core/sslice/string((match (rest) {\n    ((@skip std/core/sslice/Sslice((s@1@0: string) : string, (start: int) : int, (@pat@0@2@0: int) : int) : sslice/sslice ) as @pat@7@0: sslice/sslice)\n       -> std/core/sslice/Sslice(s@1@0, 0, start);\n  }))), (match (eof) {\n    ((std/core/types/True() : bool ) as @pat@7@0@0: bool)\n       -> \"/\";\n    ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n       -> \"\";\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/string((match (rest) {\n  ((@skip std/core/sslice/Sslice((s@1@0: string) : string, (start: int) : int, (@pat@0@2@0: int) : int) : sslice/sslice ) as @pat@7@0: sslice/sslice)\n     -> std/core/sslice/Sslice(s@1@0, 0, start);\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (rest) {\n  ((@skip std/core/sslice/Sslice((s@1@0: string) : string, (start: int) : int, (@pat@0@2@0: int) : int) : sslice/sslice ) as @pat@7@0: sslice/sslice)\n     -> std/core/sslice/Sslice(s@1@0, 0, start);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"71\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@4: string), (@pat@5: int), (@pat@6: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"71\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"75\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"76\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"77\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Push","target":299,"args":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"71\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@4: string), (@pat@5: int), (@pat@6: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"71\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"75\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"76\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"77\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (rest) {\n  ((@skip std/core/sslice/Sslice((s@1@0: string) : string, (start: int) : int, (@pat@0@2@0: int) : int) : sslice/sslice ) as @pat@7@0: sslice/sslice)\n     -> std/core/sslice/Sslice(s@1@0, 0, start);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/string((match (rest) {\n  ((@skip std/core/sslice/Sslice((s@1@0: string) : string, (start: int) : int, (@pat@0@2@0: int) : int) : sslice/sslice ) as @pat@7@0: sslice/sslice)\n     -> std/core/sslice/Sslice(s@1@0, 0, start);\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/(++)((std/core/sslice/string((match (rest) {\n    ((@skip std/core/sslice/Sslice((s@1@0: string) : string, (start: int) : int, (@pat@0@2@0: int) : int) : sslice/sslice ) as @pat@7@0: sslice/sslice)\n       -> std/core/sslice/Sslice(s@1@0, 0, start);\n  }))), (match (eof) {\n    ((std/core/types/True() : bool ) as @pat@7@0@0: bool)\n       -> \"/\";\n    ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n       -> \"\";\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"root@0@10105\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val root@0@10105 : string;\nval s@1@10106 : string;\nval v@10012@0 : (vector :: V -> V)<string>;\nval parts@0 : (list :: V -> V)<string>;\nstd/os/path/Path(root@0@10105, parts@0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"@x68\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"69\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/types/Tuple2((eof: bool), ((@skip std/core/sslice/Sslice((@pat@4: string), (@pat@5: int), (@pat@6: int)) : sslice/sslice ) as rest: sslice/sslice)) : (bool, sslice/sslice) ) as @pat@3: (bool, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"69\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(eof,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"70\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (eof: bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"70\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"71\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@4: string), (@pat@5: int), (@pat@6: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"71\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"72\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@4: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"72\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"73\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@5: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"73\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"74\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@6: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"74\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":302,"args":{"any":[0,1,2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3912]","target":300,"args":{"any":[]}}}]},
{"label":"304([#832])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"71\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@4: string), (@pat@5: int), (@pat@6: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"71\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"72\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"73\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"74\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"71\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@4: string), (@pat@5: int), (@pat@6: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"71\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"72\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"73\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"74\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":1,"clauses":[{"tag":"std/core/sslice/Sslice","target":303,"args":{"any":[2,3,4]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3913]","target":282,"args":{"any":[]}}}]},
{"label":"305([match_std/core/types/Just@[#828]#830])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"69\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/types/Tuple2((eof: bool), ((@skip std/core/sslice/Sslice((@pat@4: string), (@pat@5: int), (@pat@6: int)) : sslice/sslice ) as rest: sslice/sslice)) : (bool, sslice/sslice) ) as @pat@3: (bool, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"69\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"70\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"71\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"69\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/types/Tuple2((eof: bool), ((@skip std/core/sslice/Sslice((@pat@4: string), (@pat@5: int), (@pat@6: int)) : sslice/sslice ) as rest: sslice/sslice)) : (bool, sslice/sslice) ) as @pat@3: (bool, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"69\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"70\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"71\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":0,"clauses":[{"tag":"std/core/types/Tuple2","target":304,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3914]","target":281,"args":{"any":[]}}}]},
{"label":"306([#828])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x68\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"69\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x68\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"69\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":305,"args":{"any":[0]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3915]","target":280,"args":{"any":[]}}}]},
{"label":"307([k@[k@[k@[k@[#909]#920]#926]#932]#936])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"308([k@[k@[k@[#909]#920]#926]#932])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/Path(\"\", parts)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":""},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/Path(\"\", parts)","traced":{"any":[]}},
{"op":"Jump","target":1139}]},
{"label":"309([k@[k@[#909]#920]#926])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":308,"args":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":195}]},
{"label":"310([#939])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"311([#940])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"@x69\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"@x69\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"312([match_def@[k@[#909]#920]#938])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x69\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x69\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@None","target":311,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3916]","target":310,"args":{"any":[]}}}]},
{"label":"313([#945])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x69\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-dirs@921,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"70\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-dirs@921: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"70\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x69\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-dirs@921,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"70\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-dirs@921: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"70\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"314([k@[#909]#920])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/types/@None<(list :: V -> V)<string>>)) {\n  ((std/core/types/@Optional((@uniq-dirs@921: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n     -> @uniq-dirs@921;\n  ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@0@0: ? ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x69\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"70\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":309,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x69\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"70\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/types/@None<(list :: V -> V)<string>>)) {\n  ((std/core/types/@Optional((@uniq-dirs@921: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n     -> @uniq-dirs@921;\n  ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@0@0: ? ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":313,"args":{"any":[1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3917]","target":312,"args":{"any":[]}}}]},
{"label":"315([#909])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"@x68\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val v@10012 : (vector :: V -> V)<string>;\nval parts : (list :: V -> V)<string>;\nstd/os/path/Path(\"\", parts)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"v@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/splitv(t, \"/\")","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/string/splitv"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/push-parts((std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>))), (match ((std/core/types/@None<(list :: V -> V)<string>>)) {\n    ((std/core/types/@Optional((@uniq-dirs@921: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n       -> @uniq-dirs@921;\n    ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@0@0: ? ((list :: V -> V)<string>))\n       -> std/core/types/Nil<string>;\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@None<(list :: V -> V)<string>>","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":314,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@None<(list :: V -> V)<string>>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/push-parts((std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>))), (match ((std/core/types/@None<(list :: V -> V)<string>>)) {\n    ((std/core/types/@Optional((@uniq-dirs@921: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n       -> @uniq-dirs@921;\n    ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@0@0: ? ((list :: V -> V)<string>))\n       -> std/core/types/Nil<string>;\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/splitv(t, \"/\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"v@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val v@10012 : (vector :: V -> V)<string>;\nval parts : (list :: V -> V)<string>;\nstd/os/path/Path(\"\", parts)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"@x68\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Jump","target":270}]},
{"label":"316([k@[switch case for Bool(false)#807]#824])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x68\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x68\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Nothing","target":315,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3918]","target":306,"args":{"any":[]}}}]},
{"label":"317([switch case for Bool(false)#807])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@1,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"s\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val t : string\n      = std/core/string/replace-all(s, \"\\x5C\", \"/\");\nmatch ((std/text/parse/starts-with<bool>(t, std/os/path/proot))) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<(bool, sslice/sslice)> ) as @pat@1@0: ((maybe :: V -> V)<(bool, sslice/sslice)>))\n     -> val v@10012 : (vector :: V -> V)<string>;\n        val parts : (list :: V -> V)<string>;\n    std/os/path/Path(\"\", parts);\n  ((@skip std/core/types/Just(((@skip std/core/types/Tuple2((eof: bool) : bool, ((@skip std/core/sslice/Sslice((@pat@4: string) : string, (@pat@5: int) : int, (@pat@6: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : (bool, sslice/sslice) ) as @pat@3: (bool, sslice/sslice)) : (bool, sslice/sslice)) : (maybe :: V -> V)<(bool, sslice/sslice)> ) as @pat@2@0: ((maybe :: V -> V)<(bool, sslice/sslice)>))\n     -> val root@0@10105 : string;\n        val s@1@10106 : string;\n        val v@10012@0 : (vector :: V -> V)<string>;\n        val parts@0 : (list :: V -> V)<string>;\n    std/os/path/Path(root@0@10105, parts@0);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/replace-all(s, \"\\x5C\", \"/\")","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/string/replace-all"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/text/parse/starts-with<bool>(t, std/os/path/proot))) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<(bool, sslice/sslice)> ) as @pat@1@0: ((maybe :: V -> V)<(bool, sslice/sslice)>))\n     -> val v@10012 : (vector :: V -> V)<string>;\n        val parts : (list :: V -> V)<string>;\n    std/os/path/Path(\"\", parts);\n  ((@skip std/core/types/Just(((@skip std/core/types/Tuple2((eof: bool) : bool, ((@skip std/core/sslice/Sslice((@pat@4: string) : string, (@pat@5: int) : int, (@pat@6: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : (bool, sslice/sslice) ) as @pat@3: (bool, sslice/sslice)) : (bool, sslice/sslice)) : (maybe :: V -> V)<(bool, sslice/sslice)> ) as @pat@2@0: ((maybe :: V -> V)<(bool, sslice/sslice)>))\n     -> val root@0@10105 : string;\n        val s@1@10106 : string;\n        val v@10012@0 : (vector :: V -> V)<string>;\n        val parts@0 : (list :: V -> V)<string>;\n    std/os/path/Path(root@0@10105, parts@0);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/text/parse/starts-with<bool>(t, std/os/path/proot)","traced":{"any":[]}},
{"op":"New","out":1,"targets":[278],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":316,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/text/parse/starts-with<bool>(t, std/os/path/proot)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/text/parse/starts-with<bool>(t, std/os/path/proot))) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<(bool, sslice/sslice)> ) as @pat@1@0: ((maybe :: V -> V)<(bool, sslice/sslice)>))\n     -> val v@10012 : (vector :: V -> V)<string>;\n        val parts : (list :: V -> V)<string>;\n    std/os/path/Path(\"\", parts);\n  ((@skip std/core/types/Just(((@skip std/core/types/Tuple2((eof: bool) : bool, ((@skip std/core/sslice/Sslice((@pat@4: string) : string, (@pat@5: int) : int, (@pat@6: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : (bool, sslice/sslice) ) as @pat@3: (bool, sslice/sslice)) : (bool, sslice/sslice)) : (maybe :: V -> V)<(bool, sslice/sslice)> ) as @pat@2@0: ((maybe :: V -> V)<(bool, sslice/sslice)>))\n     -> val root@0@10105 : string;\n        val s@1@10106 : string;\n        val v@10012@0 : (vector :: V -> V)<string>;\n        val parts@0 : (list :: V -> V)<string>;\n    std/os/path/Path(root@0@10105, parts@0);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/replace-all(s, \"\\x5C\", \"/\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val t : string\n      = std/core/string/replace-all(s, \"\\x5C\", \"/\");\nmatch ((std/text/parse/starts-with<bool>(t, std/os/path/proot))) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<(bool, sslice/sslice)> ) as @pat@1@0: ((maybe :: V -> V)<(bool, sslice/sslice)>))\n     -> val v@10012 : (vector :: V -> V)<string>;\n        val parts : (list :: V -> V)<string>;\n    std/os/path/Path(\"\", parts);\n  ((@skip std/core/types/Just(((@skip std/core/types/Tuple2((eof: bool) : bool, ((@skip std/core/sslice/Sslice((@pat@4: string) : string, (@pat@5: int) : int, (@pat@6: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : (bool, sslice/sslice) ) as @pat@3: (bool, sslice/sslice)) : (bool, sslice/sslice)) : (maybe :: V -> V)<(bool, sslice/sslice)> ) as @pat@2@0: ((maybe :: V -> V)<(bool, sslice/sslice)>))\n     -> val root@0@10105 : string;\n        val s@1@10106 : string;\n        val v@10012@0 : (vector :: V -> V)<string>;\n        val parts@0 : (list :: V -> V)<string>;\n    std/os/path/Path(root@0@10105, parts@0);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@1,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"s\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Jump","target":269}]},
{"label":"318([switch default case#946])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"319([switch default case#803])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":""},
{"op":"PrimOp","name":"infixEq(String, String): Boolean","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Switch","arg":0,"values":[false],"targets":[317],"default":318}]},
{"label":"320([mcore:[#1010]#789])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":""},
{"op":"PrimOp","name":"infixEq(String, String): Boolean","out":{"any":[1]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[277],"default":319}]},
{"label":"321([mcore:[#1011]#947])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/@Optional"}]},
{"label":"322([mcore:[#1014]#952])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/list/@lift-reverse-append@4790"}]},
{"label":"323([k@[k@[k@[#979]#985]#987]#990])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":1139}]},
{"label":"324([#993])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"325([#994])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"326([match_def@[k@[k@[#979]#985]#987]#992])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@None","target":325,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3919]","target":324,"args":{"any":[]}}}]},
{"label":"327([#999])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-parts@807,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"77\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-parts@807: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"77\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-parts@807,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"77\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-parts@807: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"77\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"328([k@[k@[#979]#985]#987])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match (parts@10056) {\n  ((std/core/types/@Optional((@uniq-parts@807: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1: ? ((list :: V -> V)<string>))\n     -> @uniq-parts@807;\n  ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"77\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":323,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"77\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (parts@10056) {\n  ((std/core/types/@Optional((@uniq-parts@807: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1: ? ((list :: V -> V)<string>))\n     -> @uniq-parts@807;\n  ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":327,"args":{"any":[1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3920]","target":326,"args":{"any":[]}}}]},
{"label":"329([match_def@[k@[#979]#985]#1000])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"330([match_std/os/path/Path@[k@[#979]#985]#1001])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"p1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"75\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"75\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"76\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"76\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"p1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"75\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"75\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"76\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"76\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"331([k@[#979]#985])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/Path((match (p1) {\n    ((@skip std/os/path/Path((@x: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n       -> @x;\n  }), (match (parts@10056) {\n    ((std/core/types/@Optional((@uniq-parts@807: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1: ? ((list :: V -> V)<string>))\n       -> @uniq-parts@807;\n    ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n       -> std/core/types/Nil<string>;\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (p1) {\n  ((@skip std/os/path/Path((@x: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"75\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"76\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":328,"args":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"75\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"76\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p1) {\n  ((@skip std/os/path/Path((@x: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/Path((match (p1) {\n    ((@skip std/os/path/Path((@x: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n       -> @x;\n  }), (match (parts@10056) {\n    ((std/core/types/@Optional((@uniq-parts@807: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1: ? ((list :: V -> V)<string>))\n       -> @uniq-parts@807;\n    ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n       -> std/core/types/Nil<string>;\n  }))","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":1,"clauses":[{"tag":"std/os/path/Path","target":330,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3921]","target":329,"args":{"any":[]}}}]},
{"label":"332([#979])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":331,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Jump","target":321}]},
{"label":"333([k@[k@[k@[mcore:[#1026]#958]#964]#970]#973])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":332,"args":{"any":[1]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Copy","from":3,"to":2},
{"op":"Jump","target":195}]},
{"label":"334([#1002])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"335([#1003])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"p1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"77\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"77\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"78\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"p1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"77\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"77\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"78\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"336([k@[k@[mcore:[#1026]#958]#964]#970])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match (p1) {\n  ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@5: std/os/path/path)\n     -> @x@1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"77\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":333,"args":{"any":[1,0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"77\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p1) {\n  ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@5: std/os/path/path)\n     -> @x@1;\n}","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":1,"clauses":[{"tag":"std/os/path/Path","target":335,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3922]","target":334,"args":{"any":[]}}}]},
{"label":"337([k@[mcore:[#1026]#958]#964])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":336,"args":{"any":[1]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Copy","from":3,"to":2},
{"op":"Jump","target":322}]},
{"label":"338([match_def@[mcore:[#1026]#958]#1004])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"339([#1005])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"p2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"75\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"75\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"76\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"76\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"p2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"75\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"75\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"76\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"76\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"340([mcore:[#1026]#958])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@Optional<(list :: V -> V)<string>>((std/os/path/push-parts((std/core/list/@lift-reverse-append@4790<string>((std/core/types/Nil<string>), (match (p2) {\n      ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n         -> @x@0;\n    }))), (match (p1) {\n    ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@5: std/os/path/path)\n       -> @x@1;\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/push-parts((std/core/list/@lift-reverse-append@4790<string>((std/core/types/Nil<string>), (match (p2) {\n      ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n         -> @x@0;\n    }))), (match (p1) {\n    ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@5: std/os/path/path)\n       -> @x@1;\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-reverse-append@4790<string>((std/core/types/Nil<string>), (match (p2) {\n    ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n       -> @x@0;\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"BGN: genExpr: match (p2) {\n  ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n     -> @x@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"75\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"76\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":337,"args":{"any":[0,2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"75\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"76\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p2) {\n  ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n     -> @x@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-reverse-append@4790<string>((std/core/types/Nil<string>), (match (p2) {\n    ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n       -> @x@0;\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/push-parts((std/core/list/@lift-reverse-append@4790<string>((std/core/types/Nil<string>), (match (p2) {\n      ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n         -> @x@0;\n    }))), (match (p1) {\n    ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@5: std/os/path/path)\n       -> @x@1;\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@Optional<(list :: V -> V)<string>>((std/os/path/push-parts((std/core/list/@lift-reverse-append@4790<string>((std/core/types/Nil<string>), (match (p2) {\n      ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n         -> @x@0;\n    }))), (match (p1) {\n    ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@5: std/os/path/path)\n       -> @x@1;\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":1,"clauses":[{"tag":"std/os/path/Path","target":339,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3923]","target":338,"args":{"any":[]}}}]},
{"label":"341([mcore:[#1028]#1006])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/hnd/@open-none1"}]},
{"label":"342([#1017])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Jump","target":320}]},
{"label":"343([k@[mcore:[#1032]#1012]#1014])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@open-none1<string,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>(std/os/path/path, @x-x1@10145)","traced":{"any":[]}},
{"op":"New","out":1,"targets":[342],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@open-none1<string,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>(std/os/path/path, @x-x1@10145)","traced":{"any":[]}},
{"op":"Jump","target":341}]},
{"label":"344([mcore:[#1032]#1012])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@x-x1@10145\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/xapp-path()","traced":{"any":[]}},
{"op":"Push","target":343,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/xapp-path()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@x-x1@10145\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Jump","target":23}]},
{"label":"345([mcore:[#1034]#1035])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/hnd/@open-none1"}]},
{"label":"346([mcore:[#1038]#1041])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/hnd/@open-none1"}]},
{"label":"347([k@[k@[mcore:[#1047]#1047]#1052]#1055])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":1139}]},
{"label":"348([match_def@[k@[mcore:[#1047]#1047]#1052]#1057])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"349([k@[#1058]#1060])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"350([match_def@[match_def@[#1058]#1062]#1063])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"351([#1064])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"83\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"83\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"352([match_def@[#1058]#1062])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"83\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"83\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":351,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3924]","target":350,"args":{"any":[]}}}]},
{"label":"353([match_std/core/types/Cons@[#1058]#1069])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"83\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"84\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"84\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"85\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"85\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"83\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"84\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"84\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"85\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"85\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"354([#1058])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"82\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"82\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"83\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@x) {\n  ((std/core/types/Cons((@pat@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat: ((list :: V -> V)<string>))\n     -> xx;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"83\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"84\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"85\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"83\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"84\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"85\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@x) {\n  ((std/core/types/Cons((@pat@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat: ((list :: V -> V)<string>))\n     -> xx;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"82\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"82\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"83\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":353,"args":{"any":[1,2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3925]","target":352,"args":{"any":[]}}}]},
{"label":"355([k@[mcore:[#1047]#1047]#1052])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@0: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2: std/os/path/path)\n     -> (match (@x) {\n      ((std/core/types/Cons((@pat@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat: ((list :: V -> V)<string>))\n         -> xx;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n         -> std/core/types/Nil<string>;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"82\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":347,"args":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"82\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@0: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2: std/os/path/path)\n     -> (match (@x) {\n      ((std/core/types/Cons((@pat@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat: ((list :: V -> V)<string>))\n         -> xx;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n         -> std/core/types/Nil<string>;\n    });\n}","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":1,"clauses":[{"tag":"std/os/path/Path","target":354,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3926]","target":348,"args":{"any":[]}}}]},
{"label":"356([#1071])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"357([k@[#1072]#1074])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"358([match_def@[#1072]#1076])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"359([match_std/os/path/Path@[#1072]#1077])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"80\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"80\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"81\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@2: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"81\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"80\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"80\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"81\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@2: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"81\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"360([#1072])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"@x78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (p) {\n  ((@skip std/os/path/Path((@x@0: string) : string, (@pat@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n     -> @x@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"80\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"81\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"80\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"81\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p) {\n  ((@skip std/os/path/Path((@x@0: string) : string, (@pat@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n     -> @x@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"@x78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":0,"clauses":[{"tag":"std/os/path/Path","target":359,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3927]","target":358,"args":{"any":[]}}}]},
{"label":"361([match_def@[mcore:[#1047]#1047]#1070])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":1,"clauses":[{"tag":"std/core/types/@None","target":360,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3928]","target":356,"args":{"any":[]}}}]},
{"label":"362([#1078])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-root@108,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"79\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-root@108: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"79\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-root@108,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"79\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-root@108: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"79\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"363([mcore:[#1047]#1047])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/Path((match ((std/core/types/@None<string>)) {\n    ((std/core/types/@Optional((@uniq-root@108: string) : string) : ? string ) as @pat@3: ? string)\n       -> @uniq-root@108;\n    ((@skip std/core/types/@None() : ? string ) as @pat@0@1: ? string)\n       -> (match (p) {\n        ((@skip std/os/path/Path((@x@0: string) : string, (@pat@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n           -> @x@0;\n      });\n  }), (match (p) {\n    ((@skip std/os/path/Path((@pat@0@0: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2: std/os/path/path)\n       -> (match (@x) {\n        ((std/core/types/Cons((@pat@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat: ((list :: V -> V)<string>))\n           -> xx;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n           -> std/core/types/Nil<string>;\n      });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/types/@None<string>)) {\n  ((std/core/types/@Optional((@uniq-root@108: string) : string) : ? string ) as @pat@3: ? string)\n     -> @uniq-root@108;\n  ((@skip std/core/types/@None() : ? string ) as @pat@0@1: ? string)\n     -> (match (p) {\n      ((@skip std/os/path/Path((@x@0: string) : string, (@pat@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n         -> @x@0;\n    });\n}","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"79\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":355,"args":{"any":[0]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"79\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/types/@None<string>)) {\n  ((std/core/types/@Optional((@uniq-root@108: string) : string) : ? string ) as @pat@3: ? string)\n     -> @uniq-root@108;\n  ((@skip std/core/types/@None() : ? string ) as @pat@0@1: ? string)\n     -> (match (p) {\n      ((@skip std/os/path/Path((@x@0: string) : string, (@pat@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n         -> @x@0;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/Path((match ((std/core/types/@None<string>)) {\n    ((std/core/types/@Optional((@uniq-root@108: string) : string) : ? string ) as @pat@3: ? string)\n       -> @uniq-root@108;\n    ((@skip std/core/types/@None() : ? string ) as @pat@0@1: ? string)\n       -> (match (p) {\n        ((@skip std/os/path/Path((@x@0: string) : string, (@pat@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n           -> @x@0;\n      });\n  }), (match (p) {\n    ((@skip std/os/path/Path((@pat@0@0: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2: std/os/path/path)\n       -> (match (@x) {\n        ((std/core/types/Cons((@pat@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat: ((list :: V -> V)<string>))\n           -> xx;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n           -> std/core/types/Nil<string>;\n      });\n  }))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":362,"args":{"any":[2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3929]","target":361,"args":{"any":[]}}}]},
{"label":"364([mcore:[#1050]#1079])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/hnd/@open-none1"}]},
{"label":"365([match_def@[mcore:[#1055]#1085]#1086])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"366([k@[#1087]#1089])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"367([match_def@[match_def@[#1087]#1091]#1092])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"368([k@[#1093]#1098])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"369([match_def@[match_def@[#1093]#1100]#1101])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"370([#1102])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@4,{\"op\": \"Var\",\"id\": \"@x83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"84\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"84\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@4,{\"op\": \"Var\",\"id\": \"@x83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"84\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"84\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"371([match_def@[#1093]#1100])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"84\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"84\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":370,"args":{"any":[0]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3930]","target":369,"args":{"any":[]}}}]},
{"label":"372([match_std/core/types/Nothing@[#1093]#1103])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"373([#1093])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"80\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"80\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@5: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@4: ((maybe :: V -> V)<string>))\n     -> x@1;\n}","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@5: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@4: ((maybe :: V -> V)<string>))\n     -> x@1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"80\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"80\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Nothing","target":372,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3931]","target":371,"args":{"any":[]}}}]},
{"label":"374([match_def@[#1087]#1091])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"80\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"80\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"80\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"80\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":373,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3932]","target":367,"args":{"any":[]}}}]},
{"label":"375([match_std/core/types/Cons@[#1087]#1106])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"80\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"80\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"81\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"81\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"82\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"82\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"80\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"80\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"81\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"81\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"82\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"82\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"376([#1087])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"p@1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"79\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"79\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"80\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"80\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@x@1) {\n  ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@1: ((list :: V -> V)<string>))\n     -> x@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@5: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@4: ((maybe :: V -> V)<string>))\n         -> x@1;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"80\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"80\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"81\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"82\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"80\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"80\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"81\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"82\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@x@1) {\n  ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@1: ((list :: V -> V)<string>))\n     -> x@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@5: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@4: ((maybe :: V -> V)<string>))\n         -> x@1;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"p@1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"79\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"79\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"80\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"80\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":375,"args":{"any":[1,2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3933]","target":374,"args":{"any":[]}}}]},
{"label":"377([mcore:[#1055]#1085])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p@1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"79\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"80\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p@1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"79\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"80\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":0,"clauses":[{"tag":"std/os/path/Path","target":376,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3934]","target":365,"args":{"any":[]}}}]},
{"label":"378([mcore:[#1060]#1107])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/hnd/@open-none1"}]},
{"label":"379([k@[k@[mcore:[#1069]#1113]#1118]#1121])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":1139}]},
{"label":"380([match_def@[k@[mcore:[#1069]#1113]#1118]#1123])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"381([k@[#1124]#1126])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"382([match_def@[match_def@[#1124]#1128]#1129])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"383([#1130])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"90\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@2: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"90\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"90\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@2: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"90\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"384([match_def@[#1124]#1128])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"90\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@2: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"90\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"90\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@2: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"90\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":383,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3935]","target":382,"args":{"any":[]}}}]},
{"label":"385([match_std/core/types/Cons@[#1124]#1135])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"90\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@2: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"90\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(@pat@0@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"91\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@5: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"91\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"92\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"92\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"90\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@2: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"90\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(@pat@0@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"91\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@5: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"91\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"92\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"92\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"386([#1124])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@1,{\"op\": \"Var\",\"id\": \"p@2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"89\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"89\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"90\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@2: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"90\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@x@2) {\n  ((std/core/types/Cons((@pat@0@5: string) : string, (xx@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@7: ((list :: V -> V)<string>))\n     -> xx@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@2: ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"90\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@2: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"90\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"91\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"92\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"90\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@2: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"90\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"91\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"92\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@x@2) {\n  ((std/core/types/Cons((@pat@0@5: string) : string, (xx@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@7: ((list :: V -> V)<string>))\n     -> xx@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@2: ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@1,{\"op\": \"Var\",\"id\": \"p@2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"89\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"89\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"90\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@2: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"90\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":385,"args":{"any":[1,2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3936]","target":384,"args":{"any":[]}}}]},
{"label":"387([k@[mcore:[#1069]#1113]#1118])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match (p@2) {\n  ((@skip std/os/path/Path((@pat@0@0@1: string) : string, (@x@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@1: std/os/path/path)\n     -> (match (@x@2) {\n      ((std/core/types/Cons((@pat@0@5: string) : string, (xx@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@7: ((list :: V -> V)<string>))\n         -> xx@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@2: ((list :: V -> V)<string>))\n         -> std/core/types/Nil<string>;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p@2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"89\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"90\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":379,"args":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p@2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"89\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"90\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p@2) {\n  ((@skip std/os/path/Path((@pat@0@0@1: string) : string, (@x@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@1: std/os/path/path)\n     -> (match (@x@2) {\n      ((std/core/types/Cons((@pat@0@5: string) : string, (xx@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@7: ((list :: V -> V)<string>))\n         -> xx@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@2: ((list :: V -> V)<string>))\n         -> std/core/types/Nil<string>;\n    });\n}","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":1,"clauses":[{"tag":"std/os/path/Path","target":386,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3937]","target":380,"args":{"any":[]}}}]},
{"label":"388([#1137])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"389([k@[#1138]#1140])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"390([match_def@[#1138]#1142])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"391([match_std/os/path/Path@[#1138]#1143])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4@0,{\"op\": \"Var\",\"id\": \"p@2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"87\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"87\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"88\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@2@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"88\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4@0,{\"op\": \"Var\",\"id\": \"p@2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"87\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"87\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"88\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@2@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"88\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"392([#1138])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@1@1,{\"op\": \"Var\",\"id\": \"@x85\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (p@2) {\n  ((@skip std/os/path/Path((@x@0@0: string) : string, (@pat@0@2@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4@0: std/os/path/path)\n     -> @x@0@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p@2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"87\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"88\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p@2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"87\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"88\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p@2) {\n  ((@skip std/os/path/Path((@x@0@0: string) : string, (@pat@0@2@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4@0: std/os/path/path)\n     -> @x@0@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@1@1,{\"op\": \"Var\",\"id\": \"@x85\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":0,"clauses":[{"tag":"std/os/path/Path","target":391,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3938]","target":390,"args":{"any":[]}}}]},
{"label":"393([match_def@[mcore:[#1069]#1113]#1136])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x85\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x85\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":1,"clauses":[{"tag":"std/core/types/@None","target":392,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3939]","target":388,"args":{"any":[]}}}]},
{"label":"394([#1144])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"@x85\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-root@108@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"86\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-root@108@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"86\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"@x85\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-root@108@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"86\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-root@108@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"86\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"395([mcore:[#1069]#1113])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/Path((match ((std/core/types/@None<string>)) {\n    ((std/core/types/@Optional((@uniq-root@108@0: string) : string) : ? string ) as @pat@3@0: ? string)\n       -> @uniq-root@108@0;\n    ((@skip std/core/types/@None() : ? string ) as @pat@0@1@1: ? string)\n       -> (match (p@2) {\n        ((@skip std/os/path/Path((@x@0@0: string) : string, (@pat@0@2@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4@0: std/os/path/path)\n           -> @x@0@0;\n      });\n  }), (match (p@2) {\n    ((@skip std/os/path/Path((@pat@0@0@1: string) : string, (@x@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@1: std/os/path/path)\n       -> (match (@x@2) {\n        ((std/core/types/Cons((@pat@0@5: string) : string, (xx@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@7: ((list :: V -> V)<string>))\n           -> xx@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@2: ((list :: V -> V)<string>))\n           -> std/core/types/Nil<string>;\n      });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/types/@None<string>)) {\n  ((std/core/types/@Optional((@uniq-root@108@0: string) : string) : ? string ) as @pat@3@0: ? string)\n     -> @uniq-root@108@0;\n  ((@skip std/core/types/@None() : ? string ) as @pat@0@1@1: ? string)\n     -> (match (p@2) {\n      ((@skip std/os/path/Path((@x@0@0: string) : string, (@pat@0@2@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4@0: std/os/path/path)\n         -> @x@0@0;\n    });\n}","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x85\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"86\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":387,"args":{"any":[0]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x85\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"86\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/types/@None<string>)) {\n  ((std/core/types/@Optional((@uniq-root@108@0: string) : string) : ? string ) as @pat@3@0: ? string)\n     -> @uniq-root@108@0;\n  ((@skip std/core/types/@None() : ? string ) as @pat@0@1@1: ? string)\n     -> (match (p@2) {\n      ((@skip std/os/path/Path((@x@0@0: string) : string, (@pat@0@2@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4@0: std/os/path/path)\n         -> @x@0@0;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/Path((match ((std/core/types/@None<string>)) {\n    ((std/core/types/@Optional((@uniq-root@108@0: string) : string) : ? string ) as @pat@3@0: ? string)\n       -> @uniq-root@108@0;\n    ((@skip std/core/types/@None() : ? string ) as @pat@0@1@1: ? string)\n       -> (match (p@2) {\n        ((@skip std/os/path/Path((@x@0@0: string) : string, (@pat@0@2@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4@0: std/os/path/path)\n           -> @x@0@0;\n      });\n  }), (match (p@2) {\n    ((@skip std/os/path/Path((@pat@0@0@1: string) : string, (@x@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@1: std/os/path/path)\n       -> (match (@x@2) {\n        ((std/core/types/Cons((@pat@0@5: string) : string, (xx@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@7: ((list :: V -> V)<string>))\n           -> xx@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@2: ((list :: V -> V)<string>))\n           -> std/core/types/Nil<string>;\n      });\n  }))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":394,"args":{"any":[2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3940]","target":393,"args":{"any":[]}}}]},
{"label":"396([mcore:[#1072]#1145])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/hnd/@open-none1"}]},
{"label":"397([match_def@[mcore:[#1077]#1151]#1152])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"398([k@[#1153]#1155])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"399([match_def@[match_def@[#1153]#1157]#1158])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"400([k@[#1159]#1164])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"401([match_def@[match_def@[#1159]#1166]#1167])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"402([#1168])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@8,{\"op\": \"Var\",\"id\": \"@x98\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"99\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@3: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"99\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@8,{\"op\": \"Var\",\"id\": \"@x98\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"99\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@3: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"99\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"403([match_def@[#1159]#1166])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x98\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"99\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x98\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"99\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":402,"args":{"any":[0]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3941]","target":401,"args":{"any":[]}}}]},
{"label":"404([match_std/core/types/Nothing@[#1159]#1169])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@8,{\"op\": \"Var\",\"id\": \"@x98\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@8,{\"op\": \"Var\",\"id\": \"@x98\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"405([#1159])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"95\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@3: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"95\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@8: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@3: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@8: ((maybe :: V -> V)<string>))\n     -> x@3;\n}","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x98\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x98\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@8: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@3: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@8: ((maybe :: V -> V)<string>))\n     -> x@3;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"95\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@3: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"95\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Nothing","target":404,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3942]","target":403,"args":{"any":[]}}}]},
{"label":"406([match_def@[#1153]#1157])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"95\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@3: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"95\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"95\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@3: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"95\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":405,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3943]","target":399,"args":{"any":[]}}}]},
{"label":"407([match_std/core/types/Cons@[#1153]#1172])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"95\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@3: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"95\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"96\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"96\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"97\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@2: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"97\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"95\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@3: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"95\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"96\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"96\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"97\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@2: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"97\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"408([#1153])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@2,{\"op\": \"Var\",\"id\": \"p@3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"94\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"94\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"95\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@3: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"95\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@x@3) {\n  ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@3: ((list :: V -> V)<string>))\n     -> x@0@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@2: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@8: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@3: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@8: ((maybe :: V -> V)<string>))\n         -> x@3;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"95\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@3: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"95\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"96\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"97\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"95\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@3: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"95\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"96\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"97\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@x@3) {\n  ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@3: ((list :: V -> V)<string>))\n     -> x@0@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@2: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@8: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@3: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@8: ((maybe :: V -> V)<string>))\n         -> x@3;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@2,{\"op\": \"Var\",\"id\": \"p@3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"94\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"94\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"95\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@3: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"95\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":407,"args":{"any":[1,2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3944]","target":406,"args":{"any":[]}}}]},
{"label":"409([mcore:[#1077]#1151])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p@3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"94\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"95\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p@3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"94\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"95\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":0,"clauses":[{"tag":"std/os/path/Path","target":408,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3945]","target":397,"args":{"any":[]}}}]},
{"label":"410([mcore:[#1082]#1173])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/hnd/@open-none1"}]},
{"label":"411([k@[k@[mcore:[#1091]#1179]#1184]#1187])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":1139}]},
{"label":"412([match_def@[k@[mcore:[#1091]#1179]#1184]#1189])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"413([k@[#1190]#1192])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"414([match_def@[match_def@[#1190]#1194]#1195])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"415([#1196])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"105\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@4: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"105\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"105\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@4: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"105\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"416([match_def@[#1190]#1194])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"105\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@4: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"105\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"105\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@4: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"105\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":415,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3946]","target":414,"args":{"any":[]}}}]},
{"label":"417([match_std/core/types/Cons@[#1190]#1201])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@9,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"105\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@4: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"105\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(@pat@0@9,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"106\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@9: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"106\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"107\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"107\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@9,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"105\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@4: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"105\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(@pat@0@9,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"106\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@9: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"106\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"107\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"107\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"418([#1190])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@3,{\"op\": \"Var\",\"id\": \"p@4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@0@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"104\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@0@3: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"104\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"105\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@4: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"105\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@x@4) {\n  ((std/core/types/Cons((@pat@0@9: string) : string, (xx@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@9: ((list :: V -> V)<string>))\n     -> xx@1;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@5: ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"105\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@4: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"105\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"106\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"107\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"105\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@4: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"105\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"106\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"107\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@x@4) {\n  ((std/core/types/Cons((@pat@0@9: string) : string, (xx@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@9: ((list :: V -> V)<string>))\n     -> xx@1;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@5: ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@3,{\"op\": \"Var\",\"id\": \"p@4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@0@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"104\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@0@3: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"104\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"105\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@4: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"105\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":417,"args":{"any":[1,2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3947]","target":416,"args":{"any":[]}}}]},
{"label":"419([k@[mcore:[#1091]#1179]#1184])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match (p@4) {\n  ((@skip std/os/path/Path((@pat@0@0@3: string) : string, (@x@4: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@3: std/os/path/path)\n     -> (match (@x@4) {\n      ((std/core/types/Cons((@pat@0@9: string) : string, (xx@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@9: ((list :: V -> V)<string>))\n         -> xx@1;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@5: ((list :: V -> V)<string>))\n         -> std/core/types/Nil<string>;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p@4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"104\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"105\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":411,"args":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p@4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"104\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"105\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p@4) {\n  ((@skip std/os/path/Path((@pat@0@0@3: string) : string, (@x@4: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@3: std/os/path/path)\n     -> (match (@x@4) {\n      ((std/core/types/Cons((@pat@0@9: string) : string, (xx@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@9: ((list :: V -> V)<string>))\n         -> xx@1;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@5: ((list :: V -> V)<string>))\n         -> std/core/types/Nil<string>;\n    });\n}","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":1,"clauses":[{"tag":"std/os/path/Path","target":418,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3948]","target":412,"args":{"any":[]}}}]},
{"label":"420([#1203])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"421([k@[#1204]#1206])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"422([match_def@[#1204]#1208])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"423([match_std/os/path/Path@[#1204]#1209])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4@1,{\"op\": \"Var\",\"id\": \"p@4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"102\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"102\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@2@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"103\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@2@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"103\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4@1,{\"op\": \"Var\",\"id\": \"p@4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"102\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"102\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@2@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"103\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@2@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"103\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"424([#1204])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@1@3,{\"op\": \"Var\",\"id\": \"@x100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (p@4) {\n  ((@skip std/os/path/Path((@x@0@1: string) : string, (@pat@0@2@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4@1: std/os/path/path)\n     -> @x@0@1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p@4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"102\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"103\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p@4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"102\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"103\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p@4) {\n  ((@skip std/os/path/Path((@x@0@1: string) : string, (@pat@0@2@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4@1: std/os/path/path)\n     -> @x@0@1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@1@3,{\"op\": \"Var\",\"id\": \"@x100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":0,"clauses":[{"tag":"std/os/path/Path","target":423,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3949]","target":422,"args":{"any":[]}}}]},
{"label":"425([match_def@[mcore:[#1091]#1179]#1202])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":1,"clauses":[{"tag":"std/core/types/@None","target":424,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3950]","target":420,"args":{"any":[]}}}]},
{"label":"426([#1210])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3@1,{\"op\": \"Var\",\"id\": \"@x100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-root@108@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"101\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-root@108@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"101\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3@1,{\"op\": \"Var\",\"id\": \"@x100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-root@108@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"101\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-root@108@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"101\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"427([mcore:[#1091]#1179])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/Path((match ((std/core/types/@None<string>)) {\n    ((std/core/types/@Optional((@uniq-root@108@1: string) : string) : ? string ) as @pat@3@1: ? string)\n       -> @uniq-root@108@1;\n    ((@skip std/core/types/@None() : ? string ) as @pat@0@1@3: ? string)\n       -> (match (p@4) {\n        ((@skip std/os/path/Path((@x@0@1: string) : string, (@pat@0@2@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4@1: std/os/path/path)\n           -> @x@0@1;\n      });\n  }), (match (p@4) {\n    ((@skip std/os/path/Path((@pat@0@0@3: string) : string, (@x@4: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@3: std/os/path/path)\n       -> (match (@x@4) {\n        ((std/core/types/Cons((@pat@0@9: string) : string, (xx@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@9: ((list :: V -> V)<string>))\n           -> xx@1;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@5: ((list :: V -> V)<string>))\n           -> std/core/types/Nil<string>;\n      });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/types/@None<string>)) {\n  ((std/core/types/@Optional((@uniq-root@108@1: string) : string) : ? string ) as @pat@3@1: ? string)\n     -> @uniq-root@108@1;\n  ((@skip std/core/types/@None() : ? string ) as @pat@0@1@3: ? string)\n     -> (match (p@4) {\n      ((@skip std/os/path/Path((@x@0@1: string) : string, (@pat@0@2@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4@1: std/os/path/path)\n         -> @x@0@1;\n    });\n}","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"101\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":419,"args":{"any":[0]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"101\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/types/@None<string>)) {\n  ((std/core/types/@Optional((@uniq-root@108@1: string) : string) : ? string ) as @pat@3@1: ? string)\n     -> @uniq-root@108@1;\n  ((@skip std/core/types/@None() : ? string ) as @pat@0@1@3: ? string)\n     -> (match (p@4) {\n      ((@skip std/os/path/Path((@x@0@1: string) : string, (@pat@0@2@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4@1: std/os/path/path)\n         -> @x@0@1;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/Path((match ((std/core/types/@None<string>)) {\n    ((std/core/types/@Optional((@uniq-root@108@1: string) : string) : ? string ) as @pat@3@1: ? string)\n       -> @uniq-root@108@1;\n    ((@skip std/core/types/@None() : ? string ) as @pat@0@1@3: ? string)\n       -> (match (p@4) {\n        ((@skip std/os/path/Path((@x@0@1: string) : string, (@pat@0@2@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4@1: std/os/path/path)\n           -> @x@0@1;\n      });\n  }), (match (p@4) {\n    ((@skip std/os/path/Path((@pat@0@0@3: string) : string, (@x@4: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@3: std/os/path/path)\n       -> (match (@x@4) {\n        ((std/core/types/Cons((@pat@0@9: string) : string, (xx@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@9: ((list :: V -> V)<string>))\n           -> xx@1;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@5: ((list :: V -> V)<string>))\n           -> std/core/types/Nil<string>;\n      });\n  }))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":426,"args":{"any":[2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3951]","target":425,"args":{"any":[]}}}]},
{"label":"428([#1216])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Jump","target":320}]},
{"label":"429([#1238])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Jump","target":363}]},
{"label":"430([method_apply@[#1245]#1248])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Jump","target":377}]},
{"label":"431([#1262])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Jump","target":395}]},
{"label":"432([k@[switch case for Bool(true)#1259]#1269])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"433([switch case for Bool(true)#1259])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@6,{\"op\": \"Var\",\"id\": \"@x78\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@open-none1<std/os/path/path,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>((fn(p@2: std/os/path/path){\n    (std/os/path/Path((match ((std/core/types/@None<string>)) {\n        ((std/core/types/@Optional((@uniq-root@108@0: string) : string) : ? string ) as @pat@3@0: ? string)\n           -> @uniq-root@108@0;\n        ((@skip std/core/types/@None() : ? string ) as @pat@0@1@1: ? string)\n           -> (match (p@2) {\n            ((@skip std/os/path/Path((@x@0@0: string) : string, (@pat@0@2@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4@0: std/os/path/path)\n               -> @x@0@0;\n          });\n      }), (match (p@2) {\n        ((@skip std/os/path/Path((@pat@0@0@1: string) : string, (@x@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@1: std/os/path/path)\n           -> (match (@x@2) {\n            ((std/core/types/Cons((@pat@0@5: string) : string, (xx@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@7: ((list :: V -> V)<string>))\n               -> xx@0;\n            ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@2: ((list :: V -> V)<string>))\n               -> std/core/types/Nil<string>;\n          });\n      })));\n  }), p@0)","traced":{"any":[]}},
{"op":"New","out":1,"targets":[431],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@open-none1<std/os/path/path,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>((fn(p@2: std/os/path/path){\n    (std/os/path/Path((match ((std/core/types/@None<string>)) {\n        ((std/core/types/@Optional((@uniq-root@108@0: string) : string) : ? string ) as @pat@3@0: ? string)\n           -> @uniq-root@108@0;\n        ((@skip std/core/types/@None() : ? string ) as @pat@0@1@1: ? string)\n           -> (match (p@2) {\n            ((@skip std/os/path/Path((@x@0@0: string) : string, (@pat@0@2@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4@0: std/os/path/path)\n               -> @x@0@0;\n          });\n      }), (match (p@2) {\n        ((@skip std/os/path/Path((@pat@0@0@1: string) : string, (@x@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@1: std/os/path/path)\n           -> (match (@x@2) {\n            ((std/core/types/Cons((@pat@0@5: string) : string, (xx@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@7: ((list :: V -> V)<string>))\n               -> xx@0;\n            ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@2: ((list :: V -> V)<string>))\n               -> std/core/types/Nil<string>;\n          });\n      })));\n  }), p@0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@6,{\"op\": \"Var\",\"id\": \"@x78\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Jump","target":378}]},
{"label":"434([method_apply@[switch default case#1271]#1274])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Jump","target":409}]},
{"label":"435([k@[k@[switch default case#1271]#1281]#1286])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"436([#1291])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Jump","target":427}]},
{"label":"437([k@[switch case for Bool(true)#1288]#1298])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"438([switch case for Bool(true)#1288])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@4,{\"op\": \"Var\",\"id\": \"@x93\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@open-none1<std/os/path/path,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>((fn(p@4: std/os/path/path){\n    (std/os/path/Path((match ((std/core/types/@None<string>)) {\n        ((std/core/types/@Optional((@uniq-root@108@1: string) : string) : ? string ) as @pat@3@1: ? string)\n           -> @uniq-root@108@1;\n        ((@skip std/core/types/@None() : ? string ) as @pat@0@1@3: ? string)\n           -> (match (p@4) {\n            ((@skip std/os/path/Path((@x@0@1: string) : string, (@pat@0@2@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4@1: std/os/path/path)\n               -> @x@0@1;\n          });\n      }), (match (p@4) {\n        ((@skip std/os/path/Path((@pat@0@0@3: string) : string, (@x@4: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@3: std/os/path/path)\n           -> (match (@x@4) {\n            ((std/core/types/Cons((@pat@0@9: string) : string, (xx@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@9: ((list :: V -> V)<string>))\n               -> xx@1;\n            ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@5: ((list :: V -> V)<string>))\n               -> std/core/types/Nil<string>;\n          });\n      })));\n  }), p@0)","traced":{"any":[]}},
{"op":"New","out":0,"targets":[436],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@open-none1<std/os/path/path,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>((fn(p@4: std/os/path/path){\n    (std/os/path/Path((match ((std/core/types/@None<string>)) {\n        ((std/core/types/@Optional((@uniq-root@108@1: string) : string) : ? string ) as @pat@3@1: ? string)\n           -> @uniq-root@108@1;\n        ((@skip std/core/types/@None() : ? string ) as @pat@0@1@3: ? string)\n           -> (match (p@4) {\n            ((@skip std/os/path/Path((@x@0@1: string) : string, (@pat@0@2@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4@1: std/os/path/path)\n               -> @x@0@1;\n          });\n      }), (match (p@4) {\n        ((@skip std/os/path/Path((@pat@0@0@3: string) : string, (@x@4: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@3: std/os/path/path)\n           -> (match (@x@4) {\n            ((std/core/types/Cons((@pat@0@9: string) : string, (xx@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@9: ((list :: V -> V)<string>))\n               -> xx@1;\n            ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@5: ((list :: V -> V)<string>))\n               -> std/core/types/Nil<string>;\n          });\n      })));\n  }), p@0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@4,{\"op\": \"Var\",\"id\": \"@x93\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Jump","target":410}]},
{"label":"439([switch case for Bool(false)#1301])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@4,{\"op\": \"Var\",\"id\": \"@x93\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@4,{\"op\": \"Var\",\"id\": \"@x93\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"440([switch default case#1302])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"441([switch default case#1300])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Swap","a":0,"b":1},
{"op":"Switch","arg":1,"values":[false],"targets":[439],"default":440}]},
{"label":"442([k@[switch default case#1271]#1281])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: \"exe\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"exe"},
{"op":"PrimOp","name":"infixEq(String, String): Boolean","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"exe\"","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[438],"default":441}]},
{"label":"443([switch default case#1271])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@6,{\"op\": \"Var\",\"id\": \"@x78\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/string/(==)((std/core/hnd/@open-none1<std/os/path/path,string,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>((fn(p@3: std/os/path/path){\n      (match (p@3) {\n        ((@skip std/os/path/Path((@pat@0@1@2: string) : string, (@x@3: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@2: std/os/path/path)\n           -> (match (@x@3) {\n            ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@3: ((list :: V -> V)<string>))\n               -> x@0@0;\n            ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@2: ((list :: V -> V)<string>))\n               -> (match ((std/core/types/Nothing<string>)) {\n                ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@8: ((maybe :: V -> V)<string>))\n                   -> \"\";\n                ((@skip std/core/types/Just((x@3: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@8: ((maybe :: V -> V)<string>))\n                   -> x@3;\n              });\n          });\n      });\n    }), p@0)), \"exe\"))) {\n  ((std/core/types/True() : bool ) as @pat@1@4: bool)\n     -> std/core/hnd/@open-none1<std/os/path/path,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>((fn(p@4: std/os/path/path){\n        (std/os/path/Path((match ((std/core/types/@None<string>)) {\n            ((std/core/types/@Optional((@uniq-root@108@1: string) : string) : ? string ) as @pat@3@1: ? string)\n               -> @uniq-root@108@1;\n            ((@skip std/core/types/@None() : ? string ) as @pat@0@1@3: ? string)\n               -> (match (p@4) {\n                ((@skip std/os/path/Path((@x@0@1: string) : string, (@pat@0@2@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4@1: std/os/path/path)\n                   -> @x@0@1;\n              });\n          }), (match (p@4) {\n            ((@skip std/os/path/Path((@pat@0@0@3: string) : string, (@x@4: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@3: std/os/path/path)\n               -> (match (@x@4) {\n                ((std/core/types/Cons((@pat@0@9: string) : string, (xx@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@9: ((list :: V -> V)<string>))\n                   -> xx@1;\n                ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@5: ((list :: V -> V)<string>))\n                   -> std/core/types/Nil<string>;\n              });\n          })));\n      }), p@0);\n  ((@skip std/core/types/False() : bool ) as @pat@2@4: bool)\n     -> p@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/(==)((std/core/hnd/@open-none1<std/os/path/path,string,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>((fn(p@3: std/os/path/path){\n      (match (p@3) {\n        ((@skip std/os/path/Path((@pat@0@1@2: string) : string, (@x@3: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@2: std/os/path/path)\n           -> (match (@x@3) {\n            ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@3: ((list :: V -> V)<string>))\n               -> x@0@0;\n            ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@2: ((list :: V -> V)<string>))\n               -> (match ((std/core/types/Nothing<string>)) {\n                ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@8: ((maybe :: V -> V)<string>))\n                   -> \"\";\n                ((@skip std/core/types/Just((x@3: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@8: ((maybe :: V -> V)<string>))\n                   -> x@3;\n              });\n          });\n      });\n    }), p@0)), \"exe\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@open-none1<std/os/path/path,string,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>((fn(p@3: std/os/path/path){\n    (match (p@3) {\n      ((@skip std/os/path/Path((@pat@0@1@2: string) : string, (@x@3: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@2: std/os/path/path)\n         -> (match (@x@3) {\n          ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@3: ((list :: V -> V)<string>))\n             -> x@0@0;\n          ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@2: ((list :: V -> V)<string>))\n             -> (match ((std/core/types/Nothing<string>)) {\n              ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@8: ((maybe :: V -> V)<string>))\n                 -> \"\";\n              ((@skip std/core/types/Just((x@3: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@8: ((maybe :: V -> V)<string>))\n                 -> x@3;\n            });\n        });\n    });\n  }), p@0)","traced":{"any":[]}},
{"op":"New","out":1,"targets":[434],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":442,"args":{"any":[0]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@open-none1<std/os/path/path,string,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>((fn(p@3: std/os/path/path){\n    (match (p@3) {\n      ((@skip std/os/path/Path((@pat@0@1@2: string) : string, (@x@3: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@2: std/os/path/path)\n         -> (match (@x@3) {\n          ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@3: ((list :: V -> V)<string>))\n             -> x@0@0;\n          ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@2: ((list :: V -> V)<string>))\n             -> (match ((std/core/types/Nothing<string>)) {\n              ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@8: ((maybe :: V -> V)<string>))\n                 -> \"\";\n              ((@skip std/core/types/Just((x@3: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@8: ((maybe :: V -> V)<string>))\n                 -> x@3;\n            });\n        });\n    });\n  }), p@0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/(==)((std/core/hnd/@open-none1<std/os/path/path,string,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>((fn(p@3: std/os/path/path){\n      (match (p@3) {\n        ((@skip std/os/path/Path((@pat@0@1@2: string) : string, (@x@3: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@2: std/os/path/path)\n           -> (match (@x@3) {\n            ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@3: ((list :: V -> V)<string>))\n               -> x@0@0;\n            ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@2: ((list :: V -> V)<string>))\n               -> (match ((std/core/types/Nothing<string>)) {\n                ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@8: ((maybe :: V -> V)<string>))\n                   -> \"\";\n                ((@skip std/core/types/Just((x@3: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@8: ((maybe :: V -> V)<string>))\n                   -> x@3;\n              });\n          });\n      });\n    }), p@0)), \"exe\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/string/(==)((std/core/hnd/@open-none1<std/os/path/path,string,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>((fn(p@3: std/os/path/path){\n      (match (p@3) {\n        ((@skip std/os/path/Path((@pat@0@1@2: string) : string, (@x@3: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@2: std/os/path/path)\n           -> (match (@x@3) {\n            ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@3: ((list :: V -> V)<string>))\n               -> x@0@0;\n            ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@2: ((list :: V -> V)<string>))\n               -> (match ((std/core/types/Nothing<string>)) {\n                ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@8: ((maybe :: V -> V)<string>))\n                   -> \"\";\n                ((@skip std/core/types/Just((x@3: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@8: ((maybe :: V -> V)<string>))\n                   -> x@3;\n              });\n          });\n      });\n    }), p@0)), \"exe\"))) {\n  ((std/core/types/True() : bool ) as @pat@1@4: bool)\n     -> std/core/hnd/@open-none1<std/os/path/path,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>((fn(p@4: std/os/path/path){\n        (std/os/path/Path((match ((std/core/types/@None<string>)) {\n            ((std/core/types/@Optional((@uniq-root@108@1: string) : string) : ? string ) as @pat@3@1: ? string)\n               -> @uniq-root@108@1;\n            ((@skip std/core/types/@None() : ? string ) as @pat@0@1@3: ? string)\n               -> (match (p@4) {\n                ((@skip std/os/path/Path((@x@0@1: string) : string, (@pat@0@2@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4@1: std/os/path/path)\n                   -> @x@0@1;\n              });\n          }), (match (p@4) {\n            ((@skip std/os/path/Path((@pat@0@0@3: string) : string, (@x@4: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@3: std/os/path/path)\n               -> (match (@x@4) {\n                ((std/core/types/Cons((@pat@0@9: string) : string, (xx@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@9: ((list :: V -> V)<string>))\n                   -> xx@1;\n                ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@5: ((list :: V -> V)<string>))\n                   -> std/core/types/Nil<string>;\n              });\n          })));\n      }), p@0);\n  ((@skip std/core/types/False() : bool ) as @pat@2@4: bool)\n     -> p@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@6,{\"op\": \"Var\",\"id\": \"@x78\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Jump","target":396}]},
{"label":"444([k@[#1245]#1255])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: \"bin\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"bin"},
{"op":"PrimOp","name":"infixEq(String, String): Boolean","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"bin\"","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[433],"default":443}]},
{"label":"445([#1245])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/(==)((std/core/hnd/@open-none1<std/os/path/path,string,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>((fn(p@1: std/os/path/path){\n      (match (p@1) {\n        ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n           -> (match (@x@1) {\n            ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@1: ((list :: V -> V)<string>))\n               -> x@0;\n            ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n               -> (match ((std/core/types/Nothing<string>)) {\n                ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@5: ((maybe :: V -> V)<string>))\n                   -> \"\";\n                ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@4: ((maybe :: V -> V)<string>))\n                   -> x@1;\n              });\n          });\n      });\n    }), p@0)), \"bin\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@open-none1<std/os/path/path,string,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>((fn(p@1: std/os/path/path){\n    (match (p@1) {\n      ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n         -> (match (@x@1) {\n          ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@1: ((list :: V -> V)<string>))\n             -> x@0;\n          ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n             -> (match ((std/core/types/Nothing<string>)) {\n              ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@5: ((maybe :: V -> V)<string>))\n                 -> \"\";\n              ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@4: ((maybe :: V -> V)<string>))\n                 -> x@1;\n            });\n        });\n    });\n  }), p@0)","traced":{"any":[]}},
{"op":"New","out":1,"targets":[430],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":444,"args":{"any":[0]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@open-none1<std/os/path/path,string,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>((fn(p@1: std/os/path/path){\n    (match (p@1) {\n      ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n         -> (match (@x@1) {\n          ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@1: ((list :: V -> V)<string>))\n             -> x@0;\n          ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n             -> (match ((std/core/types/Nothing<string>)) {\n              ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@5: ((maybe :: V -> V)<string>))\n                 -> \"\";\n              ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@4: ((maybe :: V -> V)<string>))\n                 -> x@1;\n            });\n        });\n    });\n  }), p@0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/(==)((std/core/hnd/@open-none1<std/os/path/path,string,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>((fn(p@1: std/os/path/path){\n      (match (p@1) {\n        ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n           -> (match (@x@1) {\n            ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@1: ((list :: V -> V)<string>))\n               -> x@0;\n            ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n               -> (match ((std/core/types/Nothing<string>)) {\n                ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@5: ((maybe :: V -> V)<string>))\n                   -> \"\";\n                ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@4: ((maybe :: V -> V)<string>))\n                   -> x@1;\n              });\n          });\n      });\n    }), p@0)), \"bin\")","traced":{"any":[]}},
{"op":"Jump","target":364}]},
{"label":"446([k@[k@[mcore:[#1094]#1211]#1213]#1235])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"p@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@open-none1<std/os/path/path,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>((fn(p: std/os/path/path){\n    (std/os/path/Path((match ((std/core/types/@None<string>)) {\n        ((std/core/types/@Optional((@uniq-root@108: string) : string) : ? string ) as @pat@3: ? string)\n           -> @uniq-root@108;\n        ((@skip std/core/types/@None() : ? string ) as @pat@0@1: ? string)\n           -> (match (p) {\n            ((@skip std/os/path/Path((@x@0: string) : string, (@pat@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n               -> @x@0;\n          });\n      }), (match (p) {\n        ((@skip std/os/path/Path((@pat@0@0: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2: std/os/path/path)\n           -> (match (@x) {\n            ((std/core/types/Cons((@pat@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat: ((list :: V -> V)<string>))\n               -> xx;\n            ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n               -> std/core/types/Nil<string>;\n          });\n      })));\n  }), @x-x1@10146)","traced":{"any":[]}},
{"op":"New","out":1,"targets":[429],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":445,"args":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@open-none1<std/os/path/path,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>((fn(p: std/os/path/path){\n    (std/os/path/Path((match ((std/core/types/@None<string>)) {\n        ((std/core/types/@Optional((@uniq-root@108: string) : string) : ? string ) as @pat@3: ? string)\n           -> @uniq-root@108;\n        ((@skip std/core/types/@None() : ? string ) as @pat@0@1: ? string)\n           -> (match (p) {\n            ((@skip std/os/path/Path((@x@0: string) : string, (@pat@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n               -> @x@0;\n          });\n      }), (match (p) {\n        ((@skip std/os/path/Path((@pat@0@0: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2: std/os/path/path)\n           -> (match (@x) {\n            ((std/core/types/Cons((@pat@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat: ((list :: V -> V)<string>))\n               -> xx;\n            ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n               -> std/core/types/Nil<string>;\n          });\n      })));\n  }), @x-x1@10146)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"p@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}","traced":{"any":[]}},
{"op":"Jump","target":346}]},
{"label":"447([k@[mcore:[#1094]#1211]#1213])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@x-x1@10146\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@open-none1<string,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>(std/os/path/path, @x-x1@0@10147)","traced":{"any":[]}},
{"op":"New","out":1,"targets":[428],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":446,"args":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@open-none1<string,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>(std/os/path/path, @x-x1@0@10147)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@x-x1@10146\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}","traced":{"any":[]}},
{"op":"Jump","target":345}]},
{"label":"448([mcore:[#1094]#1211])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@x-x1@0@10147\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/xapp-path()","traced":{"any":[]}},
{"op":"Push","target":447,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/xapp-path()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@x-x1@0@10147\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Jump","target":23}]},
{"label":"449([mcore:[#1103]#1303])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/vector/vlist"}]},
{"label":"450([k@[k@[k@[k@[#1320]#1331]#1334]#1340]#1342])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Jump","target":1139}]},
{"label":"451([#1344])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"452([#1345])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@6,{\"op\": \"Var\",\"id\": \"q\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"108\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"108\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"109\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@4: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"109\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@6,{\"op\": \"Var\",\"id\": \"q\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"108\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"108\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"109\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@4: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"109\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"453([k@[k@[k@[#1320]#1331]#1334]#1340])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/Path((match (q) {\n    ((@skip std/os/path/Path((@x@1: string) : string, (@pat@0@4: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@6: std/os/path/path)\n       -> @x@1;\n  }), parts)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (q) {\n  ((@skip std/os/path/Path((@x@1: string) : string, (@pat@0@4: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@6: std/os/path/path)\n     -> @x@1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"q\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"108\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"109\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":450,"args":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"q\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"108\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"109\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (q) {\n  ((@skip std/os/path/Path((@x@1: string) : string, (@pat@0@4: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@6: std/os/path/path)\n     -> @x@1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/Path((match (q) {\n    ((@skip std/os/path/Path((@x@1: string) : string, (@pat@0@4: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@6: std/os/path/path)\n       -> @x@1;\n  }), parts)","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":1,"clauses":[{"tag":"std/os/path/Path","target":452,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3952]","target":451,"args":{"any":[]}}}]},
{"label":"454([k@[k@[#1320]#1331]#1334])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":453,"args":{"any":[1]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Copy","from":3,"to":2},
{"op":"Jump","target":195}]},
{"label":"455([match_def@[k@[#1320]#1331]#1346])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"456([match_std/os/path/Path@[k@[#1320]#1331]#1347])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@2,{\"op\": \"Var\",\"id\": \"q\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"116\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"116\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"117\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"117\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@2,{\"op\": \"Var\",\"id\": \"q\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"116\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"116\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"117\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"117\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"457([k@[#1320]#1331])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match (q) {\n  ((@skip std/os/path/Path((@pat@0@0@0: string) : string, (@x@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@1@2: std/os/path/path)\n     -> @x@0@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"q\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"116\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"117\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":454,"args":{"any":[1,0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"q\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"116\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"117\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (q) {\n  ((@skip std/os/path/Path((@pat@0@0@0: string) : string, (@x@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@1@2: std/os/path/path)\n     -> @x@0@0;\n}","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":1,"clauses":[{"tag":"std/os/path/Path","target":456,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3953]","target":455,"args":{"any":[]}}}]},
{"label":"458([#1320])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"v@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/splitv(basename@0, \"/\")","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Undefined:  std/core/string/splitv"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/push-parts((std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>))), (match (q) {\n    ((@skip std/os/path/Path((@pat@0@0@0: string) : string, (@x@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@1@2: std/os/path/path)\n       -> @x@0@0;\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@None<(list :: V -> V)<string>>","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":457,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":3,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@None<(list :: V -> V)<string>>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/push-parts((std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>))), (match (q) {\n    ((@skip std/os/path/Path((@pat@0@0@0: string) : string, (@x@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@1@2: std/os/path/path)\n       -> @x@0@0;\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/splitv(basename@0, \"/\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"v@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}}","traced":{"any":[]}},
{"op":"Jump","target":449}]},
{"label":"459([k@[k@[mcore:[#1113]#1309]#1314]#1317])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Push","target":458,"args":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":1139}]},
{"label":"460([match_def@[k@[mcore:[#1113]#1309]#1314]#1348])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"461([k@[#1349]#1351])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"462([match_def@[match_def@[#1349]#1353]#1354])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"463([#1355])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"113\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"113\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"464([match_def@[#1349]#1353])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"113\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"113\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":463,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3954]","target":462,"args":{"any":[]}}}]},
{"label":"465([match_std/core/types/Cons@[#1349]#1360])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"113\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"114\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"114\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"115\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"115\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"113\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"114\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"114\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"115\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"115\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"466([#1349])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"112\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"112\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"113\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@x) {\n  ((std/core/types/Cons((@pat@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat: ((list :: V -> V)<string>))\n     -> xx;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"113\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"114\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"115\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"113\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"114\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"115\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@x) {\n  ((std/core/types/Cons((@pat@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat: ((list :: V -> V)<string>))\n     -> xx;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"112\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"112\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"113\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":465,"args":{"any":[1,2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3955]","target":464,"args":{"any":[]}}}]},
{"label":"467([k@[mcore:[#1113]#1309]#1314])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@0: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2: std/os/path/path)\n     -> (match (@x) {\n      ((std/core/types/Cons((@pat@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat: ((list :: V -> V)<string>))\n         -> xx;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n         -> std/core/types/Nil<string>;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"112\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":459,"args":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"112\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@0: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2: std/os/path/path)\n     -> (match (@x) {\n      ((std/core/types/Cons((@pat@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat: ((list :: V -> V)<string>))\n         -> xx;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n         -> std/core/types/Nil<string>;\n    });\n}","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":1,"clauses":[{"tag":"std/os/path/Path","target":466,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3956]","target":460,"args":{"any":[]}}}]},
{"label":"468([#1362])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"469([k@[#1363]#1365])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"470([match_def@[#1363]#1367])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"471([match_std/os/path/Path@[#1363]#1368])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"110\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"110\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"111\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@2: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"111\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"110\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"110\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"111\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@2: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"111\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"472([#1363])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"@x108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (p) {\n  ((@skip std/os/path/Path((@x@0: string) : string, (@pat@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n     -> @x@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"110\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"111\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"110\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"111\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p) {\n  ((@skip std/os/path/Path((@x@0: string) : string, (@pat@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n     -> @x@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"@x108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":0,"clauses":[{"tag":"std/os/path/Path","target":471,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3957]","target":470,"args":{"any":[]}}}]},
{"label":"473([match_def@[mcore:[#1113]#1309]#1361])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":1,"clauses":[{"tag":"std/core/types/@None","target":472,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3958]","target":468,"args":{"any":[]}}}]},
{"label":"474([#1369])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-root@108,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"109\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-root@108: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"109\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-root@108,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"109\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-root@108: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"109\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"475([mcore:[#1113]#1309])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"q\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/Path((match ((std/core/types/@None<string>)) {\n    ((std/core/types/@Optional((@uniq-root@108: string) : string) : ? string ) as @pat@3: ? string)\n       -> @uniq-root@108;\n    ((@skip std/core/types/@None() : ? string ) as @pat@0@1: ? string)\n       -> (match (p) {\n        ((@skip std/os/path/Path((@x@0: string) : string, (@pat@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n           -> @x@0;\n      });\n  }), (match (p) {\n    ((@skip std/os/path/Path((@pat@0@0: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2: std/os/path/path)\n       -> (match (@x) {\n        ((std/core/types/Cons((@pat@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat: ((list :: V -> V)<string>))\n           -> xx;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n           -> std/core/types/Nil<string>;\n      });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/types/@None<string>)) {\n  ((std/core/types/@Optional((@uniq-root@108: string) : string) : ? string ) as @pat@3: ? string)\n     -> @uniq-root@108;\n  ((@skip std/core/types/@None() : ? string ) as @pat@0@1: ? string)\n     -> (match (p) {\n      ((@skip std/os/path/Path((@x@0: string) : string, (@pat@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n         -> @x@0;\n    });\n}","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"109\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":467,"args":{"any":[0]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"109\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/types/@None<string>)) {\n  ((std/core/types/@Optional((@uniq-root@108: string) : string) : ? string ) as @pat@3: ? string)\n     -> @uniq-root@108;\n  ((@skip std/core/types/@None() : ? string ) as @pat@0@1: ? string)\n     -> (match (p) {\n      ((@skip std/os/path/Path((@x@0: string) : string, (@pat@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n         -> @x@0;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/Path((match ((std/core/types/@None<string>)) {\n    ((std/core/types/@Optional((@uniq-root@108: string) : string) : ? string ) as @pat@3: ? string)\n       -> @uniq-root@108;\n    ((@skip std/core/types/@None() : ? string ) as @pat@0@1: ? string)\n       -> (match (p) {\n        ((@skip std/os/path/Path((@x@0: string) : string, (@pat@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n           -> @x@0;\n      });\n  }), (match (p) {\n    ((@skip std/os/path/Path((@pat@0@0: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2: std/os/path/path)\n       -> (match (@x) {\n        ((std/core/types/Cons((@pat@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat: ((list :: V -> V)<string>))\n           -> xx;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n           -> std/core/types/Nil<string>;\n      });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"q\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":474,"args":{"any":[2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3959]","target":473,"args":{"any":[]}}}]},
{"label":"476([mcore:[#1114]#1370])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/sslice/find-last"}]},
{"label":"477([mcore:[#1119]#1376])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"478([mcore:[#1121]#1382])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/sslice/string"}]},
{"label":"479([mcore:[#1124]#1387])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"CallLib","lib":3,"symbol":"std/core/sslice/Sslice"}]},
{"label":"480([mcore:[#1131]#1394])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/sslice/string"}]},
{"label":"481([mcore:[#1133]#1399])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/sslice/after"}]},
{"label":"482([mcore:[#1138]#1404])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"483([mcore:[#1142]#1410])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"484([#1425])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"485([k@[#1426]#1433])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"486([#1426])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"@x110\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<string,string>(basename@0, \"\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":""},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<string,string>(basename@0, \"\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"@x110\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Jump","target":483}]},
{"label":"487([match_def@[k@[mcore:[#1146]#1416]#1423]#1424])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x110\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x110\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":1,"clauses":[{"tag":"std/core/types/Nothing","target":486,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3960]","target":484,"args":{"any":[]}}}]},
{"label":"488([match_def@[match_def@[#1435]#1436]#1437])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"489([k@[#1438]#1445])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"490([#1438])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"@x110\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<string,string>(basename@0, \"\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":""},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<string,string>(basename@0, \"\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"@x110\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Jump","target":482}]},
{"label":"491([match_def@[#1435]#1436])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x110\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x110\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":1,"clauses":[{"tag":"std/core/types/Nothing","target":490,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3961]","target":488,"args":{"any":[]}}}]},
{"label":"492([k@[k@[k@[k@[#1449]#1455]#1461]#1467]#1473])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"493([k@[k@[k@[#1449]#1455]#1461]#1467])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":477}]},
{"label":"494([k@[k@[#1449]#1455]#1461])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":493,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Jump","target":480}]},
{"label":"495([k@[#1449]#1455])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/string((std/core/sslice/after(slice)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/after(slice)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":494,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":2,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/after(slice)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/string((std/core/sslice/after(slice)))","traced":{"any":[]}},
{"op":"Jump","target":481}]},
{"label":"496([#1449])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":495,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Jump","target":478}]},
{"label":"497([#1475])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"498([k@[#1476]#1483])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"499([#1476])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"111\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"111\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(s,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"115\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"115\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"116\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"116\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"117\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"117\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/Sslice(s, 0, start)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/Sslice(s, 0, start)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"111\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"111\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(s,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"115\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"115\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"116\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"116\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"117\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"117\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":479}]},
{"label":"500([match_std/core/sslice/Sslice@[#1435]#1447])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x110\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(slice,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"111\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"111\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"112\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"112\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"113\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"113\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"114\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"114\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<string,string>((std/core/sslice/string((match (slice) {\n    ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n       -> std/core/sslice/Sslice(s, 0, start);\n  }))), (std/core/sslice/string((std/core/sslice/after(slice)))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/string((match (slice) {\n  ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n     -> std/core/sslice/Sslice(s, 0, start);\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (slice) {\n  ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n     -> std/core/sslice/Sslice(s, 0, start);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"111\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"111\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"115\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"116\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"117\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Push","target":496,"args":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"111\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"111\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"115\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"116\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"117\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (slice) {\n  ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n     -> std/core/sslice/Sslice(s, 0, start);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/string((match (slice) {\n  ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n     -> std/core/sslice/Sslice(s, 0, start);\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<string,string>((std/core/sslice/string((match (slice) {\n    ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n       -> std/core/sslice/Sslice(s, 0, start);\n  }))), (std/core/sslice/string((std/core/sslice/after(slice)))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x110\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(slice,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"111\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"111\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"112\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"112\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"113\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"113\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"114\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"114\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":0,"clauses":[{"tag":"std/core/sslice/Sslice","target":499,"args":{"any":[0,1,2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3962]","target":497,"args":{"any":[]}}}]},
{"label":"501([#1435])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"111\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"111\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"112\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"113\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"114\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"111\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"111\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"112\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"113\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"114\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":0,"clauses":[{"tag":"std/core/sslice/Sslice","target":500,"args":{"any":[3,4,5]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3963]","target":491,"args":{"any":[]}}}]},
{"label":"502([k@[mcore:[#1146]#1416]#1423])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x110\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"111\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x110\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"111\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":501,"args":{"any":[2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3964]","target":487,"args":{"any":[]}}}]},
{"label":"503([mcore:[#1146]#1416])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/find-last(basename@0, \".\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \".\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"."},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":502,"args":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \".\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/find-last(basename@0, \".\")","traced":{"any":[]}},
{"op":"Jump","target":476}]},
{"label":"504([mcore:[#1147]#1485])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/sslice/find-last"}]},
{"label":"505([mcore:[#1155]#1491])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/sslice/string"}]},
{"label":"506([mcore:[#1158]#1496])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"CallLib","lib":3,"symbol":"std/core/sslice/Sslice"}]},
{"label":"507([mcore:[#1164]#1503])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/sslice/string"}]},
{"label":"508([mcore:[#1166]#1508])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/sslice/after"}]},
{"label":"509([mcore:[#1170]#1513])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/sslice/starts-with"}]},
{"label":"510([mcore:[#1174]#1519])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/(++)"}]},
{"label":"511([mcore:[#1178]#1525])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/(++)"}]},
{"label":"512([mcore:[#1183]#1531])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/vector/vlist"}]},
{"label":"513([mcore:[#1196]#1537])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/sslice/starts-with"}]},
{"label":"514([mcore:[#1200]#1543])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/(++)"}]},
{"label":"515([mcore:[#1204]#1549])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/(++)"}]},
{"label":"516([mcore:[#1212]#1555])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/vector/vlist"}]},
{"label":"517([mcore:[#1225]#1561])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/sslice/starts-with"}]},
{"label":"518([mcore:[#1229]#1567])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/(++)"}]},
{"label":"519([mcore:[#1233]#1573])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/(++)"}]},
{"label":"520([mcore:[#1241]#1579])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/vector/vlist"}]},
{"label":"521([match_def@[#1596]#1597])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"522([k@[k@[k@[#1629]#1635]#1637]#1640])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"523([k@[k@[#1629]#1635]#1637])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Jump","target":1139}]},
{"label":"524([match_def@[k@[#1629]#1635]#1642])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"525([match_std/os/path/Path@[k@[#1629]#1635]#1643])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@6@0@0,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"131\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x@0@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"131\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@5@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"132\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@5@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"132\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@6@0@0,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"131\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x@0@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"131\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@5@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"132\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@5@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"132\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"526([k@[#1629]#1635])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/Path((match (p) {\n    ((@skip std/os/path/Path((@x@0@0@0: string) : string, (@pat@0@5@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@6@0@0: std/os/path/path)\n       -> @x@0@0@0;\n  }), parts@0)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (p) {\n  ((@skip std/os/path/Path((@x@0@0@0: string) : string, (@pat@0@5@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@6@0@0: std/os/path/path)\n     -> @x@0@0@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"131\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"132\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":523,"args":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"131\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"132\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p) {\n  ((@skip std/os/path/Path((@x@0@0@0: string) : string, (@pat@0@5@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@6@0@0: std/os/path/path)\n     -> @x@0@0@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/Path((match (p) {\n    ((@skip std/os/path/Path((@x@0@0@0: string) : string, (@pat@0@5@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@6@0@0: std/os/path/path)\n       -> @x@0@0@0;\n  }), parts@0)","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":1,"clauses":[{"tag":"std/os/path/Path","target":525,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3965]","target":524,"args":{"any":[]}}}]},
{"label":"527([#1629])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":526,"args":{"any":[1]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Copy","from":3,"to":2},
{"op":"Jump","target":195}]},
{"label":"528([#1644])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"529([k@[#1645]#1647])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"530([match_def@[match_def@[#1645]#1649]#1650])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"531([#1651])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@1@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"139\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"139\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@1@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"139\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"139\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"532([match_def@[#1645]#1649])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"139\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"139\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"139\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"139\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":531,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3966]","target":530,"args":{"any":[]}}}]},
{"label":"533([match_std/core/types/Cons@[#1645]#1656])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"139\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"139\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(@pat@0@1@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"140\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@1@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"140\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"141\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"141\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"139\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"139\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(@pat@0@1@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"140\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@1@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"140\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"141\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"141\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"534([#1645])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3@0@1,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@2@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"138\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@2@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"138\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"139\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"139\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@x@0@1) {\n  ((std/core/types/Cons((@pat@0@1@0@0: string) : string, (xx@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2@0@0: ((list :: V -> V)<string>))\n     -> xx@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1@0@0: ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"139\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"139\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"140\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"141\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"139\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"139\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"140\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"141\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@x@0@1) {\n  ((std/core/types/Cons((@pat@0@1@0@0: string) : string, (xx@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2@0@0: ((list :: V -> V)<string>))\n     -> xx@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1@0@0: ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3@0@1,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@2@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"138\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@2@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"138\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"139\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"139\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":533,"args":{"any":[1,2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3967]","target":532,"args":{"any":[]}}}]},
{"label":"535([k@[k@[k@[k@[#1605]#1607]#1609]#1615]#1626])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@2@0@0: string) : string, (@x@0@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3@0@1: std/os/path/path)\n     -> (match (@x@0@1) {\n      ((std/core/types/Cons((@pat@0@1@0@0: string) : string, (xx@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2@0@0: ((list :: V -> V)<string>))\n         -> xx@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1@0@0: ((list :: V -> V)<string>))\n         -> std/core/types/Nil<string>;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"138\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"139\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":527,"args":{"any":[1,0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"138\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"139\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@2@0@0: string) : string, (@x@0@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3@0@1: std/os/path/path)\n     -> (match (@x@0@1) {\n      ((std/core/types/Cons((@pat@0@1@0@0: string) : string, (xx@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2@0@0: ((list :: V -> V)<string>))\n         -> xx@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1@0@0: ((list :: V -> V)<string>))\n         -> std/core/types/Nil<string>;\n    });\n}","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":1,"clauses":[{"tag":"std/os/path/Path","target":534,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3968]","target":528,"args":{"any":[]}}}]},
{"label":"536([k@[k@[k@[#1605]#1607]#1609]#1615])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"v@10012@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/splitv(s@0@10114@0, \"/\")","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/string/splitv"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"parts@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/push-parts((std/core/vector/vlist<string>(v@10012@0, (std/core/types/@None<(list :: V -> V)<string>>))), (match (p) {\n    ((@skip std/os/path/Path((@pat@0@2@0@0: string) : string, (@x@0@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3@0@1: std/os/path/path)\n       -> (match (@x@0@1) {\n        ((std/core/types/Cons((@pat@0@1@0@0: string) : string, (xx@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2@0@0: ((list :: V -> V)<string>))\n           -> xx@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1@0@0: ((list :: V -> V)<string>))\n           -> std/core/types/Nil<string>;\n      });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/vector/vlist<string>(v@10012@0, (std/core/types/@None<(list :: V -> V)<string>>))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@None<(list :: V -> V)<string>>","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":535,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":3,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@None<(list :: V -> V)<string>>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/vector/vlist<string>(v@10012@0, (std/core/types/@None<(list :: V -> V)<string>>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/push-parts((std/core/vector/vlist<string>(v@10012@0, (std/core/types/@None<(list :: V -> V)<string>>))), (match (p) {\n    ((@skip std/os/path/Path((@pat@0@2@0@0: string) : string, (@x@0@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3@0@1: std/os/path/path)\n       -> (match (@x@0@1) {\n        ((std/core/types/Cons((@pat@0@1@0@0: string) : string, (xx@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2@0@0: ((list :: V -> V)<string>))\n           -> xx@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1@0@0: ((list :: V -> V)<string>))\n           -> std/core/types/Nil<string>;\n      });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"parts@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/splitv(s@0@10114@0, \"/\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"v@10012@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}}","traced":{"any":[]}},
{"op":"Jump","target":520}]},
{"label":"537([k@[k@[#1605]#1607]#1609])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":536,"args":{"any":[2]}},
{"op":"Copy","from":3,"to":2},
{"op":"Jump","target":519}]},
{"label":"538([match_def@[k@[#1605]#1607]#1657])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"539([#1660])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"540([match_def@[#1662]#1663])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"541([#1669])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"542([match_def@[#1671]#1672])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"543([match_std/core/types/Just@[#1671]#1673])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@1@1,{\"op\": \"Var\",\"id\": \"@x136\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"137\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"137\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@1@1,{\"op\": \"Var\",\"id\": \"@x136\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"137\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"137\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"544([#1671])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x136\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"137\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x136\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"137\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":543,"args":{"any":[0]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3969]","target":542,"args":{"any":[]}}}]},
{"label":"545([#1674])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4@0,{\"op\": \"Var\",\"id\": \"@x136\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4@0,{\"op\": \"Var\",\"id\": \"@x136\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"546([match_std/core/types/Nil@[#1662]#1664])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"133\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@1@1: ((maybe :: V -> V)<string>))\n     -> x@1;\n}","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x136\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x136\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@1@1: ((maybe :: V -> V)<string>))\n     -> x@1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"133\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Nothing","target":545,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3970]","target":544,"args":{"any":[]}}}]},
{"label":"547([#1662])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"133\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"133\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":546,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3971]","target":540,"args":{"any":[]}}}]},
{"label":"548([#1677])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"133\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"134\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"134\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"135\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"133\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"134\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"134\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"135\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"549([match_std/os/path/Path@[k@[#1605]#1607]#1658])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3@2,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@2@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"132\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@2@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"132\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"133\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@x@1) {\n  ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n     -> x@0@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@1@1: ((maybe :: V -> V)<string>))\n         -> x@1;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"133\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"134\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"133\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"134\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@x@1) {\n  ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n     -> x@0@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@1@1: ((maybe :: V -> V)<string>))\n         -> x@1;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3@2,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@2@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"132\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@2@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"132\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"133\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":548,"args":{"any":[1,2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3972]","target":547,"args":{"any":[]}}}]},
{"label":"550([k@[#1605]#1607])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"s@0@10114@0\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/(++)((match (p) {\n    ((@skip std/os/path/Path((@pat@0@2@1: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3@2: std/os/path/path)\n       -> (match (@x@1) {\n        ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n           -> x@0@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@1@1: ((maybe :: V -> V)<string>))\n               -> x@1;\n          });\n      });\n  }), newext@0)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@2@1: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3@2: std/os/path/path)\n     -> (match (@x@1) {\n      ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n         -> x@0@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n         -> (match ((std/core/types/Nothing<string>)) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n             -> \"\";\n          ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@1@1: ((maybe :: V -> V)<string>))\n             -> x@1;\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"132\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":537,"args":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"132\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@2@1: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3@2: std/os/path/path)\n     -> (match (@x@1) {\n      ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n         -> x@0@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n         -> (match ((std/core/types/Nothing<string>)) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n             -> \"\";\n          ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@1@1: ((maybe :: V -> V)<string>))\n             -> x@1;\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/(++)((match (p) {\n    ((@skip std/os/path/Path((@pat@0@2@1: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3@2: std/os/path/path)\n       -> (match (@x@1) {\n        ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n           -> x@0@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@1@1: ((maybe :: V -> V)<string>))\n               -> x@1;\n          });\n      });\n  }), newext@0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"s@0@10114@0\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":1,"clauses":[{"tag":"std/os/path/Path","target":549,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3973]","target":538,"args":{"any":[]}}}]},
{"label":"551([match_def@[match_def@[#1605]#1678]#1679])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"552([k@[#1680]#1687])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"553([#1680])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@3@0,{\"op\": \"Var\",\"id\": \"maybe@10070@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/(++)(\".\", extname@0)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \".\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"."},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \".\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/(++)(\".\", extname@0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@3@0,{\"op\": \"Var\",\"id\": \"maybe@10070@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Jump","target":518}]},
{"label":"554([match_def@[#1605]#1678])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"maybe@10070@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"maybe@10070@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":1,"clauses":[{"tag":"std/core/types/Nothing","target":553,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3974]","target":551,"args":{"any":[]}}}]},
{"label":"555([match_std/core/types/Just@[#1605]#1689])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5@0,{\"op\": \"Var\",\"id\": \"maybe@10070@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0@4@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"131\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@4@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"131\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5@0,{\"op\": \"Var\",\"id\": \"maybe@10070@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0@4@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"131\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@4@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"131\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"556([#1605])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"newext@0\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (maybe@10070@0) {\n  ((std/core/types/Just((@pat@0@4@0: sslice/sslice) : sslice/sslice) : (maybe :: V -> V)<sslice/sslice> ) as @pat@5@0: ((maybe :: V -> V)<sslice/sslice>))\n     -> extname@0;\n  ((@skip std/core/types/Nothing() : (maybe :: V -> V)<sslice/sslice> ) as @pat@1@3@0: ((maybe :: V -> V)<sslice/sslice>))\n     -> std/core/types/(++)(\".\", extname@0);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"maybe@10070@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"131\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":550,"args":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"maybe@10070@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"131\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (maybe@10070@0) {\n  ((std/core/types/Just((@pat@0@4@0: sslice/sslice) : sslice/sslice) : (maybe :: V -> V)<sslice/sslice> ) as @pat@5@0: ((maybe :: V -> V)<sslice/sslice>))\n     -> extname@0;\n  ((@skip std/core/types/Nothing() : (maybe :: V -> V)<sslice/sslice> ) as @pat@1@3@0: ((maybe :: V -> V)<sslice/sslice>))\n     -> std/core/types/(++)(\".\", extname@0);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"newext@0\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":1,"clauses":[{"tag":"std/core/types/Just","target":555,"args":{"any":[2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3975]","target":554,"args":{"any":[]}}}]},
{"label":"557([match_std/core/types/Nothing@[#1596]#1598])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3@0@0,{\"op\": \"Var\",\"id\": \"@x118\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val maybe@10070@0 : (maybe :: V -> V)<sslice/sslice>;\nval newext@0 : string;\nval s@0@10114@0 : string;\nval v@10012@0 : (vector :: V -> V)<string>;\nval parts@0 : (list :: V -> V)<string>;\nstd/os/path/Path((match (p) {\n    ((@skip std/os/path/Path((@x@0@0@0: string) : string, (@pat@0@5@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@6@0@0: std/os/path/path)\n       -> @x@0@0@0;\n  }), parts@0)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"maybe@10070@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/starts-with(extname@0, \".\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \".\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"."},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":556,"args":{"any":[0,1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":3,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \".\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/starts-with(extname@0, \".\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"maybe@10070@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val maybe@10070@0 : (maybe :: V -> V)<sslice/sslice>;\nval newext@0 : string;\nval s@0@10114@0 : string;\nval v@10012@0 : (vector :: V -> V)<string>;\nval parts@0 : (list :: V -> V)<string>;\nstd/os/path/Path((match (p) {\n    ((@skip std/os/path/Path((@x@0@0@0: string) : string, (@pat@0@5@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@6@0@0: std/os/path/path)\n       -> @x@0@0@0;\n  }), parts@0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3@0@0,{\"op\": \"Var\",\"id\": \"@x118\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Jump","target":517}]},
{"label":"558([#1596])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x118\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x118\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":2,"clauses":[{"tag":"std/core/types/Nothing","target":557,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3976]","target":521,"args":{"any":[]}}}]},
{"label":"559([match_def@[match_def@[#1690]#1691]#1692])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"560([k@[k@[k@[k@[#1721]#1724]#1730]#1732]#1735])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"561([k@[k@[k@[#1721]#1724]#1730]#1732])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Jump","target":1139}]},
{"label":"562([match_def@[k@[k@[#1721]#1724]#1730]#1737])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"563([#1738])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@6@0@0,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"131\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x@0@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"131\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@5@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"132\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@5@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"132\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@6@0@0,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"131\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x@0@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"131\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@5@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"132\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@5@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"132\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"564([k@[k@[#1721]#1724]#1730])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/Path((match (p) {\n    ((@skip std/os/path/Path((@x@0@0@0: string) : string, (@pat@0@5@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@6@0@0: std/os/path/path)\n       -> @x@0@0@0;\n  }), parts@0)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (p) {\n  ((@skip std/os/path/Path((@x@0@0@0: string) : string, (@pat@0@5@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@6@0@0: std/os/path/path)\n     -> @x@0@0@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"131\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"132\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":561,"args":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"131\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"132\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p) {\n  ((@skip std/os/path/Path((@x@0@0@0: string) : string, (@pat@0@5@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@6@0@0: std/os/path/path)\n     -> @x@0@0@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/Path((match (p) {\n    ((@skip std/os/path/Path((@x@0@0@0: string) : string, (@pat@0@5@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@6@0@0: std/os/path/path)\n       -> @x@0@0@0;\n  }), parts@0)","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":1,"clauses":[{"tag":"std/os/path/Path","target":563,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3977]","target":562,"args":{"any":[]}}}]},
{"label":"565([k@[#1721]#1724])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":564,"args":{"any":[1]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Copy","from":3,"to":2},
{"op":"Jump","target":195}]},
{"label":"566([match_def@[#1721]#1739])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"567([k@[match_std/os/path/Path@[#1721]#1740]#1742])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"568([match_def@[#1744]#1745])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"569([match_std/core/types/Nil@[#1744]#1746])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@1@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"139\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"139\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@1@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"139\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"139\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"570([#1744])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"139\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"139\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"139\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"139\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":569,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3978]","target":568,"args":{"any":[]}}}]},
{"label":"571([#1751])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"139\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"139\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(@pat@0@1@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"140\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@1@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"140\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"141\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"141\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"139\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"139\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(@pat@0@1@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"140\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@1@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"140\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"141\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"141\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"572([match_std/os/path/Path@[#1721]#1740])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3@0@1,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@2@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"138\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@2@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"138\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"139\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"139\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@x@0@1) {\n  ((std/core/types/Cons((@pat@0@1@0@0: string) : string, (xx@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2@0@0: ((list :: V -> V)<string>))\n     -> xx@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1@0@0: ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"139\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"139\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"140\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"141\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"139\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"139\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"140\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"141\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@x@0@1) {\n  ((std/core/types/Cons((@pat@0@1@0@0: string) : string, (xx@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2@0@0: ((list :: V -> V)<string>))\n     -> xx@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1@0@0: ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3@0@1,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@2@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"138\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@2@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"138\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"139\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"139\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":571,"args":{"any":[1,2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3979]","target":570,"args":{"any":[]}}}]},
{"label":"573([#1721])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@2@0@0: string) : string, (@x@0@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3@0@1: std/os/path/path)\n     -> (match (@x@0@1) {\n      ((std/core/types/Cons((@pat@0@1@0@0: string) : string, (xx@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2@0@0: ((list :: V -> V)<string>))\n         -> xx@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1@0@0: ((list :: V -> V)<string>))\n         -> std/core/types/Nil<string>;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"138\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"139\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":565,"args":{"any":[1,0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"138\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"139\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@2@0@0: string) : string, (@x@0@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3@0@1: std/os/path/path)\n     -> (match (@x@0@1) {\n      ((std/core/types/Cons((@pat@0@1@0@0: string) : string, (xx@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2@0@0: ((list :: V -> V)<string>))\n         -> xx@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1@0@0: ((list :: V -> V)<string>))\n         -> std/core/types/Nil<string>;\n    });\n}","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":1,"clauses":[{"tag":"std/os/path/Path","target":572,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3980]","target":566,"args":{"any":[]}}}]},
{"label":"574([k@[k@[k@[k@[#1693]#1700]#1702]#1704]#1710])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"v@10012@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/splitv(s@0@10114@0, \"/\")","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/string/splitv"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"parts@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/push-parts((std/core/vector/vlist<string>(v@10012@0, (std/core/types/@None<(list :: V -> V)<string>>))), (match (p) {\n    ((@skip std/os/path/Path((@pat@0@2@0@0: string) : string, (@x@0@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3@0@1: std/os/path/path)\n       -> (match (@x@0@1) {\n        ((std/core/types/Cons((@pat@0@1@0@0: string) : string, (xx@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2@0@0: ((list :: V -> V)<string>))\n           -> xx@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1@0@0: ((list :: V -> V)<string>))\n           -> std/core/types/Nil<string>;\n      });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/vector/vlist<string>(v@10012@0, (std/core/types/@None<(list :: V -> V)<string>>))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@None<(list :: V -> V)<string>>","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":573,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":3,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@None<(list :: V -> V)<string>>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/vector/vlist<string>(v@10012@0, (std/core/types/@None<(list :: V -> V)<string>>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/push-parts((std/core/vector/vlist<string>(v@10012@0, (std/core/types/@None<(list :: V -> V)<string>>))), (match (p) {\n    ((@skip std/os/path/Path((@pat@0@2@0@0: string) : string, (@x@0@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3@0@1: std/os/path/path)\n       -> (match (@x@0@1) {\n        ((std/core/types/Cons((@pat@0@1@0@0: string) : string, (xx@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2@0@0: ((list :: V -> V)<string>))\n           -> xx@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1@0@0: ((list :: V -> V)<string>))\n           -> std/core/types/Nil<string>;\n      });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"parts@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/splitv(s@0@10114@0, \"/\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"v@10012@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}}","traced":{"any":[]}},
{"op":"Jump","target":516}]},
{"label":"575([k@[k@[k@[#1693]#1700]#1702]#1704])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":574,"args":{"any":[2]}},
{"op":"Copy","from":3,"to":2},
{"op":"Jump","target":515}]},
{"label":"576([match_def@[k@[k@[#1693]#1700]#1702]#1752])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"577([k@[#1753]#1755])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"578([match_def@[match_def@[#1753]#1757]#1758])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"579([k@[#1759]#1764])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"580([match_def@[match_def@[#1759]#1766]#1767])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"581([#1768])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@1@1,{\"op\": \"Var\",\"id\": \"@x136\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"137\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"137\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@1@1,{\"op\": \"Var\",\"id\": \"@x136\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"137\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"137\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"582([match_def@[#1759]#1766])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x136\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"137\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x136\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"137\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":581,"args":{"any":[0]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3981]","target":580,"args":{"any":[]}}}]},
{"label":"583([match_std/core/types/Nothing@[#1759]#1769])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4@0,{\"op\": \"Var\",\"id\": \"@x136\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4@0,{\"op\": \"Var\",\"id\": \"@x136\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"584([#1759])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"133\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@1@1: ((maybe :: V -> V)<string>))\n     -> x@1;\n}","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x136\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x136\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@1@1: ((maybe :: V -> V)<string>))\n     -> x@1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"133\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Nothing","target":583,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3982]","target":582,"args":{"any":[]}}}]},
{"label":"585([match_def@[#1753]#1757])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"133\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"133\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":584,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3983]","target":578,"args":{"any":[]}}}]},
{"label":"586([match_std/core/types/Cons@[#1753]#1772])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"133\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"134\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"134\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"135\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"133\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"134\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"134\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"135\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"587([#1753])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3@2,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@2@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"132\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@2@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"132\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"133\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@x@1) {\n  ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n     -> x@0@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@1@1: ((maybe :: V -> V)<string>))\n         -> x@1;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"133\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"134\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"133\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"134\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@x@1) {\n  ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n     -> x@0@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@1@1: ((maybe :: V -> V)<string>))\n         -> x@1;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3@2,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@2@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"132\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@2@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"132\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"133\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":586,"args":{"any":[1,2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3984]","target":585,"args":{"any":[]}}}]},
{"label":"588([k@[k@[#1693]#1700]#1702])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"s@0@10114@0\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/(++)((match (p) {\n    ((@skip std/os/path/Path((@pat@0@2@1: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3@2: std/os/path/path)\n       -> (match (@x@1) {\n        ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n           -> x@0@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@1@1: ((maybe :: V -> V)<string>))\n               -> x@1;\n          });\n      });\n  }), newext@0)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@2@1: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3@2: std/os/path/path)\n     -> (match (@x@1) {\n      ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n         -> x@0@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n         -> (match ((std/core/types/Nothing<string>)) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n             -> \"\";\n          ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@1@1: ((maybe :: V -> V)<string>))\n             -> x@1;\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"132\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":575,"args":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"132\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@2@1: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3@2: std/os/path/path)\n     -> (match (@x@1) {\n      ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n         -> x@0@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n         -> (match ((std/core/types/Nothing<string>)) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n             -> \"\";\n          ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@1@1: ((maybe :: V -> V)<string>))\n             -> x@1;\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/(++)((match (p) {\n    ((@skip std/os/path/Path((@pat@0@2@1: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3@2: std/os/path/path)\n       -> (match (@x@1) {\n        ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n           -> x@0@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@1@1: ((maybe :: V -> V)<string>))\n               -> x@1;\n          });\n      });\n  }), newext@0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"s@0@10114@0\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":1,"clauses":[{"tag":"std/os/path/Path","target":587,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3985]","target":576,"args":{"any":[]}}}]},
{"label":"589([#1774])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"590([k@[#1775]#1782])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"591([#1775])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@3@0,{\"op\": \"Var\",\"id\": \"maybe@10070@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/(++)(\".\", extname@0)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \".\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"."},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \".\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/(++)(\".\", extname@0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@3@0,{\"op\": \"Var\",\"id\": \"maybe@10070@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Jump","target":514}]},
{"label":"592([match_def@[k@[#1693]#1700]#1773])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"maybe@10070@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"maybe@10070@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":1,"clauses":[{"tag":"std/core/types/Nothing","target":591,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3986]","target":589,"args":{"any":[]}}}]},
{"label":"593([#1784])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5@0,{\"op\": \"Var\",\"id\": \"maybe@10070@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0@4@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"131\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@4@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"131\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5@0,{\"op\": \"Var\",\"id\": \"maybe@10070@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0@4@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"131\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@4@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"131\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"594([k@[#1693]#1700])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"newext@0\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (maybe@10070@0) {\n  ((std/core/types/Just((@pat@0@4@0: sslice/sslice) : sslice/sslice) : (maybe :: V -> V)<sslice/sslice> ) as @pat@5@0: ((maybe :: V -> V)<sslice/sslice>))\n     -> extname@0;\n  ((@skip std/core/types/Nothing() : (maybe :: V -> V)<sslice/sslice> ) as @pat@1@3@0: ((maybe :: V -> V)<sslice/sslice>))\n     -> std/core/types/(++)(\".\", extname@0);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"maybe@10070@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"131\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":588,"args":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"maybe@10070@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"131\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (maybe@10070@0) {\n  ((std/core/types/Just((@pat@0@4@0: sslice/sslice) : sslice/sslice) : (maybe :: V -> V)<sslice/sslice> ) as @pat@5@0: ((maybe :: V -> V)<sslice/sslice>))\n     -> extname@0;\n  ((@skip std/core/types/Nothing() : (maybe :: V -> V)<sslice/sslice> ) as @pat@1@3@0: ((maybe :: V -> V)<sslice/sslice>))\n     -> std/core/types/(++)(\".\", extname@0);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"newext@0\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":1,"clauses":[{"tag":"std/core/types/Just","target":593,"args":{"any":[2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3987]","target":592,"args":{"any":[]}}}]},
{"label":"595([#1693])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3@0@0,{\"op\": \"Var\",\"id\": \"@x118\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val maybe@10070@0 : (maybe :: V -> V)<sslice/sslice>;\nval newext@0 : string;\nval s@0@10114@0 : string;\nval v@10012@0 : (vector :: V -> V)<string>;\nval parts@0 : (list :: V -> V)<string>;\nstd/os/path/Path((match (p) {\n    ((@skip std/os/path/Path((@x@0@0@0: string) : string, (@pat@0@5@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@6@0@0: std/os/path/path)\n       -> @x@0@0@0;\n  }), parts@0)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"maybe@10070@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/starts-with(extname@0, \".\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \".\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"."},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":594,"args":{"any":[0,1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":3,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \".\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/starts-with(extname@0, \".\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"maybe@10070@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val maybe@10070@0 : (maybe :: V -> V)<sslice/sslice>;\nval newext@0 : string;\nval s@0@10114@0 : string;\nval v@10012@0 : (vector :: V -> V)<string>;\nval parts@0 : (list :: V -> V)<string>;\nstd/os/path/Path((match (p) {\n    ((@skip std/os/path/Path((@x@0@0@0: string) : string, (@pat@0@5@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@6@0@0: std/os/path/path)\n       -> @x@0@0@0;\n  }), parts@0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3@0@0,{\"op\": \"Var\",\"id\": \"@x118\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Jump","target":513}]},
{"label":"596([match_def@[#1690]#1691])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x118\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Copy","from":1,"to":2},
{"op":"Copy","from":3,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x118\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":2,"clauses":[{"tag":"std/core/types/Nothing","target":595,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3988]","target":559,"args":{"any":[]}}}]},
{"label":"597([k@[#1840]#1843])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"598([#1840])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Jump","target":1139}]},
{"label":"599([#1845])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"600([#1846])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@6@0,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"129\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"129\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@5@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"130\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@5@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"130\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@6@0,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"129\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"129\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@5@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"130\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@5@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"130\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"601([k@[k@[k@[k@[#1813]#1818]#1829]#1832]#1838])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/Path((match (p) {\n    ((@skip std/os/path/Path((@x@0@0: string) : string, (@pat@0@5@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@6@0: std/os/path/path)\n       -> @x@0@0;\n  }), parts)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (p) {\n  ((@skip std/os/path/Path((@x@0@0: string) : string, (@pat@0@5@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@6@0: std/os/path/path)\n     -> @x@0@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"129\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"130\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":598,"args":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"129\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"130\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p) {\n  ((@skip std/os/path/Path((@x@0@0: string) : string, (@pat@0@5@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@6@0: std/os/path/path)\n     -> @x@0@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/Path((match (p) {\n    ((@skip std/os/path/Path((@x@0@0: string) : string, (@pat@0@5@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@6@0: std/os/path/path)\n       -> @x@0@0;\n  }), parts)","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":1,"clauses":[{"tag":"std/os/path/Path","target":600,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3989]","target":599,"args":{"any":[]}}}]},
{"label":"602([k@[k@[k@[#1813]#1818]#1829]#1832])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":601,"args":{"any":[1]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Copy","from":3,"to":2},
{"op":"Jump","target":195}]},
{"label":"603([match_def@[k@[k@[#1813]#1818]#1829]#1847])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"604([k@[#1848]#1850])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"605([match_def@[match_def@[#1848]#1852]#1853])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"606([#1854])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"134\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"134\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"134\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"134\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"607([match_def@[#1848]#1852])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"134\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"134\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"134\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"134\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":606,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3990]","target":605,"args":{"any":[]}}}]},
{"label":"608([match_std/core/types/Cons@[#1848]#1859])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"134\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"134\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(@pat@0@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"135\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"135\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"136\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"136\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"134\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"134\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(@pat@0@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"135\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"135\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"136\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"136\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"609([#1848])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3@1,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"133\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@2@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"133\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"134\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"134\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@x@0) {\n  ((std/core/types/Cons((@pat@0@1@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2@0: ((list :: V -> V)<string>))\n     -> xx;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1@0: ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"134\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"134\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"135\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"136\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"134\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"134\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"135\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"136\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@x@0) {\n  ((std/core/types/Cons((@pat@0@1@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2@0: ((list :: V -> V)<string>))\n     -> xx;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1@0: ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3@1,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"133\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@2@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"133\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"134\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"134\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":608,"args":{"any":[1,2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3991]","target":607,"args":{"any":[]}}}]},
{"label":"610([k@[k@[#1813]#1818]#1829])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@2@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3@1: std/os/path/path)\n     -> (match (@x@0) {\n      ((std/core/types/Cons((@pat@0@1@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2@0: ((list :: V -> V)<string>))\n         -> xx;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1@0: ((list :: V -> V)<string>))\n         -> std/core/types/Nil<string>;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"133\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"134\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":602,"args":{"any":[1,0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"133\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"134\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@2@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3@1: std/os/path/path)\n     -> (match (@x@0) {\n      ((std/core/types/Cons((@pat@0@1@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2@0: ((list :: V -> V)<string>))\n         -> xx;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1@0: ((list :: V -> V)<string>))\n         -> std/core/types/Nil<string>;\n    });\n}","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":1,"clauses":[{"tag":"std/os/path/Path","target":609,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3992]","target":603,"args":{"any":[]}}}]},
{"label":"611([k@[#1813]#1818])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"v@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/splitv(s@0@10114, \"/\")","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/string/splitv"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/push-parts((std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>))), (match (p) {\n    ((@skip std/os/path/Path((@pat@0@2@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3@1: std/os/path/path)\n       -> (match (@x@0) {\n        ((std/core/types/Cons((@pat@0@1@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2@0: ((list :: V -> V)<string>))\n           -> xx;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1@0: ((list :: V -> V)<string>))\n           -> std/core/types/Nil<string>;\n      });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@None<(list :: V -> V)<string>>","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":610,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":3,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@None<(list :: V -> V)<string>>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/push-parts((std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>))), (match (p) {\n    ((@skip std/os/path/Path((@pat@0@2@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3@1: std/os/path/path)\n       -> (match (@x@0) {\n        ((std/core/types/Cons((@pat@0@1@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2@0: ((list :: V -> V)<string>))\n           -> xx;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1@0: ((list :: V -> V)<string>))\n           -> std/core/types/Nil<string>;\n      });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/splitv(s@0@10114, \"/\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"v@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}}","traced":{"any":[]}},
{"op":"Jump","target":512}]},
{"label":"612([#1813])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"s@0@10114\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/(++)(stemname@0, newext)","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":611,"args":{"any":[1]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Copy","from":3,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/(++)(stemname@0, newext)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"s@0@10114\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Jump","target":511}]},
{"label":"613([match_def@[#1860]#1861])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"614([#1869])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"615([match_std/core/types/Nothing@[#1860]#1862])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@3,{\"op\": \"Var\",\"id\": \"maybe@10070\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/(++)(\".\", extname@0)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \".\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"."},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \".\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/(++)(\".\", extname@0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@3,{\"op\": \"Var\",\"id\": \"maybe@10070\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Jump","target":510}]},
{"label":"616([#1860])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"maybe@10070\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"maybe@10070\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":1,"clauses":[{"tag":"std/core/types/Nothing","target":615,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3993]","target":613,"args":{"any":[]}}}]},
{"label":"617([#1871])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"maybe@10070\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"132\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@4: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"132\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"maybe@10070\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"132\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@4: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"132\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"618([k@[k@[k@[k@[#1787]#1793]#1798]#1804]#1811])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"newext\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (maybe@10070) {\n  ((std/core/types/Just((@pat@0@4: sslice/sslice) : sslice/sslice) : (maybe :: V -> V)<sslice/sslice> ) as @pat@5: ((maybe :: V -> V)<sslice/sslice>))\n     -> extname@0;\n  ((@skip std/core/types/Nothing() : (maybe :: V -> V)<sslice/sslice> ) as @pat@1@3: ((maybe :: V -> V)<sslice/sslice>))\n     -> std/core/types/(++)(\".\", extname@0);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"maybe@10070\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"132\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":612,"args":{"any":[2,3]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"maybe@10070\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"132\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (maybe@10070) {\n  ((std/core/types/Just((@pat@0@4: sslice/sslice) : sslice/sslice) : (maybe :: V -> V)<sslice/sslice> ) as @pat@5: ((maybe :: V -> V)<sslice/sslice>))\n     -> extname@0;\n  ((@skip std/core/types/Nothing() : (maybe :: V -> V)<sslice/sslice> ) as @pat@1@3: ((maybe :: V -> V)<sslice/sslice>))\n     -> std/core/types/(++)(\".\", extname@0);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"newext\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":1,"clauses":[{"tag":"std/core/types/Just","target":617,"args":{"any":[2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3994]","target":616,"args":{"any":[]}}}]},
{"label":"619([k@[k@[k@[#1787]#1793]#1798]#1804])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"maybe@10070\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/starts-with(extname@0, \".\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \".\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"."},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":618,"args":{"any":[1,2,3]}},
{"op":"Copy","from":4,"to":2},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \".\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/starts-with(extname@0, \".\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"maybe@10070\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}","traced":{"any":[]}},
{"op":"Jump","target":509}]},
{"label":"620([k@[k@[#1787]#1793]#1798])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":619,"args":{"any":[1,2,3]}},
{"op":"Copy","from":4,"to":1},
{"op":"Jump","target":507}]},
{"label":"621([k@[#1787]#1793])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@pat@1@2\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/string((std/core/sslice/after(slice)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/after(slice)","traced":{"any":[]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":620,"args":{"any":[2,3,0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":4,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/after(slice)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/string((std/core/sslice/after(slice)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@pat@1@2\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Jump","target":508}]},
{"label":"622([#1787])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":621,"args":{"any":[1,2,3]}},
{"op":"Copy","from":4,"to":1},
{"op":"Jump","target":505}]},
{"label":"623([#1872])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"624([k@[#1873]#1880])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"625([#1873])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"125\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"125\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(s,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"129\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"129\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"130\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"130\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"131\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"131\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/Sslice(s, 0, start)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/Sslice(s, 0, start)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"125\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"125\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(s,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"129\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"129\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"130\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"130\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"131\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"131\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":506}]},
{"label":"626([match_std/core/sslice/Sslice@[#1690]#1785])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x118\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(slice,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"125\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"125\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"126\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"126\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"127\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"127\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"128\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"128\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val stemname@0 : string;\nval @pat@1@2 : string;\nval maybe@10070 : (maybe :: V -> V)<sslice/sslice>;\nval newext : string;\nval s@0@10114 : string;\nval v@10012 : (vector :: V -> V)<string>;\nval parts : (list :: V -> V)<string>;\nstd/os/path/Path((match (p) {\n    ((@skip std/os/path/Path((@x@0@0: string) : string, (@pat@0@5@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@6@0: std/os/path/path)\n       -> @x@0@0;\n  }), parts)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"stemname@0\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/string((match (slice) {\n  ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3@0: sslice/sslice)\n     -> std/core/sslice/Sslice(s, 0, start);\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (slice) {\n  ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3@0: sslice/sslice)\n     -> std/core/sslice/Sslice(s, 0, start);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"125\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"125\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"129\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"130\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"131\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Push","target":622,"args":{"any":[0,2,3]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"125\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"125\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"129\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"130\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"131\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (slice) {\n  ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3@0: sslice/sslice)\n     -> std/core/sslice/Sslice(s, 0, start);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/string((match (slice) {\n  ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3@0: sslice/sslice)\n     -> std/core/sslice/Sslice(s, 0, start);\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"stemname@0\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val stemname@0 : string;\nval @pat@1@2 : string;\nval maybe@10070 : (maybe :: V -> V)<sslice/sslice>;\nval newext : string;\nval s@0@10114 : string;\nval v@10012 : (vector :: V -> V)<string>;\nval parts : (list :: V -> V)<string>;\nstd/os/path/Path((match (p) {\n    ((@skip std/os/path/Path((@x@0@0: string) : string, (@pat@0@5@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@6@0: std/os/path/path)\n       -> @x@0@0;\n  }), parts)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x118\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(slice,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"125\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"125\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"126\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"126\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"127\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"127\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"128\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"128\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":0,"clauses":[{"tag":"std/core/sslice/Sslice","target":625,"args":{"any":[0,1,2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3995]","target":623,"args":{"any":[]}}}]},
{"label":"627([#1690])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"125\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"125\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"126\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"127\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"128\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"125\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"125\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"126\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"127\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"128\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":0,"clauses":[{"tag":"std/core/sslice/Sslice","target":626,"args":{"any":[4,5,6]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3996]","target":596,"args":{"any":[]}}}]},
{"label":"628([k@[k@[mcore:[#1254]#1585]#1587]#1595])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x118\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"125\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x118\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"125\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":627,"args":{"any":[3]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3997]","target":558,"args":{"any":[]}}}]},
{"label":"629([k@[mcore:[#1254]#1585]#1587])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: \".\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"."},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":628,"args":{"any":[1,2]}},
{"op":"Copy","from":4,"to":2},
{"op":"Copy","from":3,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \".\"","traced":{"any":[]}},
{"op":"Jump","target":504}]},
{"label":"630([match_def@[mcore:[#1254]#1585]#1882])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"631([k@[#1883]#1885])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"632([match_def@[match_def@[#1883]#1887]#1888])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"633([k@[#1889]#1894])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"634([match_def@[match_def@[#1889]#1896]#1897])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"635([#1898])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"@x123\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"124\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"124\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"@x123\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"124\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"124\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"636([match_def@[#1889]#1896])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x123\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"124\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x123\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"124\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":635,"args":{"any":[0]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3998]","target":634,"args":{"any":[]}}}]},
{"label":"637([match_std/core/types/Nothing@[#1889]#1899])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"@x123\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"@x123\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"638([#1889])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"120\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"120\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@1: ((maybe :: V -> V)<string>))\n     -> x;\n}","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x123\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x123\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@1: ((maybe :: V -> V)<string>))\n     -> x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"120\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"120\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Nothing","target":637,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#3999]","target":636,"args":{"any":[]}}}]},
{"label":"639([match_def@[#1883]#1887])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"120\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"120\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"120\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"120\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":638,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4000]","target":632,"args":{"any":[]}}}]},
{"label":"640([match_std/core/types/Cons@[#1883]#1902])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"120\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"120\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"121\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"121\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"122\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"122\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"120\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"120\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"121\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"121\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"122\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"122\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"641([#1883])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"119\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"119\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"120\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"120\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@x) {\n  ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n     -> x@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@1: ((maybe :: V -> V)<string>))\n         -> x;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"120\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"120\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"121\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"122\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"120\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"120\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"121\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"122\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@x) {\n  ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n     -> x@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@1: ((maybe :: V -> V)<string>))\n         -> x;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"119\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"119\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"120\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"120\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":640,"args":{"any":[1,2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4001]","target":639,"args":{"any":[]}}}]},
{"label":"642([mcore:[#1254]#1585])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/find-last((match (p) {\n    ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n       -> (match (@x) {\n        ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n           -> x@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@1: ((maybe :: V -> V)<string>))\n               -> x;\n          });\n      });\n  }), \".\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n     -> (match (@x) {\n      ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n         -> x@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n         -> (match ((std/core/types/Nothing<string>)) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n             -> \"\";\n          ((@skip std/core/types/Just((x: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@1: ((maybe :: V -> V)<string>))\n             -> x;\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"119\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"120\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":629,"args":{"any":[1,0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"119\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"120\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n     -> (match (@x) {\n      ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n         -> x@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n         -> (match ((std/core/types/Nothing<string>)) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n             -> \"\";\n          ((@skip std/core/types/Just((x: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@1: ((maybe :: V -> V)<string>))\n             -> x;\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/find-last((match (p) {\n    ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n       -> (match (@x) {\n        ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n           -> x@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@1: ((maybe :: V -> V)<string>))\n               -> x;\n          });\n      });\n  }), \".\")","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":0,"clauses":[{"tag":"std/os/path/Path","target":641,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4002]","target":630,"args":{"any":[]}}}]},
{"label":"643([mcore:[#1255]#1903])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/sslice/find-last"}]},
{"label":"644([mcore:[#1263]#1909])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"645([mcore:[#1265]#1915])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/sslice/string"}]},
{"label":"646([mcore:[#1268]#1920])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"CallLib","lib":3,"symbol":"std/core/sslice/Sslice"}]},
{"label":"647([mcore:[#1275]#1927])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/sslice/string"}]},
{"label":"648([mcore:[#1277]#1932])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/sslice/after"}]},
{"label":"649([mcore:[#1282]#1937])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"650([mcore:[#1289]#1943])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"651([match_def@[#1961]#1962])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"652([match_std/core/types/Tuple2@[#1961]#1963])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"tuple2@10072\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@pat@0@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"133\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@4: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"133\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"134\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"134\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"tuple2@10072\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@pat@0@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"133\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@4: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"133\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"134\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"134\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"653([#1961])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"tuple2@10072\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"133\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"134\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"tuple2@10072\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"133\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"134\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":0,"clauses":[{"tag":"std/core/types/Tuple2","target":652,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4003]","target":651,"args":{"any":[]}}}]},
{"label":"654([match_def@[#1964]#1965])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"655([k@[#1968]#1976])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"656([#1968])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":""},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Jump","target":650}]},
{"label":"657([#1978])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"658([k@[#1979]#1981])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"659([match_def@[match_def@[#1979]#1983]#1984])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"660([k@[#1985]#1990])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"661([match_def@[match_def@[#1985]#1992]#1993])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"662([#1994])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@3@0,{\"op\": \"Var\",\"id\": \"@x151\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"152\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"152\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@3@0,{\"op\": \"Var\",\"id\": \"@x151\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"152\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"152\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"663([match_def@[#1985]#1992])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x151\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"152\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x151\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"152\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":662,"args":{"any":[0]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4004]","target":661,"args":{"any":[]}}}]},
{"label":"664([match_std/core/types/Nothing@[#1985]#1995])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4@0,{\"op\": \"Var\",\"id\": \"@x151\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4@0,{\"op\": \"Var\",\"id\": \"@x151\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"665([#1985])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"148\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n     -> x@1@0;\n}","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x151\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x151\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n     -> x@1@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"148\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Nothing","target":664,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4005]","target":663,"args":{"any":[]}}}]},
{"label":"666([match_def@[#1979]#1983])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"148\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"148\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":665,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4006]","target":659,"args":{"any":[]}}}]},
{"label":"667([match_std/core/types/Cons@[#1979]#1998])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"148\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"149\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"149\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"150\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"148\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"149\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"149\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"150\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"668([#1979])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0@0,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"147\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"147\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"148\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@x@0) {\n  ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n     -> x@0@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n         -> x@1@0;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"148\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"149\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"148\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"149\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@x@0) {\n  ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n     -> x@0@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n         -> x@1@0;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0@0,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"147\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"147\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"148\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":667,"args":{"any":[1,2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4007]","target":666,"args":{"any":[]}}}]},
{"label":"669([match_std/core/types/Nothing@[#1964]#1966])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"@x133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<string,string>((match (p) {\n    ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n       -> (match (@x@0) {\n        ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n           -> x@0@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n               -> x@1@0;\n          });\n      });\n  }), \"\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n     -> (match (@x@0) {\n      ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n         -> x@0@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n         -> (match ((std/core/types/Nothing<string>)) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n             -> \"\";\n          ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n             -> x@1@0;\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"147\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"148\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":656,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"147\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"148\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n     -> (match (@x@0) {\n      ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n         -> x@0@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n         -> (match ((std/core/types/Nothing<string>)) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n             -> \"\";\n          ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n             -> x@1@0;\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<string,string>((match (p) {\n    ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n       -> (match (@x@0) {\n        ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n           -> x@0@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n               -> x@1@0;\n          });\n      });\n  }), \"\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"@x133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":0,"clauses":[{"tag":"std/os/path/Path","target":668,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4008]","target":657,"args":{"any":[]}}}]},
{"label":"670([#1964])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":1,"clauses":[{"tag":"std/core/types/Nothing","target":669,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4009]","target":654,"args":{"any":[]}}}]},
{"label":"671([match_def@[match_def@[#1999]#2000]#2001])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"672([k@[k@[#2002]#2004]#2012])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"673([k@[#2002]#2004])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":""},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Jump","target":649}]},
{"label":"674([match_def@[#2002]#2014])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"675([k@[match_std/os/path/Path@[#2002]#2015]#2017])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"676([match_def@[#2019]#2020])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"677([#2026])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"678([match_def@[#2028]#2029])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"679([match_std/core/types/Just@[#2028]#2030])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@3@0,{\"op\": \"Var\",\"id\": \"@x151\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"152\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"152\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@3@0,{\"op\": \"Var\",\"id\": \"@x151\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"152\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"152\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"680([#2028])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x151\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"152\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x151\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"152\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":679,"args":{"any":[0]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4010]","target":678,"args":{"any":[]}}}]},
{"label":"681([#2031])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4@0,{\"op\": \"Var\",\"id\": \"@x151\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4@0,{\"op\": \"Var\",\"id\": \"@x151\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"682([match_std/core/types/Nil@[#2019]#2021])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"148\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n     -> x@1@0;\n}","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x151\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x151\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n     -> x@1@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"148\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Nothing","target":681,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4011]","target":680,"args":{"any":[]}}}]},
{"label":"683([#2019])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"148\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"148\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":682,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4012]","target":676,"args":{"any":[]}}}]},
{"label":"684([#2034])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"148\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"149\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"149\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"150\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"148\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"149\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"149\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"150\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"685([match_std/os/path/Path@[#2002]#2015])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0@0,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"147\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"147\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"148\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@x@0) {\n  ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n     -> x@0@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n         -> x@1@0;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"148\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"149\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"148\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"149\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@x@0) {\n  ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n     -> x@0@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n         -> x@1@0;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0@0,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"147\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"147\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"148\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":684,"args":{"any":[1,2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4013]","target":683,"args":{"any":[]}}}]},
{"label":"686([#2002])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"@x133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<string,string>((match (p) {\n    ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n       -> (match (@x@0) {\n        ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n           -> x@0@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n               -> x@1@0;\n          });\n      });\n  }), \"\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n     -> (match (@x@0) {\n      ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n         -> x@0@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n         -> (match ((std/core/types/Nothing<string>)) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n             -> \"\";\n          ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n             -> x@1@0;\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"147\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"148\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":673,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"147\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"148\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n     -> (match (@x@0) {\n      ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n         -> x@0@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n         -> (match ((std/core/types/Nothing<string>)) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n             -> \"\";\n          ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n             -> x@1@0;\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<string,string>((match (p) {\n    ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n       -> (match (@x@0) {\n        ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n           -> x@0@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n               -> x@1@0;\n          });\n      });\n  }), \"\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"@x133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":0,"clauses":[{"tag":"std/os/path/Path","target":685,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4014]","target":674,"args":{"any":[]}}}]},
{"label":"687([match_def@[#1999]#2000])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":1,"clauses":[{"tag":"std/core/types/Nothing","target":686,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4015]","target":671,"args":{"any":[]}}}]},
{"label":"688([k@[k@[k@[k@[#2037]#2043]#2049]#2055]#2061])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"689([k@[k@[k@[#2037]#2043]#2049]#2055])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":644}]},
{"label":"690([k@[k@[#2037]#2043]#2049])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":689,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Jump","target":647}]},
{"label":"691([k@[#2037]#2043])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/string((std/core/sslice/after(slice)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/after(slice)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":690,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":2,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/after(slice)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/string((std/core/sslice/after(slice)))","traced":{"any":[]}},
{"op":"Jump","target":648}]},
{"label":"692([#2037])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":691,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Jump","target":645}]},
{"label":"693([#2063])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"694([k@[#2064]#2071])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"695([#2064])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"140\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"140\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(s,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"144\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"144\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"145\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"145\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"146\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"146\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/Sslice(s, 0, start)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/Sslice(s, 0, start)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"140\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"140\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(s,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"144\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"144\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"145\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"145\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"146\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"146\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":646}]},
{"label":"696([match_std/core/sslice/Sslice@[#1999]#2035])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(slice,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"140\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"140\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"141\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"141\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"142\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"142\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"143\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"143\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<string,string>((std/core/sslice/string((match (slice) {\n    ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n       -> std/core/sslice/Sslice(s, 0, start);\n  }))), (std/core/sslice/string((std/core/sslice/after(slice)))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/string((match (slice) {\n  ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n     -> std/core/sslice/Sslice(s, 0, start);\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (slice) {\n  ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n     -> std/core/sslice/Sslice(s, 0, start);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"140\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"140\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"144\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"145\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"146\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Push","target":692,"args":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"140\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"140\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"144\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"145\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"146\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (slice) {\n  ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n     -> std/core/sslice/Sslice(s, 0, start);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/string((match (slice) {\n  ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n     -> std/core/sslice/Sslice(s, 0, start);\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<string,string>((std/core/sslice/string((match (slice) {\n    ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n       -> std/core/sslice/Sslice(s, 0, start);\n  }))), (std/core/sslice/string((std/core/sslice/after(slice)))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(slice,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"140\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"140\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"141\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"141\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"142\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"142\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"143\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"143\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":0,"clauses":[{"tag":"std/core/sslice/Sslice","target":695,"args":{"any":[0,1,2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4016]","target":693,"args":{"any":[]}}}]},
{"label":"697([#1999])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"140\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"140\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"141\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"142\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"143\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"140\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"140\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"141\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"142\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"143\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":0,"clauses":[{"tag":"std/core/sslice/Sslice","target":696,"args":{"any":[3,4,5]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4017]","target":687,"args":{"any":[]}}}]},
{"label":"698([k@[k@[mcore:[#1296]#1949]#1951]#1959])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"140\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":653,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"140\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":697,"args":{"any":[2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4018]","target":670,"args":{"any":[]}}}]},
{"label":"699([k@[mcore:[#1296]#1949]#1951])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: \".\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"."},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":698,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":3,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \".\"","traced":{"any":[]}},
{"op":"Jump","target":643}]},
{"label":"700([match_def@[mcore:[#1296]#1949]#2073])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"701([k@[#2074]#2076])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"702([match_def@[match_def@[#2074]#2078]#2079])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"703([k@[#2080]#2085])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"704([match_def@[match_def@[#2080]#2087]#2088])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"705([#2089])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@3,{\"op\": \"Var\",\"id\": \"@x138\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"139\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"139\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@3,{\"op\": \"Var\",\"id\": \"@x138\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"139\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"139\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"706([match_def@[#2080]#2087])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x138\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"139\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x138\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"139\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":705,"args":{"any":[0]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4019]","target":704,"args":{"any":[]}}}]},
{"label":"707([match_std/core/types/Nothing@[#2080]#2090])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"@x138\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"@x138\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"708([#2080])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"135\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n     -> x@1;\n}","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x138\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x138\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n     -> x@1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"135\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Nothing","target":707,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4020]","target":706,"args":{"any":[]}}}]},
{"label":"709([match_def@[#2074]#2078])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"135\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"135\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":708,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4021]","target":702,"args":{"any":[]}}}]},
{"label":"710([match_std/core/types/Cons@[#2074]#2093])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"135\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"136\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"136\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"137\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"135\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"136\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"136\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"137\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"711([#2074])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"134\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"134\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"135\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@x) {\n  ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n     -> x@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n         -> x@1;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"135\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"136\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"135\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"136\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@x) {\n  ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n     -> x@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n         -> x@1;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"134\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"134\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"135\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":710,"args":{"any":[1,2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4022]","target":709,"args":{"any":[]}}}]},
{"label":"712([mcore:[#1296]#1949])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"tuple2@10072\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/sslice/find-last((match (p) {\n    ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n       -> (match (@x) {\n        ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n           -> x@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n               -> x@1;\n          });\n      });\n  }), \".\"))) {\n  ((std/core/types/Just(((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as slice: sslice/sslice) : sslice/sslice) : (maybe :: V -> V)<sslice/sslice> ) as @pat: ((maybe :: V -> V)<sslice/sslice>))\n     -> std/core/types/Tuple2<string,string>((std/core/sslice/string((match (slice) {\n        ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n           -> std/core/sslice/Sslice(s, 0, start);\n      }))), (std/core/sslice/string((std/core/sslice/after(slice)))));\n  ((@skip std/core/types/Nothing() : (maybe :: V -> V)<sslice/sslice> ) as @pat@3@0: ((maybe :: V -> V)<sslice/sslice>))\n     -> std/core/types/Tuple2<string,string>((match (p) {\n        ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n           -> (match (@x@0) {\n            ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n               -> x@0@0;\n            ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n               -> (match ((std/core/types/Nothing<string>)) {\n                ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n                   -> \"\";\n                ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n                   -> x@1@0;\n              });\n          });\n      }), \"\");\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/find-last((match (p) {\n    ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n       -> (match (@x) {\n        ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n           -> x@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n               -> x@1;\n          });\n      });\n  }), \".\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n     -> (match (@x) {\n      ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n         -> x@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n         -> (match ((std/core/types/Nothing<string>)) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n             -> \"\";\n          ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n             -> x@1;\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"134\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":699,"args":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"134\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n     -> (match (@x) {\n      ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n         -> x@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n         -> (match ((std/core/types/Nothing<string>)) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n             -> \"\";\n          ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n             -> x@1;\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/find-last((match (p) {\n    ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n       -> (match (@x) {\n        ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n           -> x@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n               -> x@1;\n          });\n      });\n  }), \".\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/sslice/find-last((match (p) {\n    ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n       -> (match (@x) {\n        ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n           -> x@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n               -> x@1;\n          });\n      });\n  }), \".\"))) {\n  ((std/core/types/Just(((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as slice: sslice/sslice) : sslice/sslice) : (maybe :: V -> V)<sslice/sslice> ) as @pat: ((maybe :: V -> V)<sslice/sslice>))\n     -> std/core/types/Tuple2<string,string>((std/core/sslice/string((match (slice) {\n        ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n           -> std/core/sslice/Sslice(s, 0, start);\n      }))), (std/core/sslice/string((std/core/sslice/after(slice)))));\n  ((@skip std/core/types/Nothing() : (maybe :: V -> V)<sslice/sslice> ) as @pat@3@0: ((maybe :: V -> V)<sslice/sslice>))\n     -> std/core/types/Tuple2<string,string>((match (p) {\n        ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n           -> (match (@x@0) {\n            ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n               -> x@0@0;\n            ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n               -> (match ((std/core/types/Nothing<string>)) {\n                ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n                   -> \"\";\n                ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n                   -> x@1@0;\n              });\n          });\n      }), \"\");\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"tuple2@10072\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":0,"clauses":[{"tag":"std/os/path/Path","target":711,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4023]","target":700,"args":{"any":[]}}}]},
{"label":"713([mcore:[#1297]#2094])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/sslice/find-last"}]},
{"label":"714([mcore:[#1305]#2100])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"715([mcore:[#1307]#2106])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/sslice/string"}]},
{"label":"716([mcore:[#1310]#2111])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"CallLib","lib":3,"symbol":"std/core/sslice/Sslice"}]},
{"label":"717([mcore:[#1317]#2118])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/sslice/string"}]},
{"label":"718([mcore:[#1319]#2123])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/sslice/after"}]},
{"label":"719([mcore:[#1324]#2128])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"720([mcore:[#1331]#2134])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"721([mcore:[#1338]#2140])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/(++)"}]},
{"label":"722([mcore:[#1343]#2146])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/(++)"}]},
{"label":"723([mcore:[#1356]#2152])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/vector/vlist"}]},
{"label":"724([#2216])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Jump","target":1139}]},
{"label":"725([#2218])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"726([#2219])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@3,{\"op\": \"Var\",\"id\": \"q\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x@0@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"135\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x@0@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"135\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"136\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@2: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"136\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@3,{\"op\": \"Var\",\"id\": \"q\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x@0@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"135\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x@0@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"135\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"136\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@2: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"136\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"727([k@[k@[k@[k@[#2191]#2194]#2205]#2208]#2214])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/Path((match (q) {\n    ((@skip std/os/path/Path((@x@0@1@0: string) : string, (@pat@0@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@1@3: std/os/path/path)\n       -> @x@0@1@0;\n  }), parts)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (q) {\n  ((@skip std/os/path/Path((@x@0@1@0: string) : string, (@pat@0@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@1@3: std/os/path/path)\n     -> @x@0@1@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"q\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"135\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"136\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":724,"args":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"q\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"135\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"136\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (q) {\n  ((@skip std/os/path/Path((@x@0@1@0: string) : string, (@pat@0@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@1@3: std/os/path/path)\n     -> @x@0@1@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/Path((match (q) {\n    ((@skip std/os/path/Path((@x@0@1@0: string) : string, (@pat@0@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@1@3: std/os/path/path)\n       -> @x@0@1@0;\n  }), parts)","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":1,"clauses":[{"tag":"std/os/path/Path","target":726,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4024]","target":725,"args":{"any":[]}}}]},
{"label":"728([k@[k@[k@[#2191]#2194]#2205]#2208])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":727,"args":{"any":[1]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Copy","from":3,"to":2},
{"op":"Jump","target":195}]},
{"label":"729([match_def@[k@[k@[#2191]#2194]#2205]#2220])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"730([#2221])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@2,{\"op\": \"Var\",\"id\": \"q\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"168\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"168\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"169\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"169\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@2,{\"op\": \"Var\",\"id\": \"q\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"168\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"168\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"169\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"169\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"731([k@[k@[#2191]#2194]#2205])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match (q) {\n  ((@skip std/os/path/Path((@pat@0@1@1: string) : string, (@x@1@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@2: std/os/path/path)\n     -> @x@1@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"q\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"168\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"169\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":728,"args":{"any":[1,0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"q\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"168\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"169\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (q) {\n  ((@skip std/os/path/Path((@pat@0@1@1: string) : string, (@x@1@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@2: std/os/path/path)\n     -> @x@1@0;\n}","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":1,"clauses":[{"tag":"std/os/path/Path","target":730,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4025]","target":729,"args":{"any":[]}}}]},
{"label":"732([k@[#2191]#2194])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"v@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/splitv(basename@0@10076, \"/\")","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Undefined:  std/core/string/splitv"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/push-parts((std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>))), (match (q) {\n    ((@skip std/os/path/Path((@pat@0@1@1: string) : string, (@x@1@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@2: std/os/path/path)\n       -> @x@1@0;\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@None<(list :: V -> V)<string>>","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":731,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":3,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@None<(list :: V -> V)<string>>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/push-parts((std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>))), (match (q) {\n    ((@skip std/os/path/Path((@pat@0@1@1: string) : string, (@x@1@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@2: std/os/path/path)\n       -> @x@1@0;\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/splitv(basename@0@10076, \"/\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"v@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}}","traced":{"any":[]}},
{"op":"Jump","target":723}]},
{"label":"733([#2191])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Push","target":732,"args":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":1139}]},
{"label":"734([#2222])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"735([k@[#2223]#2225])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"736([match_def@[match_def@[#2223]#2227]#2228])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"737([#2229])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"165\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"165\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"165\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"165\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"738([match_def@[#2223]#2227])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"165\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"165\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"165\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"165\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":737,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4026]","target":736,"args":{"any":[]}}}]},
{"label":"739([match_std/core/types/Cons@[#2223]#2234])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"165\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"165\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(@pat@0@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"166\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@5: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"166\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"167\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"167\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"165\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"165\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(@pat@0@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"166\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@5: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"166\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"167\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"167\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"740([#2223])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@1,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"164\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"164\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"165\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"165\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@x@1) {\n  ((std/core/types/Cons((@pat@0@5: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@6: ((list :: V -> V)<string>))\n     -> xx;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1: ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"165\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"165\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"166\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"167\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"165\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"165\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"166\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"167\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@x@1) {\n  ((std/core/types/Cons((@pat@0@5: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@6: ((list :: V -> V)<string>))\n     -> xx;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1: ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@1,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"164\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"164\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"165\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"165\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":739,"args":{"any":[1,2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4027]","target":738,"args":{"any":[]}}}]},
{"label":"741([k@[k@[k@[k@[#2170]#2172]#2177]#2183]#2188])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@0@1: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@1: std/os/path/path)\n     -> (match (@x@1) {\n      ((std/core/types/Cons((@pat@0@5: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@6: ((list :: V -> V)<string>))\n         -> xx;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1: ((list :: V -> V)<string>))\n         -> std/core/types/Nil<string>;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"164\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"165\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":733,"args":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"164\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"165\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@0@1: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@1: std/os/path/path)\n     -> (match (@x@1) {\n      ((std/core/types/Cons((@pat@0@5: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@6: ((list :: V -> V)<string>))\n         -> xx;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1: ((list :: V -> V)<string>))\n         -> std/core/types/Nil<string>;\n    });\n}","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":1,"clauses":[{"tag":"std/os/path/Path","target":740,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4028]","target":734,"args":{"any":[]}}}]},
{"label":"742([match_def@[#2235]#2236])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"743([#2239])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"744([#2241])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"745([#2242])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4@0@0,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"162\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x@0@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"162\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@2@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"163\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@2@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"163\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4@0@0,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"162\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x@0@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"162\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@2@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"163\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@2@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"163\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"746([match_std/core/types/@None@[#2235]#2237])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@1@0@0,{\"op\": \"Var\",\"id\": \"@x160\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (p) {\n  ((@skip std/os/path/Path((@x@0@0@0: string) : string, (@pat@0@2@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4@0@0: std/os/path/path)\n     -> @x@0@0@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"162\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"163\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"162\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"163\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p) {\n  ((@skip std/os/path/Path((@x@0@0@0: string) : string, (@pat@0@2@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4@0@0: std/os/path/path)\n     -> @x@0@0@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@1@0@0,{\"op\": \"Var\",\"id\": \"@x160\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":0,"clauses":[{"tag":"std/os/path/Path","target":745,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4029]","target":744,"args":{"any":[]}}}]},
{"label":"747([#2235])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x160\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x160\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":1,"clauses":[{"tag":"std/core/types/@None","target":746,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4030]","target":742,"args":{"any":[]}}}]},
{"label":"748([#2243])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3@2,{\"op\": \"Var\",\"id\": \"@x160\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-root@108,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"161\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-root@108: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"161\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3@2,{\"op\": \"Var\",\"id\": \"@x160\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-root@108,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"161\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-root@108: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"161\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"749([k@[k@[k@[#2170]#2172]#2177]#2183])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"q\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/Path((match ((std/core/types/@None<string>)) {\n    ((std/core/types/@Optional((@uniq-root@108: string) : string) : ? string ) as @pat@3@2: ? string)\n       -> @uniq-root@108;\n    ((@skip std/core/types/@None() : ? string ) as @pat@0@1@0@0: ? string)\n       -> (match (p) {\n        ((@skip std/os/path/Path((@x@0@0@0: string) : string, (@pat@0@2@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4@0@0: std/os/path/path)\n           -> @x@0@0@0;\n      });\n  }), (match (p) {\n    ((@skip std/os/path/Path((@pat@0@0@1: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@1: std/os/path/path)\n       -> (match (@x@1) {\n        ((std/core/types/Cons((@pat@0@5: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@6: ((list :: V -> V)<string>))\n           -> xx;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1: ((list :: V -> V)<string>))\n           -> std/core/types/Nil<string>;\n      });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/types/@None<string>)) {\n  ((std/core/types/@Optional((@uniq-root@108: string) : string) : ? string ) as @pat@3@2: ? string)\n     -> @uniq-root@108;\n  ((@skip std/core/types/@None() : ? string ) as @pat@0@1@0@0: ? string)\n     -> (match (p) {\n      ((@skip std/os/path/Path((@x@0@0@0: string) : string, (@pat@0@2@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4@0@0: std/os/path/path)\n         -> @x@0@0@0;\n    });\n}","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x160\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"161\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":741,"args":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x160\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"161\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/types/@None<string>)) {\n  ((std/core/types/@Optional((@uniq-root@108: string) : string) : ? string ) as @pat@3@2: ? string)\n     -> @uniq-root@108;\n  ((@skip std/core/types/@None() : ? string ) as @pat@0@1@0@0: ? string)\n     -> (match (p) {\n      ((@skip std/os/path/Path((@x@0@0@0: string) : string, (@pat@0@2@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4@0@0: std/os/path/path)\n         -> @x@0@0@0;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/Path((match ((std/core/types/@None<string>)) {\n    ((std/core/types/@Optional((@uniq-root@108: string) : string) : ? string ) as @pat@3@2: ? string)\n       -> @uniq-root@108;\n    ((@skip std/core/types/@None() : ? string ) as @pat@0@1@0@0: ? string)\n       -> (match (p) {\n        ((@skip std/os/path/Path((@x@0@0@0: string) : string, (@pat@0@2@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4@0@0: std/os/path/path)\n           -> @x@0@0@0;\n      });\n  }), (match (p) {\n    ((@skip std/os/path/Path((@pat@0@0@1: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@1: std/os/path/path)\n       -> (match (@x@1) {\n        ((std/core/types/Cons((@pat@0@5: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@6: ((list :: V -> V)<string>))\n           -> xx;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1: ((list :: V -> V)<string>))\n           -> std/core/types/Nil<string>;\n      });\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"q\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":748,"args":{"any":[2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4031]","target":747,"args":{"any":[]}}}]},
{"label":"750([k@[k@[#2170]#2172]#2177])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":749,"args":{"any":[1]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Copy","from":3,"to":2},
{"op":"Jump","target":721}]},
{"label":"751([switch case for Bool(true)#2244])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@3@1,{\"op\": \"Var\",\"id\": \"@x155\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3@1,{\"op\": \"Var\",\"id\": \"@x155\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"752([#2258])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"753([k@[switch case for Bool(false)#2248]#2252])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":722}]},
{"label":"754([#2260])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"755([#2261])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5@0,{\"op\": \"Var\",\"id\": \"tuple2@10074\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@pat@0@4@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"158\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@4@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"158\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"159\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"159\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5@0,{\"op\": \"Var\",\"id\": \"tuple2@10074\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@pat@0@4@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"158\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@4@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"158\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"159\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"159\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"756([switch case for Bool(false)#2248])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@2@0,{\"op\": \"Var\",\"id\": \"@x155\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/(++)(\".\", (match (tuple2@10074) {\n    ((@skip std/core/types/Tuple2((@pat@0@4@0: string) : string, (@x@0@1: string) : string) : (string, string) ) as @pat@5@0: (string, string))\n       -> @x@0@1;\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \".\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"."},
{"op":"Debug","msg":"BGN: genExpr: match (tuple2@10074) {\n  ((@skip std/core/types/Tuple2((@pat@0@4@0: string) : string, (@x@0@1: string) : string) : (string, string) ) as @pat@5@0: (string, string))\n     -> @x@0@1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"tuple2@10074\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"158\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"159\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":753,"args":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"tuple2@10074\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"158\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"159\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (tuple2@10074) {\n  ((@skip std/core/types/Tuple2((@pat@0@4@0: string) : string, (@x@0@1: string) : string) : (string, string) ) as @pat@5@0: (string, string))\n     -> @x@0@1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \".\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/(++)(\".\", (match (tuple2@10074) {\n    ((@skip std/core/types/Tuple2((@pat@0@4@0: string) : string, (@x@0@1: string) : string) : (string, string) ) as @pat@5@0: (string, string))\n       -> @x@0@1;\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@2@0,{\"op\": \"Var\",\"id\": \"@x155\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":0,"clauses":[{"tag":"std/core/types/Tuple2","target":755,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4032]","target":754,"args":{"any":[]}}}]},
{"label":"757([switch default case#2262])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"758([switch default case#2247])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Swap","a":0,"b":1},
{"op":"Switch","arg":1,"values":[false],"targets":[756],"default":757}]},
{"label":"759([k@[#2170]#2172])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":4,"value":""},
{"op":"PrimOp","name":"infixEq(String, String): Boolean","out":{"any":[0]},"in":{"any":[0,4]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Push","target":750,"args":{"any":[1,2]}},
{"op":"Copy","from":3,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[751],"default":758}]},
{"label":"760([match_def@[#2170]#2263])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"761([match_std/core/types/Tuple2@[#2170]#2264])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"tuple2@10074\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@pat@0@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"156\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@4: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"156\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"157\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"157\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"tuple2@10074\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@pat@0@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"156\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@4: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"156\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"157\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"157\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"762([#2170])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"basename@0@10076\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/(++)(stemname@0, (match ((std/core/string/(==)((match (tuple2@10074) {\n      ((@skip std/core/types/Tuple2((@pat@0@4: string) : string, (@x@0@0: string) : string) : (string, string) ) as @pat@5: (string, string))\n         -> @x@0@0;\n    }), \"\"))) {\n    ((std/core/types/True() : bool ) as @pat@3@1: bool)\n       -> \"\";\n    ((@skip std/core/types/False() : bool ) as @pat@0@2@0: bool)\n       -> std/core/types/(++)(\".\", (match (tuple2@10074) {\n          ((@skip std/core/types/Tuple2((@pat@0@4@0: string) : string, (@x@0@1: string) : string) : (string, string) ) as @pat@5@0: (string, string))\n             -> @x@0@1;\n        }));\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/string/(==)((match (tuple2@10074) {\n    ((@skip std/core/types/Tuple2((@pat@0@4: string) : string, (@x@0@0: string) : string) : (string, string) ) as @pat@5: (string, string))\n       -> @x@0@0;\n  }), \"\"))) {\n  ((std/core/types/True() : bool ) as @pat@3@1: bool)\n     -> \"\";\n  ((@skip std/core/types/False() : bool ) as @pat@0@2@0: bool)\n     -> std/core/types/(++)(\".\", (match (tuple2@10074) {\n        ((@skip std/core/types/Tuple2((@pat@0@4@0: string) : string, (@x@0@1: string) : string) : (string, string) ) as @pat@5@0: (string, string))\n           -> @x@0@1;\n      }));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/(==)((match (tuple2@10074) {\n    ((@skip std/core/types/Tuple2((@pat@0@4: string) : string, (@x@0@0: string) : string) : (string, string) ) as @pat@5: (string, string))\n       -> @x@0@0;\n  }), \"\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (tuple2@10074) {\n  ((@skip std/core/types/Tuple2((@pat@0@4: string) : string, (@x@0@0: string) : string) : (string, string) ) as @pat@5: (string, string))\n     -> @x@0@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"tuple2@10074\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"156\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"157\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":759,"args":{"any":[1,2,0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"tuple2@10074\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"156\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"157\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (tuple2@10074) {\n  ((@skip std/core/types/Tuple2((@pat@0@4: string) : string, (@x@0@0: string) : string) : (string, string) ) as @pat@5: (string, string))\n     -> @x@0@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/(==)((match (tuple2@10074) {\n    ((@skip std/core/types/Tuple2((@pat@0@4: string) : string, (@x@0@0: string) : string) : (string, string) ) as @pat@5: (string, string))\n       -> @x@0@0;\n  }), \"\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/string/(==)((match (tuple2@10074) {\n    ((@skip std/core/types/Tuple2((@pat@0@4: string) : string, (@x@0@0: string) : string) : (string, string) ) as @pat@5: (string, string))\n       -> @x@0@0;\n  }), \"\"))) {\n  ((std/core/types/True() : bool ) as @pat@3@1: bool)\n     -> \"\";\n  ((@skip std/core/types/False() : bool ) as @pat@0@2@0: bool)\n     -> std/core/types/(++)(\".\", (match (tuple2@10074) {\n        ((@skip std/core/types/Tuple2((@pat@0@4@0: string) : string, (@x@0@1: string) : string) : (string, string) ) as @pat@5@0: (string, string))\n           -> @x@0@1;\n      }));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/(++)(stemname@0, (match ((std/core/string/(==)((match (tuple2@10074) {\n      ((@skip std/core/types/Tuple2((@pat@0@4: string) : string, (@x@0@0: string) : string) : (string, string) ) as @pat@5: (string, string))\n         -> @x@0@0;\n    }), \"\"))) {\n    ((std/core/types/True() : bool ) as @pat@3@1: bool)\n       -> \"\";\n    ((@skip std/core/types/False() : bool ) as @pat@0@2@0: bool)\n       -> std/core/types/(++)(\".\", (match (tuple2@10074) {\n          ((@skip std/core/types/Tuple2((@pat@0@4@0: string) : string, (@x@0@1: string) : string) : (string, string) ) as @pat@5@0: (string, string))\n             -> @x@0@1;\n        }));\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"basename@0@10076\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":0,"clauses":[{"tag":"std/core/types/Tuple2","target":761,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4033]","target":760,"args":{"any":[]}}}]},
{"label":"763([match_def@[#2265]#2266])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"764([k@[#2269]#2277])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"765([#2269])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":""},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Jump","target":720}]},
{"label":"766([#2279])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"767([k@[#2280]#2282])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"768([match_def@[match_def@[#2280]#2284]#2285])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"769([k@[#2286]#2291])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"770([match_def@[match_def@[#2286]#2293]#2294])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"771([#2295])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@3@0,{\"op\": \"Var\",\"id\": \"@x153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"154\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"154\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@3@0,{\"op\": \"Var\",\"id\": \"@x153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"154\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"154\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"772([match_def@[#2286]#2293])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"154\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"154\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":771,"args":{"any":[0]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4034]","target":770,"args":{"any":[]}}}]},
{"label":"773([match_std/core/types/Nothing@[#2286]#2296])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4@0,{\"op\": \"Var\",\"id\": \"@x153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4@0,{\"op\": \"Var\",\"id\": \"@x153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"774([#2286])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"150\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n     -> x@1@0;\n}","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n     -> x@1@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"150\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Nothing","target":773,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4035]","target":772,"args":{"any":[]}}}]},
{"label":"775([match_def@[#2280]#2284])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"150\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"150\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":774,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4036]","target":768,"args":{"any":[]}}}]},
{"label":"776([match_std/core/types/Cons@[#2280]#2299])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"150\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"151\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"151\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"152\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"152\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"150\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"151\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"151\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"152\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"152\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"777([#2280])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0@0,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"149\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"149\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"150\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@x@0) {\n  ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n     -> x@0@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n         -> x@1@0;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"150\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"151\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"152\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"150\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"151\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"152\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@x@0) {\n  ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n     -> x@0@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n         -> x@1@0;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0@0,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"149\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"149\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"150\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":776,"args":{"any":[1,2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4037]","target":775,"args":{"any":[]}}}]},
{"label":"778([match_std/core/types/Nothing@[#2265]#2267])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"@x135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<string,string>((match (p) {\n    ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n       -> (match (@x@0) {\n        ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n           -> x@0@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n               -> x@1@0;\n          });\n      });\n  }), \"\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n     -> (match (@x@0) {\n      ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n         -> x@0@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n         -> (match ((std/core/types/Nothing<string>)) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n             -> \"\";\n          ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n             -> x@1@0;\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"149\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":765,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"149\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n     -> (match (@x@0) {\n      ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n         -> x@0@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n         -> (match ((std/core/types/Nothing<string>)) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n             -> \"\";\n          ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n             -> x@1@0;\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<string,string>((match (p) {\n    ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n       -> (match (@x@0) {\n        ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n           -> x@0@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n               -> x@1@0;\n          });\n      });\n  }), \"\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"@x135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":0,"clauses":[{"tag":"std/os/path/Path","target":777,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4038]","target":766,"args":{"any":[]}}}]},
{"label":"779([#2265])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":1,"clauses":[{"tag":"std/core/types/Nothing","target":778,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4039]","target":763,"args":{"any":[]}}}]},
{"label":"780([match_def@[match_def@[#2300]#2301]#2302])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"781([k@[k@[#2303]#2305]#2313])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"782([k@[#2303]#2305])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":""},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Jump","target":719}]},
{"label":"783([match_def@[#2303]#2315])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"784([k@[match_std/os/path/Path@[#2303]#2316]#2318])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"785([match_def@[#2320]#2321])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"786([#2327])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"787([match_def@[#2329]#2330])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"788([match_std/core/types/Just@[#2329]#2331])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@3@0,{\"op\": \"Var\",\"id\": \"@x153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"154\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"154\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@3@0,{\"op\": \"Var\",\"id\": \"@x153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"154\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"154\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"789([#2329])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"154\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"154\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":788,"args":{"any":[0]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4040]","target":787,"args":{"any":[]}}}]},
{"label":"790([#2332])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4@0,{\"op\": \"Var\",\"id\": \"@x153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4@0,{\"op\": \"Var\",\"id\": \"@x153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"791([match_std/core/types/Nil@[#2320]#2322])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"150\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n     -> x@1@0;\n}","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n     -> x@1@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"150\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Nothing","target":790,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4041]","target":789,"args":{"any":[]}}}]},
{"label":"792([#2320])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"150\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"150\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":791,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4042]","target":785,"args":{"any":[]}}}]},
{"label":"793([#2335])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"150\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"151\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"151\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"152\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"152\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"150\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"151\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"151\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"152\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"152\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"794([match_std/os/path/Path@[#2303]#2316])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0@0,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"149\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"149\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"150\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@x@0) {\n  ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n     -> x@0@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n         -> x@1@0;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"150\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"151\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"152\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"150\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"151\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"152\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@x@0) {\n  ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n     -> x@0@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n         -> x@1@0;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0@0,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"149\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"149\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"150\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":793,"args":{"any":[1,2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4043]","target":792,"args":{"any":[]}}}]},
{"label":"795([#2303])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"@x135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<string,string>((match (p) {\n    ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n       -> (match (@x@0) {\n        ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n           -> x@0@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n               -> x@1@0;\n          });\n      });\n  }), \"\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n     -> (match (@x@0) {\n      ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n         -> x@0@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n         -> (match ((std/core/types/Nothing<string>)) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n             -> \"\";\n          ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n             -> x@1@0;\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"149\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":782,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"149\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n     -> (match (@x@0) {\n      ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n         -> x@0@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n         -> (match ((std/core/types/Nothing<string>)) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n             -> \"\";\n          ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n             -> x@1@0;\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<string,string>((match (p) {\n    ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n       -> (match (@x@0) {\n        ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n           -> x@0@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n               -> x@1@0;\n          });\n      });\n  }), \"\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"@x135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":0,"clauses":[{"tag":"std/os/path/Path","target":794,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4044]","target":783,"args":{"any":[]}}}]},
{"label":"796([match_def@[#2300]#2301])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":1,"clauses":[{"tag":"std/core/types/Nothing","target":795,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4045]","target":780,"args":{"any":[]}}}]},
{"label":"797([k@[k@[k@[k@[#2338]#2344]#2350]#2356]#2362])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"798([k@[k@[k@[#2338]#2344]#2350]#2356])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":714}]},
{"label":"799([k@[k@[#2338]#2344]#2350])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":798,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Jump","target":717}]},
{"label":"800([k@[#2338]#2344])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/string((std/core/sslice/after(slice)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/after(slice)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":799,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":2,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/after(slice)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/string((std/core/sslice/after(slice)))","traced":{"any":[]}},
{"op":"Jump","target":718}]},
{"label":"801([#2338])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":800,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Jump","target":715}]},
{"label":"802([#2364])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"803([k@[#2365]#2372])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"804([#2365])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"142\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"142\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(s,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"146\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"146\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"147\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"147\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"148\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/Sslice(s, 0, start)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/Sslice(s, 0, start)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"142\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"142\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(s,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"146\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"146\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"147\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"147\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"148\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":716}]},
{"label":"805([match_std/core/sslice/Sslice@[#2300]#2336])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(slice,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"142\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"142\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"143\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"143\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"144\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"144\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"145\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"145\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<string,string>((std/core/sslice/string((match (slice) {\n    ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n       -> std/core/sslice/Sslice(s, 0, start);\n  }))), (std/core/sslice/string((std/core/sslice/after(slice)))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/string((match (slice) {\n  ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n     -> std/core/sslice/Sslice(s, 0, start);\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (slice) {\n  ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n     -> std/core/sslice/Sslice(s, 0, start);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"142\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"142\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"146\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"147\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"148\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Push","target":801,"args":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"142\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"142\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"146\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"147\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"148\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (slice) {\n  ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n     -> std/core/sslice/Sslice(s, 0, start);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/string((match (slice) {\n  ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n     -> std/core/sslice/Sslice(s, 0, start);\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<string,string>((std/core/sslice/string((match (slice) {\n    ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n       -> std/core/sslice/Sslice(s, 0, start);\n  }))), (std/core/sslice/string((std/core/sslice/after(slice)))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(slice,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"142\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"142\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"143\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"143\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"144\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"144\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"145\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"145\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":0,"clauses":[{"tag":"std/core/sslice/Sslice","target":804,"args":{"any":[0,1,2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4046]","target":802,"args":{"any":[]}}}]},
{"label":"806([#2300])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"142\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"142\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"143\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"144\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"145\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"142\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"142\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"143\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"144\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"145\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":0,"clauses":[{"tag":"std/core/sslice/Sslice","target":805,"args":{"any":[3,4,5]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4047]","target":796,"args":{"any":[]}}}]},
{"label":"807([k@[k@[mcore:[#1366]#2158]#2160]#2168])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"142\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":762,"args":{"any":[1,2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"142\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":806,"args":{"any":[2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4048]","target":779,"args":{"any":[]}}}]},
{"label":"808([k@[mcore:[#1366]#2158]#2160])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: \".\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"."},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":807,"args":{"any":[1,2]}},
{"op":"Copy","from":4,"to":2},
{"op":"Copy","from":3,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \".\"","traced":{"any":[]}},
{"op":"Jump","target":713}]},
{"label":"809([match_def@[mcore:[#1366]#2158]#2374])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"810([k@[#2375]#2377])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"811([match_def@[match_def@[#2375]#2379]#2380])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"812([k@[#2381]#2386])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"813([match_def@[match_def@[#2381]#2388]#2389])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"814([#2390])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@3,{\"op\": \"Var\",\"id\": \"@x140\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"141\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"141\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@3,{\"op\": \"Var\",\"id\": \"@x140\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"141\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"141\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"815([match_def@[#2381]#2388])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x140\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"141\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x140\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"141\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":814,"args":{"any":[0]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4049]","target":813,"args":{"any":[]}}}]},
{"label":"816([match_std/core/types/Nothing@[#2381]#2391])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"@x140\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"@x140\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"817([#2381])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"137\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n     -> x@1;\n}","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x140\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x140\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n     -> x@1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"137\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Nothing","target":816,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4050]","target":815,"args":{"any":[]}}}]},
{"label":"818([match_def@[#2375]#2379])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"137\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"137\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":817,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4051]","target":811,"args":{"any":[]}}}]},
{"label":"819([match_std/core/types/Cons@[#2375]#2394])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"137\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"138\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"138\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"139\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"139\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"137\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"138\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"138\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"139\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"139\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"820([#2375])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"136\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"136\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"137\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@x) {\n  ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n     -> x@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n         -> x@1;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"137\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"138\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"139\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"137\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"138\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"139\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@x) {\n  ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n     -> x@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n         -> x@1;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"136\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"136\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"137\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":819,"args":{"any":[1,2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4052]","target":818,"args":{"any":[]}}}]},
{"label":"821([mcore:[#1366]#2158])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"tuple2@10074\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/sslice/find-last((match (p) {\n    ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n       -> (match (@x) {\n        ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n           -> x@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n               -> x@1;\n          });\n      });\n  }), \".\"))) {\n  ((std/core/types/Just(((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as slice: sslice/sslice) : sslice/sslice) : (maybe :: V -> V)<sslice/sslice> ) as @pat: ((maybe :: V -> V)<sslice/sslice>))\n     -> std/core/types/Tuple2<string,string>((std/core/sslice/string((match (slice) {\n        ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n           -> std/core/sslice/Sslice(s, 0, start);\n      }))), (std/core/sslice/string((std/core/sslice/after(slice)))));\n  ((@skip std/core/types/Nothing() : (maybe :: V -> V)<sslice/sslice> ) as @pat@3@0: ((maybe :: V -> V)<sslice/sslice>))\n     -> std/core/types/Tuple2<string,string>((match (p) {\n        ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n           -> (match (@x@0) {\n            ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n               -> x@0@0;\n            ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n               -> (match ((std/core/types/Nothing<string>)) {\n                ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n                   -> \"\";\n                ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n                   -> x@1@0;\n              });\n          });\n      }), \"\");\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/find-last((match (p) {\n    ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n       -> (match (@x) {\n        ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n           -> x@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n               -> x@1;\n          });\n      });\n  }), \".\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n     -> (match (@x) {\n      ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n         -> x@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n         -> (match ((std/core/types/Nothing<string>)) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n             -> \"\";\n          ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n             -> x@1;\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"136\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":808,"args":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"136\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n     -> (match (@x) {\n      ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n         -> x@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n         -> (match ((std/core/types/Nothing<string>)) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n             -> \"\";\n          ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n             -> x@1;\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/find-last((match (p) {\n    ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n       -> (match (@x) {\n        ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n           -> x@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n               -> x@1;\n          });\n      });\n  }), \".\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/sslice/find-last((match (p) {\n    ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n       -> (match (@x) {\n        ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n           -> x@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n               -> x@1;\n          });\n      });\n  }), \".\"))) {\n  ((std/core/types/Just(((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as slice: sslice/sslice) : sslice/sslice) : (maybe :: V -> V)<sslice/sslice> ) as @pat: ((maybe :: V -> V)<sslice/sslice>))\n     -> std/core/types/Tuple2<string,string>((std/core/sslice/string((match (slice) {\n        ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n           -> std/core/sslice/Sslice(s, 0, start);\n      }))), (std/core/sslice/string((std/core/sslice/after(slice)))));\n  ((@skip std/core/types/Nothing() : (maybe :: V -> V)<sslice/sslice> ) as @pat@3@0: ((maybe :: V -> V)<sslice/sslice>))\n     -> std/core/types/Tuple2<string,string>((match (p) {\n        ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n           -> (match (@x@0) {\n            ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n               -> x@0@0;\n            ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n               -> (match ((std/core/types/Nothing<string>)) {\n                ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n                   -> \"\";\n                ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n                   -> x@1@0;\n              });\n          });\n      }), \"\");\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"tuple2@10074\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":0,"clauses":[{"tag":"std/os/path/Path","target":820,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4053]","target":809,"args":{"any":[]}}}]},
{"label":"822([mcore:[#1369]#2395])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/@Optional"}]},
{"label":"823([mcore:[#1372]#2400])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/list/@lift-reverse-append@4790"}]},
{"label":"824([#2452])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":1139}]},
{"label":"825([match_def@[#2454]#2455])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"826([match_std/core/types/@None@[#2454]#2456])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"827([#2454])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@None","target":826,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4054]","target":825,"args":{"any":[]}}}]},
{"label":"828([#2461])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-parts@807,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"139\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-parts@807: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"139\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-parts@807,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"139\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-parts@807: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"139\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"829([k@[k@[k@[k@[#2432]#2435]#2441]#2447]#2449])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match (parts@10056) {\n  ((std/core/types/@Optional((@uniq-parts@807: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1: ? ((list :: V -> V)<string>))\n     -> @uniq-parts@807;\n  ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"139\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":824,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"139\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (parts@10056) {\n  ((std/core/types/@Optional((@uniq-parts@807: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1: ? ((list :: V -> V)<string>))\n     -> @uniq-parts@807;\n  ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":828,"args":{"any":[1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4055]","target":827,"args":{"any":[]}}}]},
{"label":"830([#2462])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"831([#2463])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"p1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"137\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"137\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"138\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"138\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"p1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"137\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"137\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"138\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"138\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"832([k@[k@[k@[#2432]#2435]#2441]#2447])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/Path((match (p1) {\n    ((@skip std/os/path/Path((@x: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n       -> @x;\n  }), (match (parts@10056) {\n    ((std/core/types/@Optional((@uniq-parts@807: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1: ? ((list :: V -> V)<string>))\n       -> @uniq-parts@807;\n    ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n       -> std/core/types/Nil<string>;\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (p1) {\n  ((@skip std/os/path/Path((@x: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"137\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"138\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":829,"args":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"137\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"138\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p1) {\n  ((@skip std/os/path/Path((@x: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/Path((match (p1) {\n    ((@skip std/os/path/Path((@x: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n       -> @x;\n  }), (match (parts@10056) {\n    ((std/core/types/@Optional((@uniq-parts@807: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1: ? ((list :: V -> V)<string>))\n       -> @uniq-parts@807;\n    ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n       -> std/core/types/Nil<string>;\n  }))","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":1,"clauses":[{"tag":"std/os/path/Path","target":831,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4056]","target":830,"args":{"any":[]}}}]},
{"label":"833([k@[k@[#2432]#2435]#2441])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":832,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Jump","target":822}]},
{"label":"834([k@[#2432]#2435])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":833,"args":{"any":[1]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Copy","from":3,"to":2},
{"op":"Jump","target":195}]},
{"label":"835([match_def@[#2432]#2464])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"836([match_std/os/path/Path@[#2432]#2465])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"p1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"139\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"139\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"140\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"140\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"p1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"139\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"139\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"140\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"140\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"837([#2432])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match (p1) {\n  ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@5: std/os/path/path)\n     -> @x@1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"139\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"140\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":834,"args":{"any":[1,0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"139\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"140\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p1) {\n  ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@5: std/os/path/path)\n     -> @x@1;\n}","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":1,"clauses":[{"tag":"std/os/path/Path","target":836,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4057]","target":835,"args":{"any":[]}}}]},
{"label":"838([k@[k@[mcore:[#1384]#2406]#2420]#2426])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":837,"args":{"any":[1]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Copy","from":3,"to":2},
{"op":"Jump","target":823}]},
{"label":"839([match_def@[k@[mcore:[#1384]#2406]#2420]#2466])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"840([#2467])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"p2@0@10125\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"137\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"137\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"138\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"138\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"p2@0@10125\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"137\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"137\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"138\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"138\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"841([k@[mcore:[#1384]#2406]#2420])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@Optional<(list :: V -> V)<string>>((std/os/path/push-parts((std/core/list/@lift-reverse-append@4790<string>((std/core/types/Nil<string>), (match (p2@0@10125) {\n      ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n         -> @x@0;\n    }))), (match (p1) {\n    ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@5: std/os/path/path)\n       -> @x@1;\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/push-parts((std/core/list/@lift-reverse-append@4790<string>((std/core/types/Nil<string>), (match (p2@0@10125) {\n      ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n         -> @x@0;\n    }))), (match (p1) {\n    ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@5: std/os/path/path)\n       -> @x@1;\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-reverse-append@4790<string>((std/core/types/Nil<string>), (match (p2@0@10125) {\n    ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n       -> @x@0;\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"BGN: genExpr: match (p2@0@10125) {\n  ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n     -> @x@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p2@0@10125\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"137\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"138\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":838,"args":{"any":[1,2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p2@0@10125\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"137\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"138\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p2@0@10125) {\n  ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n     -> @x@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-reverse-append@4790<string>((std/core/types/Nil<string>), (match (p2@0@10125) {\n    ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n       -> @x@0;\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/push-parts((std/core/list/@lift-reverse-append@4790<string>((std/core/types/Nil<string>), (match (p2@0@10125) {\n      ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n         -> @x@0;\n    }))), (match (p1) {\n    ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@5: std/os/path/path)\n       -> @x@1;\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@Optional<(list :: V -> V)<string>>((std/os/path/push-parts((std/core/list/@lift-reverse-append@4790<string>((std/core/types/Nil<string>), (match (p2@0@10125) {\n      ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n         -> @x@0;\n    }))), (match (p1) {\n    ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@5: std/os/path/path)\n       -> @x@1;\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":0,"clauses":[{"tag":"std/os/path/Path","target":840,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4058]","target":839,"args":{"any":[]}}}]},
{"label":"842([mcore:[#1384]#2406])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4,5,6]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"p2@0@10125\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/path(p2)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Push","target":841,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":3,"to":2},
{"op":"Copy","from":4,"to":3},
{"op":"Copy","from":5,"to":4},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/path(p2)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"p2@0@10125\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}","traced":{"any":[]}},
{"op":"Jump","target":320}]},
{"label":"843([mcore:[#1389]#2468])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/@Optional"}]},
{"label":"844([mcore:[#1392]#2473])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/list/@lift-reverse-append@4790"}]},
{"label":"845([k@[#2536]#2539])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":1139}]},
{"label":"846([match_def@[match_def@[#2536]#2541]#2542])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"847([#2543])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"848([match_def@[#2536]#2541])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@None","target":847,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4059]","target":846,"args":{"any":[]}}}]},
{"label":"849([match_std/core/types/@Optional@[#2536]#2548])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-parts@807,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"142\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-parts@807: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"142\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-parts@807,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"142\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-parts@807: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"142\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"850([#2536])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match (parts@10056) {\n  ((std/core/types/@Optional((@uniq-parts@807: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1: ? ((list :: V -> V)<string>))\n     -> @uniq-parts@807;\n  ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"142\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":845,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"142\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (parts@10056) {\n  ((std/core/types/@Optional((@uniq-parts@807: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1: ? ((list :: V -> V)<string>))\n     -> @uniq-parts@807;\n  ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":849,"args":{"any":[1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4060]","target":848,"args":{"any":[]}}}]},
{"label":"851([#2549])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"852([#2550])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"p1@0@10126\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"140\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"140\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"141\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"141\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"p1@0@10126\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"140\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"140\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"141\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"141\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"853([k@[k@[k@[k@[#2513]#2519]#2522]#2528]#2534])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/Path((match (p1@0@10126) {\n    ((@skip std/os/path/Path((@x: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n       -> @x;\n  }), (match (parts@10056) {\n    ((std/core/types/@Optional((@uniq-parts@807: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1: ? ((list :: V -> V)<string>))\n       -> @uniq-parts@807;\n    ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n       -> std/core/types/Nil<string>;\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (p1@0@10126) {\n  ((@skip std/os/path/Path((@x: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p1@0@10126\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"140\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"141\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":850,"args":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p1@0@10126\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"140\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"141\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p1@0@10126) {\n  ((@skip std/os/path/Path((@x: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/Path((match (p1@0@10126) {\n    ((@skip std/os/path/Path((@x: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n       -> @x;\n  }), (match (parts@10056) {\n    ((std/core/types/@Optional((@uniq-parts@807: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1: ? ((list :: V -> V)<string>))\n       -> @uniq-parts@807;\n    ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n       -> std/core/types/Nil<string>;\n  }))","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":1,"clauses":[{"tag":"std/os/path/Path","target":852,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4061]","target":851,"args":{"any":[]}}}]},
{"label":"854([k@[k@[k@[#2513]#2519]#2522]#2528])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":853,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Jump","target":843}]},
{"label":"855([k@[k@[#2513]#2519]#2522])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":854,"args":{"any":[1]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Copy","from":3,"to":2},
{"op":"Jump","target":195}]},
{"label":"856([match_def@[k@[#2513]#2519]#2551])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"857([match_std/os/path/Path@[k@[#2513]#2519]#2552])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"p1@0@10126\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"142\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"142\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"143\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"143\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"p1@0@10126\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"142\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"142\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"143\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"143\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"858([k@[#2513]#2519])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match (p1@0@10126) {\n  ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@5: std/os/path/path)\n     -> @x@1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p1@0@10126\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"142\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"143\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":855,"args":{"any":[1,0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p1@0@10126\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"142\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"143\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p1@0@10126) {\n  ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@5: std/os/path/path)\n     -> @x@1;\n}","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":1,"clauses":[{"tag":"std/os/path/Path","target":857,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4062]","target":856,"args":{"any":[]}}}]},
{"label":"859([#2513])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":858,"args":{"any":[1]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Copy","from":3,"to":2},
{"op":"Jump","target":844}]},
{"label":"860([#2553])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"861([#2554])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"p2@0@10127\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"140\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"140\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"141\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"141\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"p2@0@10127\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"140\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"140\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"141\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"141\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"862([k@[k@[mcore:[#1404]#2479]#2493]#2507])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@Optional<(list :: V -> V)<string>>((std/os/path/push-parts((std/core/list/@lift-reverse-append@4790<string>((std/core/types/Nil<string>), (match (p2@0@10127) {\n      ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n         -> @x@0;\n    }))), (match (p1@0@10126) {\n    ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@5: std/os/path/path)\n       -> @x@1;\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/push-parts((std/core/list/@lift-reverse-append@4790<string>((std/core/types/Nil<string>), (match (p2@0@10127) {\n      ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n         -> @x@0;\n    }))), (match (p1@0@10126) {\n    ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@5: std/os/path/path)\n       -> @x@1;\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/@lift-reverse-append@4790<string>((std/core/types/Nil<string>), (match (p2@0@10127) {\n    ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n       -> @x@0;\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"BGN: genExpr: match (p2@0@10127) {\n  ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n     -> @x@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p2@0@10127\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"140\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"141\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":859,"args":{"any":[1,2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p2@0@10127\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"140\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"141\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p2@0@10127) {\n  ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n     -> @x@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/@lift-reverse-append@4790<string>((std/core/types/Nil<string>), (match (p2@0@10127) {\n    ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n       -> @x@0;\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/push-parts((std/core/list/@lift-reverse-append@4790<string>((std/core/types/Nil<string>), (match (p2@0@10127) {\n      ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n         -> @x@0;\n    }))), (match (p1@0@10126) {\n    ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@5: std/os/path/path)\n       -> @x@1;\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@Optional<(list :: V -> V)<string>>((std/os/path/push-parts((std/core/list/@lift-reverse-append@4790<string>((std/core/types/Nil<string>), (match (p2@0@10127) {\n      ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n         -> @x@0;\n    }))), (match (p1@0@10126) {\n    ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@5: std/os/path/path)\n       -> @x@1;\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":0,"clauses":[{"tag":"std/os/path/Path","target":861,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4063]","target":860,"args":{"any":[]}}}]},
{"label":"863([k@[mcore:[#1404]#2479]#2493])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"p2@0@10127\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/path(p2)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Push","target":862,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":3,"to":2},
{"op":"Copy","from":4,"to":3},
{"op":"Copy","from":5,"to":4},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/path(p2)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"p2@0@10127\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}","traced":{"any":[]}},
{"op":"Jump","target":320}]},
{"label":"864([mcore:[#1404]#2479])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4,5,6]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"p1@0@10126\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/path(p1)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Push","target":863,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":3,"to":2},
{"op":"Copy","from":4,"to":3},
{"op":"Copy","from":5,"to":4},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/path(p1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"p1@0@10126\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}","traced":{"any":[]}},
{"op":"Jump","target":320}]},
{"label":"865([mcore:[#1412]#2555])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"CallLib","lib":3,"symbol":"std/core/list/foldl"}]},
{"label":"866([#2564])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"867([match_def@[#2565]#2566])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"868([#2571])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Jump","target":340}]},
{"label":"869([k@[match_std/os/path/Path@[#2565]#2567]#2584])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"870([match_std/os/path/Path@[#2565]#2567])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(p,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"147\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/os/path/Path((@pat@1@0: string), (@pat@2@0: list<string>)) : std/os/path/path ) as p: std/os/path/path) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"147\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"149\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"149\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@2@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"150\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(pp,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"148\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (pp: list<std/os/path/path>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/list/foldl<std/os/path/path,std/os/path/path,(total :: E)>(pp, p, std/os/path/(/))","traced":{"any":[]}},
{"op":"New","out":2,"targets":[868],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/list/foldl<std/os/path/path,std/os/path/path,(total :: E)>(pp, p, std/os/path/(/))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(p,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"147\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/os/path/Path((@pat@1@0: string), (@pat@2@0: list<string>)) : std/os/path/path ) as p: std/os/path/path) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"147\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"149\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"149\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@2@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"150\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(pp,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"148\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (pp: list<std/os/path/path>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":865}]},
{"label":"871([#2565])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"147\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/os/path/Path((@pat@1@0: string), (@pat@2@0: list<string>)) : std/os/path/path ) as p: std/os/path/path) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"147\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"149\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"147\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/os/path/Path((@pat@1@0: string), (@pat@2@0: list<string>)) : std/os/path/path ) as p: std/os/path/path) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"147\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"149\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":0,"clauses":[{"tag":"std/os/path/Path","target":870,"args":{"any":[2,3]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4064]","target":867,"args":{"any":[]}}}]},
{"label":"872([match_def@[mcore:[#1417]#2562]#2563])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"147\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"148\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"147\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"148\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":871,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4065]","target":866,"args":{"any":[]}}}]},
{"label":"873([k@[k@[k@[#2586]#2591]#2597]#2600])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"874([k@[k@[#2586]#2591]#2597])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":1139}]},
{"label":"875([#2603])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"876([#2604])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x145\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<string>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x145\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"877([match_def@[k@[#2586]#2591]#2602])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x145\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x145\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@None","target":876,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4066]","target":875,"args":{"any":[]}}}]},
{"label":"878([#2609])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x145\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-parts@807,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"146\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-parts@807: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"146\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x145\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-parts@807,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"146\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-parts@807: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"146\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"879([k@[#2586]#2591])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/types/@None<(list :: V -> V)<string>>)) {\n  ((std/core/types/@Optional((@uniq-parts@807: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1: ? ((list :: V -> V)<string>))\n     -> @uniq-parts@807;\n  ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x145\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"146\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":874,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x145\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"146\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/types/@None<(list :: V -> V)<string>>)) {\n  ((std/core/types/@Optional((@uniq-parts@807: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1: ? ((list :: V -> V)<string>))\n     -> @uniq-parts@807;\n  ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":878,"args":{"any":[1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4067]","target":877,"args":{"any":[]}}}]},
{"label":"880([match_def@[match_def@[#2586]#2610]#2611])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"881([#2612])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"@x143\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"@x143\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"882([match_def@[#2586]#2610])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x143\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x143\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@None","target":881,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4068]","target":880,"args":{"any":[]}}}]},
{"label":"883([match_std/core/types/@Optional@[#2586]#2615])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x143\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-root@801,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"144\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-root@801: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"144\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x143\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-root@801,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"144\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-root@801: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"144\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"884([#2586])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/Path((match ((std/core/types/@None<string>)) {\n    ((std/core/types/@Optional((@uniq-root@801: string) : string) : ? string ) as @pat@0: ? string)\n       -> @uniq-root@801;\n    ((@skip std/core/types/@None() : ? string ) as @pat@0@0: ? string)\n       -> \"\";\n  }), (match ((std/core/types/@None<(list :: V -> V)<string>>)) {\n    ((std/core/types/@Optional((@uniq-parts@807: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1: ? ((list :: V -> V)<string>))\n       -> @uniq-parts@807;\n    ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n       -> std/core/types/Nil<string>;\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/types/@None<string>)) {\n  ((std/core/types/@Optional((@uniq-root@801: string) : string) : ? string ) as @pat@0: ? string)\n     -> @uniq-root@801;\n  ((@skip std/core/types/@None() : ? string ) as @pat@0@0: ? string)\n     -> \"\";\n}","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x143\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"144\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":879,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x143\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"144\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/types/@None<string>)) {\n  ((std/core/types/@Optional((@uniq-root@801: string) : string) : ? string ) as @pat@0: ? string)\n     -> @uniq-root@801;\n  ((@skip std/core/types/@None() : ? string ) as @pat@0@0: ? string)\n     -> \"\";\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/Path((match ((std/core/types/@None<string>)) {\n    ((std/core/types/@Optional((@uniq-root@801: string) : string) : ? string ) as @pat@0: ? string)\n       -> @uniq-root@801;\n    ((@skip std/core/types/@None() : ? string ) as @pat@0@0: ? string)\n       -> \"\";\n  }), (match ((std/core/types/@None<(list :: V -> V)<string>>)) {\n    ((std/core/types/@Optional((@uniq-parts@807: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1: ? ((list :: V -> V)<string>))\n       -> @uniq-parts@807;\n    ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n       -> std/core/types/Nil<string>;\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/@optional","scrutinee":0,"clauses":[{"tag":"std/core/types/@Optional","target":883,"args":{"any":[1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4069]","target":882,"args":{"any":[]}}}]},
{"label":"885([mcore:[#1417]#2562])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":884,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4070]","target":872,"args":{"any":[]}}}]},
{"label":"886([mcore:[#1420]#2616])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/hnd/@open-none1"}]},
{"label":"887([#2627])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Jump","target":320}]},
{"label":"888([k@[mcore:[#1424]#2622]#2624])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@open-none1<string,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>(std/os/path/path, @x-x1@10152)","traced":{"any":[]}},
{"op":"New","out":1,"targets":[887],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@open-none1<string,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>(std/os/path/path, @x-x1@10152)","traced":{"any":[]}},
{"op":"Jump","target":886}]},
{"label":"889([mcore:[#1424]#2622])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4,5]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@x-x1@10152\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/xrealpath(s)","traced":{"any":[]}},
{"op":"Push","target":888,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/xrealpath(s)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@x-x1@10152\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Jump","target":71}]},
{"label":"890([mcore:[#1425]#2645])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/hnd/@open-none1"}]},
{"label":"891([mcore:[#1431]#2651])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/hnd/@open-none1"}]},
{"label":"892([method_apply@[mcore:[#1435]#2657]#2660])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Jump","target":248}]},
{"label":"893([#2678])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Jump","target":320}]},
{"label":"894([k@[k@[mcore:[#1435]#2657]#2673]#2675])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@open-none1<string,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>(std/os/path/path, @x-x1@0@10154)","traced":{"any":[]}},
{"op":"New","out":1,"targets":[893],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@open-none1<string,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>(std/os/path/path, @x-x1@0@10154)","traced":{"any":[]}},
{"op":"Jump","target":891}]},
{"label":"895([k@[mcore:[#1435]#2657]#2673])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@x-x1@0@10154\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/xrealpath(s@10082)","traced":{"any":[]}},
{"op":"Push","target":894,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/xrealpath(s@10082)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@x-x1@0@10154\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Jump","target":71}]},
{"label":"896([mcore:[#1435]#2657])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4,5,6]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"s@10082\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@open-none1<std/os/path/path,string,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>(std/os/path/string, p)","traced":{"any":[]}},
{"op":"New","out":1,"targets":[892],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":895,"args":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@open-none1<std/os/path/path,string,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>(std/os/path/string, p)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"s@10082\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Jump","target":890}]},
{"label":"897([mcore:[#1438]#2696])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/hnd/@open-none1"}]},
{"label":"898([#2709])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Jump","target":320}]},
{"label":"899([k@[mcore:[#1442]#2702]#2706])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@open-none1<string,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>(std/os/path/path, @x-x1@10155)","traced":{"any":[]}},
{"op":"New","out":1,"targets":[898],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@open-none1<string,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>(std/os/path/path, @x-x1@10155)","traced":{"any":[]}},
{"op":"Jump","target":897}]},
{"label":"900([mcore:[#1442]#2702])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@x-x1@10155\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/xrealpath(\".\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \".\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"."},
{"op":"Push","target":899,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \".\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/xrealpath(\".\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@x-x1@10155\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Jump","target":71}]},
{"label":"901([mcore:[#1443]#2727])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/sslice/find-last"}]},
{"label":"902([mcore:[#1451]#2733])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"903([mcore:[#1453]#2739])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/sslice/string"}]},
{"label":"904([mcore:[#1456]#2744])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"CallLib","lib":3,"symbol":"std/core/sslice/Sslice"}]},
{"label":"905([mcore:[#1463]#2751])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/sslice/string"}]},
{"label":"906([mcore:[#1465]#2756])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/sslice/after"}]},
{"label":"907([mcore:[#1470]#2761])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"908([mcore:[#1477]#2767])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"909([k@[switch case for Bool(true)#2791]#2802])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"910([switch case for Bool(true)#2791])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@1,{\"op\": \"Var\",\"id\": \"@x151\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/change-ext(p, newext)","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Swap","a":2,"b":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/change-ext(p, newext)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@1,{\"op\": \"Var\",\"id\": \"@x151\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Jump","target":642}]},
{"label":"911([switch case for Bool(false)#2805])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@0@1,{\"op\": \"Var\",\"id\": \"@x151\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@0@1,{\"op\": \"Var\",\"id\": \"@x151\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"912([switch default case#2806])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"913([switch default case#2804])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Switch","arg":1,"values":[false],"targets":[911],"default":912}]},
{"label":"914([k@[#2785]#2787])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":""},
{"op":"PrimOp","name":"infixEq(String, String): Boolean","out":{"any":[0]},"in":{"any":[0,3]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[910],"default":913}]},
{"label":"915([match_def@[#2785]#2807])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"916([match_std/core/types/Tuple2@[#2785]#2808])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"tuple2@10086\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@pat@0@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"152\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@4: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"152\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"153\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"153\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"tuple2@10086\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@pat@0@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"152\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@4: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"152\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"153\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"153\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"917([#2785])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/(==)((match (tuple2@10086) {\n    ((@skip std/core/types/Tuple2((@pat@0@4: string) : string, (@x@0@0: string) : string) : (string, string) ) as @pat@5: (string, string))\n       -> @x@0@0;\n  }), \"\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (tuple2@10086) {\n  ((@skip std/core/types/Tuple2((@pat@0@4: string) : string, (@x@0@0: string) : string) : (string, string) ) as @pat@5: (string, string))\n     -> @x@0@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"tuple2@10086\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"152\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"153\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":914,"args":{"any":[1,2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"tuple2@10086\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"152\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"153\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (tuple2@10086) {\n  ((@skip std/core/types/Tuple2((@pat@0@4: string) : string, (@x@0@0: string) : string) : (string, string) ) as @pat@5: (string, string))\n     -> @x@0@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/(==)((match (tuple2@10086) {\n    ((@skip std/core/types/Tuple2((@pat@0@4: string) : string, (@x@0@0: string) : string) : (string, string) ) as @pat@5: (string, string))\n       -> @x@0@0;\n  }), \"\")","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":0,"clauses":[{"tag":"std/core/types/Tuple2","target":916,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4071]","target":915,"args":{"any":[]}}}]},
{"label":"918([match_def@[#2809]#2810])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"919([k@[#2813]#2821])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"920([#2813])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":""},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Jump","target":908}]},
{"label":"921([#2823])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"922([k@[#2824]#2826])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"923([match_def@[match_def@[#2824]#2828]#2829])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"924([k@[#2830]#2835])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"925([match_def@[match_def@[#2830]#2837]#2838])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"926([#2839])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@3@0,{\"op\": \"Var\",\"id\": \"@x169\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"170\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"170\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@3@0,{\"op\": \"Var\",\"id\": \"@x169\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"170\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"170\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"927([match_def@[#2830]#2837])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x169\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"170\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x169\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"170\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":926,"args":{"any":[0]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4072]","target":925,"args":{"any":[]}}}]},
{"label":"928([match_std/core/types/Nothing@[#2830]#2840])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4@0,{\"op\": \"Var\",\"id\": \"@x169\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4@0,{\"op\": \"Var\",\"id\": \"@x169\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"929([#2830])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"166\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"166\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n     -> x@1@0;\n}","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x169\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x169\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n     -> x@1@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"166\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"166\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Nothing","target":928,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4073]","target":927,"args":{"any":[]}}}]},
{"label":"930([match_def@[#2824]#2828])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"166\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"166\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"166\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"166\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":929,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4074]","target":923,"args":{"any":[]}}}]},
{"label":"931([match_std/core/types/Cons@[#2824]#2843])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"166\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"166\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"167\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"167\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"168\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"168\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"166\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"166\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"167\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"167\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"168\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"168\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"932([#2824])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0@0,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"165\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"165\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"166\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"166\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@x@0) {\n  ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n     -> x@0@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n         -> x@1@0;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"166\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"166\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"167\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"168\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"166\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"166\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"167\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"168\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@x@0) {\n  ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n     -> x@0@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n         -> x@1@0;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0@0,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"165\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"165\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"166\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"166\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":931,"args":{"any":[1,2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4075]","target":930,"args":{"any":[]}}}]},
{"label":"933([match_std/core/types/Nothing@[#2809]#2811])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"@x151\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<string,string>((match (p) {\n    ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n       -> (match (@x@0) {\n        ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n           -> x@0@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n               -> x@1@0;\n          });\n      });\n  }), \"\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n     -> (match (@x@0) {\n      ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n         -> x@0@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n         -> (match ((std/core/types/Nothing<string>)) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n             -> \"\";\n          ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n             -> x@1@0;\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"165\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"166\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":920,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"165\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"166\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n     -> (match (@x@0) {\n      ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n         -> x@0@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n         -> (match ((std/core/types/Nothing<string>)) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n             -> \"\";\n          ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n             -> x@1@0;\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<string,string>((match (p) {\n    ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n       -> (match (@x@0) {\n        ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n           -> x@0@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n               -> x@1@0;\n          });\n      });\n  }), \"\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"@x151\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":0,"clauses":[{"tag":"std/os/path/Path","target":932,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4076]","target":921,"args":{"any":[]}}}]},
{"label":"934([#2809])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x151\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x151\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":1,"clauses":[{"tag":"std/core/types/Nothing","target":933,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4077]","target":918,"args":{"any":[]}}}]},
{"label":"935([match_def@[match_def@[#2844]#2845]#2846])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"936([k@[k@[#2847]#2849]#2857])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"937([k@[#2847]#2849])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":""},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Jump","target":907}]},
{"label":"938([match_def@[#2847]#2859])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"939([k@[match_std/os/path/Path@[#2847]#2860]#2862])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"940([match_def@[#2864]#2865])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"941([#2871])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"942([match_def@[#2873]#2874])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"943([match_std/core/types/Just@[#2873]#2875])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@3@0,{\"op\": \"Var\",\"id\": \"@x169\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"170\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"170\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@3@0,{\"op\": \"Var\",\"id\": \"@x169\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"170\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"170\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"944([#2873])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x169\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"170\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x169\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"170\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":943,"args":{"any":[0]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4078]","target":942,"args":{"any":[]}}}]},
{"label":"945([#2876])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4@0,{\"op\": \"Var\",\"id\": \"@x169\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4@0,{\"op\": \"Var\",\"id\": \"@x169\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"946([match_std/core/types/Nil@[#2864]#2866])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"166\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"166\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n     -> x@1@0;\n}","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x169\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x169\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n     -> x@1@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"166\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"166\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Nothing","target":945,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4079]","target":944,"args":{"any":[]}}}]},
{"label":"947([#2864])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"166\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"166\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"166\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"166\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":946,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4080]","target":940,"args":{"any":[]}}}]},
{"label":"948([#2879])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"166\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"166\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"167\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"167\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"168\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"168\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"166\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"166\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"167\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"167\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"168\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"168\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"949([match_std/os/path/Path@[#2847]#2860])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0@0,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"165\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"165\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"166\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"166\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@x@0) {\n  ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n     -> x@0@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n         -> x@1@0;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"166\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"166\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"167\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"168\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"166\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"166\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"167\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"168\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@x@0) {\n  ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n     -> x@0@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n         -> x@1@0;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0@0,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"165\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"165\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"166\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"166\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":948,"args":{"any":[1,2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4081]","target":947,"args":{"any":[]}}}]},
{"label":"950([#2847])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"@x151\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<string,string>((match (p) {\n    ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n       -> (match (@x@0) {\n        ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n           -> x@0@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n               -> x@1@0;\n          });\n      });\n  }), \"\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n     -> (match (@x@0) {\n      ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n         -> x@0@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n         -> (match ((std/core/types/Nothing<string>)) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n             -> \"\";\n          ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n             -> x@1@0;\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"165\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"166\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":937,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"165\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"166\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n     -> (match (@x@0) {\n      ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n         -> x@0@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n         -> (match ((std/core/types/Nothing<string>)) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n             -> \"\";\n          ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n             -> x@1@0;\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<string,string>((match (p) {\n    ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n       -> (match (@x@0) {\n        ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n           -> x@0@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n               -> x@1@0;\n          });\n      });\n  }), \"\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"@x151\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":0,"clauses":[{"tag":"std/os/path/Path","target":949,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4082]","target":938,"args":{"any":[]}}}]},
{"label":"951([match_def@[#2844]#2845])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x151\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x151\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":1,"clauses":[{"tag":"std/core/types/Nothing","target":950,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4083]","target":935,"args":{"any":[]}}}]},
{"label":"952([k@[k@[k@[k@[#2882]#2888]#2894]#2900]#2906])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"953([k@[k@[k@[#2882]#2888]#2894]#2900])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":902}]},
{"label":"954([k@[k@[#2882]#2888]#2894])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":953,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Jump","target":905}]},
{"label":"955([k@[#2882]#2888])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/string((std/core/sslice/after(slice)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/after(slice)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":954,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":2,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/after(slice)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/string((std/core/sslice/after(slice)))","traced":{"any":[]}},
{"op":"Jump","target":906}]},
{"label":"956([#2882])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":955,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Jump","target":903}]},
{"label":"957([#2908])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"958([k@[#2909]#2916])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"959([#2909])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"158\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"158\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(s,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"162\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"162\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"163\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"163\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"164\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"164\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/Sslice(s, 0, start)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/Sslice(s, 0, start)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"158\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"158\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(s,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"162\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"162\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"163\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"163\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"164\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"164\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":904}]},
{"label":"960([match_std/core/sslice/Sslice@[#2844]#2880])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x151\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(slice,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"158\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"158\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"159\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"159\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"160\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"160\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"161\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"161\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<string,string>((std/core/sslice/string((match (slice) {\n    ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n       -> std/core/sslice/Sslice(s, 0, start);\n  }))), (std/core/sslice/string((std/core/sslice/after(slice)))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/string((match (slice) {\n  ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n     -> std/core/sslice/Sslice(s, 0, start);\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (slice) {\n  ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n     -> std/core/sslice/Sslice(s, 0, start);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"158\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"158\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"162\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"163\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"164\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Push","target":956,"args":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"158\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"158\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"162\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"163\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"164\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (slice) {\n  ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n     -> std/core/sslice/Sslice(s, 0, start);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/string((match (slice) {\n  ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n     -> std/core/sslice/Sslice(s, 0, start);\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<string,string>((std/core/sslice/string((match (slice) {\n    ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n       -> std/core/sslice/Sslice(s, 0, start);\n  }))), (std/core/sslice/string((std/core/sslice/after(slice)))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x151\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(slice,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"158\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"158\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"159\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"159\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"160\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"160\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"161\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"161\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":0,"clauses":[{"tag":"std/core/sslice/Sslice","target":959,"args":{"any":[0,1,2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4084]","target":957,"args":{"any":[]}}}]},
{"label":"961([#2844])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"158\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"158\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"159\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"160\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"161\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"158\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"158\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"159\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"160\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"161\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":0,"clauses":[{"tag":"std/core/sslice/Sslice","target":960,"args":{"any":[3,4,5]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4085]","target":951,"args":{"any":[]}}}]},
{"label":"962([k@[k@[mcore:[#1489]#2773]#2775]#2783])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x151\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"158\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":917,"args":{"any":[1,2]}},
{"op":"Copy","from":2,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x151\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"158\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":961,"args":{"any":[2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4086]","target":934,"args":{"any":[]}}}]},
{"label":"963([k@[mcore:[#1489]#2773]#2775])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: \".\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"."},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":962,"args":{"any":[1,2]}},
{"op":"Copy","from":4,"to":2},
{"op":"Copy","from":3,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \".\"","traced":{"any":[]}},
{"op":"Jump","target":901}]},
{"label":"964([match_def@[mcore:[#1489]#2773]#2918])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"965([k@[#2919]#2921])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"966([match_def@[match_def@[#2919]#2923]#2924])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"967([k@[#2925]#2930])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"968([match_def@[match_def@[#2925]#2932]#2933])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"969([#2934])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@3,{\"op\": \"Var\",\"id\": \"@x156\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"157\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"157\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@3,{\"op\": \"Var\",\"id\": \"@x156\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"157\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"157\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"970([match_def@[#2925]#2932])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x156\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"157\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x156\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"157\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":969,"args":{"any":[0]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4087]","target":968,"args":{"any":[]}}}]},
{"label":"971([match_std/core/types/Nothing@[#2925]#2935])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"@x156\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"@x156\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"972([#2925])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"153\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n     -> x@1;\n}","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x156\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x156\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n     -> x@1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"153\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Nothing","target":971,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4088]","target":970,"args":{"any":[]}}}]},
{"label":"973([match_def@[#2919]#2923])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"153\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"153\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":972,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4089]","target":966,"args":{"any":[]}}}]},
{"label":"974([match_std/core/types/Cons@[#2919]#2938])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"153\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"154\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"154\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"155\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"155\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"153\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"154\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"154\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"155\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"155\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"975([#2919])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"152\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"152\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"153\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@x) {\n  ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n     -> x@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n         -> x@1;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"153\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"154\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"155\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"153\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"154\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"155\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@x) {\n  ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n     -> x@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n         -> x@1;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"152\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"152\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"153\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":974,"args":{"any":[1,2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4090]","target":973,"args":{"any":[]}}}]},
{"label":"976([mcore:[#1489]#2773])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"tuple2@10086\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/sslice/find-last((match (p) {\n    ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n       -> (match (@x) {\n        ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n           -> x@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n               -> x@1;\n          });\n      });\n  }), \".\"))) {\n  ((std/core/types/Just(((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as slice: sslice/sslice) : sslice/sslice) : (maybe :: V -> V)<sslice/sslice> ) as @pat: ((maybe :: V -> V)<sslice/sslice>))\n     -> std/core/types/Tuple2<string,string>((std/core/sslice/string((match (slice) {\n        ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n           -> std/core/sslice/Sslice(s, 0, start);\n      }))), (std/core/sslice/string((std/core/sslice/after(slice)))));\n  ((@skip std/core/types/Nothing() : (maybe :: V -> V)<sslice/sslice> ) as @pat@3@0: ((maybe :: V -> V)<sslice/sslice>))\n     -> std/core/types/Tuple2<string,string>((match (p) {\n        ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n           -> (match (@x@0) {\n            ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n               -> x@0@0;\n            ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n               -> (match ((std/core/types/Nothing<string>)) {\n                ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n                   -> \"\";\n                ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n                   -> x@1@0;\n              });\n          });\n      }), \"\");\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/find-last((match (p) {\n    ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n       -> (match (@x) {\n        ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n           -> x@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n               -> x@1;\n          });\n      });\n  }), \".\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n     -> (match (@x) {\n      ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n         -> x@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n         -> (match ((std/core/types/Nothing<string>)) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n             -> \"\";\n          ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n             -> x@1;\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"152\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":963,"args":{"any":[1,0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"152\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n     -> (match (@x) {\n      ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n         -> x@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n         -> (match ((std/core/types/Nothing<string>)) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n             -> \"\";\n          ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n             -> x@1;\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/find-last((match (p) {\n    ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n       -> (match (@x) {\n        ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n           -> x@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n               -> x@1;\n          });\n      });\n  }), \".\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/sslice/find-last((match (p) {\n    ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n       -> (match (@x) {\n        ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n           -> x@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n               -> x@1;\n          });\n      });\n  }), \".\"))) {\n  ((std/core/types/Just(((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as slice: sslice/sslice) : sslice/sslice) : (maybe :: V -> V)<sslice/sslice> ) as @pat: ((maybe :: V -> V)<sslice/sslice>))\n     -> std/core/types/Tuple2<string,string>((std/core/sslice/string((match (slice) {\n        ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n           -> std/core/sslice/Sslice(s, 0, start);\n      }))), (std/core/sslice/string((std/core/sslice/after(slice)))));\n  ((@skip std/core/types/Nothing() : (maybe :: V -> V)<sslice/sslice> ) as @pat@3@0: ((maybe :: V -> V)<sslice/sslice>))\n     -> std/core/types/Tuple2<string,string>((match (p) {\n        ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n           -> (match (@x@0) {\n            ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n               -> x@0@0;\n            ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n               -> (match ((std/core/types/Nothing<string>)) {\n                ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n                   -> \"\";\n                ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n                   -> x@1@0;\n              });\n          });\n      }), \"\");\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"tuple2@10086\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":0,"clauses":[{"tag":"std/os/path/Path","target":975,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4091]","target":964,"args":{"any":[]}}}]},
{"label":"977([mcore:[#1491]#2939])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/hnd/@open-none1"}]},
{"label":"978([#2950])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Jump","target":320}]},
{"label":"979([k@[mcore:[#1495]#2945]#2947])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@open-none1<string,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>(std/os/path/path, @x-x1@10156)","traced":{"any":[]}},
{"op":"New","out":1,"targets":[978],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@open-none1<string,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>(std/os/path/path, @x-x1@10156)","traced":{"any":[]}},
{"op":"Jump","target":977}]},
{"label":"980([mcore:[#1495]#2945])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@x-x1@10156\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/xhomedir()","traced":{"any":[]}},
{"op":"Push","target":979,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/xhomedir()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@x-x1@10156\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Jump","target":99}]},
{"label":"981([k@[mcore:[#1498]#2968]#2970])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":""},
{"op":"PrimOp","name":"infixEq(String, String): Boolean","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"982([match_def@[mcore:[#1498]#2968]#2974])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"983([#2975])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"154\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"154\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"155\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"155\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"154\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"154\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"155\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"155\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"984([mcore:[#1498]#2968])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/(==)((match (p) {\n    ((@skip std/os/path/Path((@x: string) : string, (@pat@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat: std/os/path/path)\n       -> @x;\n  }), \"\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (p) {\n  ((@skip std/os/path/Path((@x: string) : string, (@pat@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat: std/os/path/path)\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"154\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"155\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":981,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"154\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"155\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p) {\n  ((@skip std/os/path/Path((@x: string) : string, (@pat@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat: std/os/path/path)\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/(==)((match (p) {\n    ((@skip std/os/path/Path((@x: string) : string, (@pat@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat: std/os/path/path)\n       -> @x;\n  }), \"\")","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":0,"clauses":[{"tag":"std/os/path/Path","target":983,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4092]","target":982,"args":{"any":[]}}}]},
{"label":"985([switch case for Bool(true)#2982])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"b@10089\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"b@10089\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"986([switch case for Bool(false)#2986])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"b@10089\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":true},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/True","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"b@10089\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"987([switch default case#2989])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"988([switch default case#2985])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Switch","arg":0,"values":[false],"targets":[986],"default":987}]},
{"label":"989([k@[mcore:[#1501]#2976]#2978])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":""},
{"op":"PrimOp","name":"infixEq(String, String): Boolean","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[985],"default":988}]},
{"label":"990([match_def@[mcore:[#1501]#2976]#2990])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"991([#2991])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"156\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"156\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"157\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"157\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"156\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"156\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"157\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"157\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"992([mcore:[#1501]#2976])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"b@10089\",\"type\": {\"op\": \"Bool\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/(==)((match (p) {\n    ((@skip std/os/path/Path((@x: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@1: std/os/path/path)\n       -> @x;\n  }), \"\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (p) {\n  ((@skip std/os/path/Path((@x: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@1: std/os/path/path)\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"156\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"157\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":989,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"156\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"157\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p) {\n  ((@skip std/os/path/Path((@x: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@1: std/os/path/path)\n     -> @x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/(==)((match (p) {\n    ((@skip std/os/path/Path((@x: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@1: std/os/path/path)\n       -> @x;\n  }), \"\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"b@10089\",\"type\": {\"op\": \"Bool\"}}","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":0,"clauses":[{"tag":"std/os/path/Path","target":991,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4093]","target":990,"args":{"any":[]}}}]},
{"label":"993([mcore:[#1505]#2992])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/change-ext(p, \"\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":""},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/change-ext(p, \"\")","traced":{"any":[]}},
{"op":"Jump","target":642}]},
{"label":"994([mcore:[#1507]#3004])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/string/count"}]},
{"label":"995([mcore:[#1512]#3009])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/sslice/foreach-while"}]},
{"label":"996([mcore:[#1514]#3015])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"CallLib","lib":3,"symbol":"std/core/sslice/Sslice"}]},
{"label":"997([mcore:[#1520]#3022])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/types/Just"}]},
{"label":"998([mcore:[#1522]#3027])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/char)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/char/is-alpha"}]},
{"label":"999([mcore:[#1528]#3032])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"1000([mcore:[#1531]#3038])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/(++)"}]},
{"label":"1001([mcore:[#1534]#3044])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/(++)"}]},
{"label":"1002([mcore:[#1544]#3050])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"1003([mcore:[#1553]#3056])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"1004([mcore:[#1562]#3062])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Cons"}]},
{"label":"1005([match_def@[#3070]#3071])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1006([match_std/core/types/Nil@[#3070]#3072])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@8,{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<std/os/path/path>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<std/os/path/path>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@8,{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1007([#3070])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":1006,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4094]","target":1005,"args":{"any":[]}}}]},
{"label":"1008([k@[k@[k@[#3077]#3091]#3112]#3118])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1009([k@[k@[#3077]#3091]#3112])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":1004}]},
{"label":"1010([k@[#3077]#3091])",
"frameDescriptor":{"regs_any":8},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/paths-collect(rest@0)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/char)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Const","format":"string","out":6,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[6]},"in":{"any":[6]}},
{"op":"Const","format":"string","out":7,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[7]},"in":{"any":[7]}},
{"op":"Push","target":1009,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":3,"to":2},
{"op":"Copy","from":4,"to":3},
{"op":"Copy","from":5,"to":4},
{"op":"Copy","from":6,"to":5},
{"op":"Copy","from":7,"to":6},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/paths-collect(rest@0)","traced":{"any":[]}},
{"op":"Jump","target":1058}]},
{"label":"1011([#3077])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@7,{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(part@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"163\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (part@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"163\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"164\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (rest@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"164\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<std/os/path/path>((std/os/path/path(part@0)), (std/os/path/paths-collect(rest@0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/path(part@0)","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Push","target":1010,"args":{"any":[2]}},
{"op":"Copy","from":3,"to":2},
{"op":"Copy","from":4,"to":3},
{"op":"Copy","from":5,"to":4},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/path(part@0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<std/os/path/path>((std/os/path/path(part@0)), (std/os/path/paths-collect(rest@0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@7,{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(part@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"163\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (part@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"163\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"164\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (rest@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"164\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":320}]},
{"label":"1012([match_def@[mcore:[#1571]#3068]#3069])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"163\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"164\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"163\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"164\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":1011,"args":{"any":[1,2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4095]","target":1007,"args":{"any":[]}}}]},
{"label":"1013([#3123])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1014([#3124])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@8,{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<std/os/path/path>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<std/os/path/path>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@8,{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1015([match_def@[match_def@[#3120]#3121]#3122])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":1014,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4096]","target":1013,"args":{"any":[]}}}]},
{"label":"1016([k@[k@[k@[#3129]#3143]#3164]#3170])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1017([k@[k@[#3129]#3143]#3164])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":1003}]},
{"label":"1018([k@[#3129]#3143])",
"frameDescriptor":{"regs_any":8},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/paths-collect(rest@0)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/char)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Const","format":"string","out":6,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[6]},"in":{"any":[6]}},
{"op":"Const","format":"string","out":7,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[7]},"in":{"any":[7]}},
{"op":"Push","target":1017,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":3,"to":2},
{"op":"Copy","from":4,"to":3},
{"op":"Copy","from":5,"to":4},
{"op":"Copy","from":6,"to":5},
{"op":"Copy","from":7,"to":6},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/paths-collect(rest@0)","traced":{"any":[]}},
{"op":"Jump","target":1058}]},
{"label":"1019([#3129])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@7,{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(part@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"163\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (part@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"163\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"164\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (rest@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"164\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<std/os/path/path>((std/os/path/path(part@0)), (std/os/path/paths-collect(rest@0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/path(part@0)","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Push","target":1018,"args":{"any":[2]}},
{"op":"Copy","from":3,"to":2},
{"op":"Copy","from":4,"to":3},
{"op":"Copy","from":5,"to":4},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/path(part@0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<std/os/path/path>((std/os/path/path(part@0)), (std/os/path/paths-collect(rest@0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@7,{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(part@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"163\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (part@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"163\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"164\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (rest@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"164\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":320}]},
{"label":"1020([match_def@[#3120]#3121])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"163\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"164\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"163\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"164\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":1019,"args":{"any":[1,2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4097]","target":1015,"args":{"any":[]}}}]},
{"label":"1021([k@[k@[k@[#3197]#3212]#3233]#3239])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1022([k@[k@[#3197]#3212]#3233])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":999}]},
{"label":"1023([k@[#3197]#3212])",
"frameDescriptor":{"regs_any":8},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/paths-collect(rest)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/char)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Const","format":"string","out":6,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[6]},"in":{"any":[6]}},
{"op":"Const","format":"string","out":7,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[7]},"in":{"any":[7]}},
{"op":"Push","target":1022,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":3,"to":2},
{"op":"Copy","from":4,"to":3},
{"op":"Copy","from":5,"to":4},
{"op":"Copy","from":6,"to":5},
{"op":"Copy","from":7,"to":6},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/paths-collect(rest)","traced":{"any":[]}},
{"op":"Jump","target":1058}]},
{"label":"1024([#3197])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Push","target":1023,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":3,"to":2},
{"op":"Copy","from":4,"to":3},
{"op":"Copy","from":5,"to":4},
{"op":"Jump","target":320}]},
{"label":"1025([k@[switch case for Bool(true)#3184]#3191])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":1024,"args":{"any":[2]}},
{"op":"Copy","from":3,"to":2},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":1000}]},
{"label":"1026([switch case for Bool(true)#3184])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<std/os/path/path>((std/os/path/path((std/core/types/(++)(root, (std/core/types/(++)(\":\", part)))))), (std/os/path/paths-collect(rest)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/path((std/core/types/(++)(root, (std/core/types/(++)(\":\", part)))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/(++)(root, (std/core/types/(++)(\":\", part)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/(++)(\":\", part)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \":\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":":"},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":1025,"args":{"any":[0,2]}},
{"op":"Copy","from":4,"to":2},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \":\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/(++)(\":\", part)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/(++)(root, (std/core/types/(++)(\":\", part)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/path((std/core/types/(++)(root, (std/core/types/(++)(\":\", part)))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<std/os/path/path>((std/os/path/path((std/core/types/(++)(root, (std/core/types/(++)(\":\", part)))))), (std/os/path/paths-collect(rest)))","traced":{"any":[]}},
{"op":"Jump","target":1001}]},
{"label":"1027([#3243])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1028([#3244])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@8,{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Nil<std/os/path/path>","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nil"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Nil<std/os/path/path>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@8,{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1029([match_def@[switch default case#3241]#3242])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":1028,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4098]","target":1027,"args":{"any":[]}}}]},
{"label":"1030([k@[k@[k@[#3249]#3263]#3284]#3290])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1031([k@[k@[#3249]#3263]#3284])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":1002}]},
{"label":"1032([k@[#3249]#3263])",
"frameDescriptor":{"regs_any":8},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/paths-collect(rest@0)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/char)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Const","format":"string","out":6,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[6]},"in":{"any":[6]}},
{"op":"Const","format":"string","out":7,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[7]},"in":{"any":[7]}},
{"op":"Push","target":1031,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":3,"to":2},
{"op":"Copy","from":4,"to":3},
{"op":"Copy","from":5,"to":4},
{"op":"Copy","from":6,"to":5},
{"op":"Copy","from":7,"to":6},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/paths-collect(rest@0)","traced":{"any":[]}},
{"op":"Jump","target":1058}]},
{"label":"1033([#3249])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@7,{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(part@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"163\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (part@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"163\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"164\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (rest@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"164\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Cons<std/os/path/path>((std/os/path/path(part@0)), (std/os/path/paths-collect(rest@0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/path(part@0)","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Push","target":1032,"args":{"any":[2]}},
{"op":"Copy","from":3,"to":2},
{"op":"Copy","from":4,"to":3},
{"op":"Copy","from":5,"to":4},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/path(part@0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Cons<std/os/path/path>((std/os/path/path(part@0)), (std/os/path/paths-collect(rest@0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@7,{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(part@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"163\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (part@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"163\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"164\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (rest@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"164\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":320}]},
{"label":"1034([switch default case#3241])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"163\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"164\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"163\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"164\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":1033,"args":{"any":[1,2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4099]","target":1029,"args":{"any":[]}}}]},
{"label":"1035([k@[#3177]#3182])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Swap","a":3,"b":4},
{"op":"Swap","a":2,"b":4},
{"op":"Swap","a":1,"b":4},
{"op":"Swap","a":0,"b":4},
{"op":"Switch","arg":4,"values":[true],"targets":[1026],"default":1034}]},
{"label":"1036([#3306])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":997}]},
{"label":"1037([k@[k@[k@[#3316]#3318]#3324]#3326])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1038([k@[switch case for Bool(true)#3328]#3332])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1039([switch case for Bool(true)#3334])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"b@10096\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"b@10096\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1040([switch case for Bool(false)#3338])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"b@10096\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/contains(\"/\\x5C\", (std/core/sslice/head(part)))","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/string/contains"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/contains(\"/\\x5C\", (std/core/sslice/head(part)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"b@10096\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1041([switch default case#3342])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1042([switch default case#3337])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Switch","arg":0,"values":[false],"targets":[1040],"default":1041}]},
{"label":"1043([switch case for Bool(true)#3328])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"@x161\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val b@10096 : bool\n      = std/core/string/(==)(part, \"\");\nmatch (b@10096) {\n  ((std/core/types/True() : bool ) as @pat@3: bool)\n     -> std/core/types/False;\n  ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n     -> std/core/string/contains(\"/\\x5C\", (std/core/sslice/head(part)));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"b@10096\",\"type\": {\"op\": \"Bool\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/(==)(part, \"\")","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":""},
{"op":"PrimOp","name":"infixEq(String, String): Boolean","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genExpr: match (b@10096) {\n  ((std/core/types/True() : bool ) as @pat@3: bool)\n     -> std/core/types/False;\n  ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n     -> std/core/string/contains(\"/\\x5C\", (std/core/sslice/head(part)));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (b@10096) {\n  ((std/core/types/True() : bool ) as @pat@3: bool)\n     -> std/core/types/False;\n  ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n     -> std/core/string/contains(\"/\\x5C\", (std/core/sslice/head(part)));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/(==)(part, \"\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"b@10096\",\"type\": {\"op\": \"Bool\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val b@10096 : bool\n      = std/core/string/(==)(part, \"\");\nmatch (b@10096) {\n  ((std/core/types/True() : bool ) as @pat@3: bool)\n     -> std/core/types/False;\n  ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n     -> std/core/string/contains(\"/\\x5C\", (std/core/sslice/head(part)));\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"@x161\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Switch","arg":0,"values":[true],"targets":[1039],"default":1042}]},
{"label":"1044([switch default case#3343])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x161\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x161\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1045([k@[k@[#3316]#3318]#3324])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":1,"values":[true],"targets":[1043],"default":1044}]},
{"label":"1046([k@[#3316]#3318])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/char)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":1045,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Jump","target":998}]},
{"label":"1047([match_def@[match_def@[#3316]#3346]#3347])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1048([#3348])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"m@10093\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"162\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"162\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"m@10093\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"162\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"162\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1049([match_def@[#3316]#3346])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"m@10093\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"162\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"m@10093\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"162\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":1048,"args":{"any":[0]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4100]","target":1047,"args":{"any":[]}}}]},
{"label":"1050([match_std/core/types/Nothing@[#3316]#3349])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"m@10093\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: ' '","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":" "},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: ' '","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"m@10093\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1051([#3316])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/char/is-alpha((match (m@10093) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<char> ) as @pat@2: ((maybe :: V -> V)<char>))\n     -> ' ';\n  ((@skip std/core/types/Just((x: char) : char) : (maybe :: V -> V)<char> ) as @pat@0@0: ((maybe :: V -> V)<char>))\n     -> x;\n})))) {\n  ((std/core/types/True() : bool ) as @pat@2@0: bool)\n     -> val b@10096 : bool\n              = std/core/string/(==)(part, \"\");\n    (match (b@10096) {\n      ((std/core/types/True() : bool ) as @pat@3: bool)\n         -> std/core/types/False;\n      ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n         -> std/core/string/contains(\"/\\x5C\", (std/core/sslice/head(part)));\n    });\n  (@pat@5: bool)\n     -> std/core/types/False;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/char/is-alpha((match (m@10093) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<char> ) as @pat@2: ((maybe :: V -> V)<char>))\n     -> ' ';\n  ((@skip std/core/types/Just((x: char) : char) : (maybe :: V -> V)<char> ) as @pat@0@0: ((maybe :: V -> V)<char>))\n     -> x;\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (m@10093) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<char> ) as @pat@2: ((maybe :: V -> V)<char>))\n     -> ' ';\n  ((@skip std/core/types/Just((x: char) : char) : (maybe :: V -> V)<char> ) as @pat@0@0: ((maybe :: V -> V)<char>))\n     -> x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"m@10093\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Push","target":1046,"args":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"m@10093\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (m@10093) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<char> ) as @pat@2: ((maybe :: V -> V)<char>))\n     -> ' ';\n  ((@skip std/core/types/Just((x: char) : char) : (maybe :: V -> V)<char> ) as @pat@0@0: ((maybe :: V -> V)<char>))\n     -> x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/char/is-alpha((match (m@10093) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<char> ) as @pat@2: ((maybe :: V -> V)<char>))\n     -> ' ';\n  ((@skip std/core/types/Just((x: char) : char) : (maybe :: V -> V)<char> ) as @pat@0@0: ((maybe :: V -> V)<char>))\n     -> x;\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/char/is-alpha((match (m@10093) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<char> ) as @pat@2: ((maybe :: V -> V)<char>))\n     -> ' ';\n  ((@skip std/core/types/Just((x: char) : char) : (maybe :: V -> V)<char> ) as @pat@0@0: ((maybe :: V -> V)<char>))\n     -> x;\n})))) {\n  ((std/core/types/True() : bool ) as @pat@2@0: bool)\n     -> val b@10096 : bool\n              = std/core/string/(==)(part, \"\");\n    (match (b@10096) {\n      ((std/core/types/True() : bool ) as @pat@3: bool)\n         -> std/core/types/False;\n      ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n         -> std/core/string/contains(\"/\\x5C\", (std/core/sslice/head(part)));\n    });\n  (@pat@5: bool)\n     -> std/core/types/False;\n}","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Nothing","target":1050,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4101]","target":1049,"args":{"any":[]}}}]},
{"label":"1052([k@[switch case for Bool(true)#3292]#3302])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"New","out":2,"targets":[1036],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":1051,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":3,"to":2},
{"op":"Jump","target":995}]},
{"label":"1053([switch case for Bool(true)#3292])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x160\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val m@10093 : (maybe :: V -> V)<char>\n      = std/core/sslice/foreach-while<char,(total :: E)>((std/core/sslice/Sslice(root, 0, (std/core/sslice/length(root)))), (std/core/types/Just<char>));\nmatch ((std/core/char/is-alpha((match (m@10093) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<char> ) as @pat@2: ((maybe :: V -> V)<char>))\n     -> ' ';\n  ((@skip std/core/types/Just((x: char) : char) : (maybe :: V -> V)<char> ) as @pat@0@0: ((maybe :: V -> V)<char>))\n     -> x;\n})))) {\n  ((std/core/types/True() : bool ) as @pat@2@0: bool)\n     -> val b@10096 : bool\n              = std/core/string/(==)(part, \"\");\n    (match (b@10096) {\n      ((std/core/types/True() : bool ) as @pat@3: bool)\n         -> std/core/types/False;\n      ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n         -> std/core/string/contains(\"/\\x5C\", (std/core/sslice/head(part)));\n    });\n  (@pat@5: bool)\n     -> std/core/types/False;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"m@10093\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/foreach-while<char,(total :: E)>((std/core/sslice/Sslice(root, 0, (std/core/sslice/length(root)))), (std/core/types/Just<char>))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/Sslice(root, 0, (std/core/sslice/length(root)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/length(root)","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"Undefined:  std/core/sslice/length"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":1052,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":3,"to":2},
{"op":"Copy","from":4,"to":3},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/length(root)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/Sslice(root, 0, (std/core/sslice/length(root)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/foreach-while<char,(total :: E)>((std/core/sslice/Sslice(root, 0, (std/core/sslice/length(root)))), (std/core/types/Just<char>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"m@10093\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val m@10093 : (maybe :: V -> V)<char>\n      = std/core/sslice/foreach-while<char,(total :: E)>((std/core/sslice/Sslice(root, 0, (std/core/sslice/length(root)))), (std/core/types/Just<char>));\nmatch ((std/core/char/is-alpha((match (m@10093) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<char> ) as @pat@2: ((maybe :: V -> V)<char>))\n     -> ' ';\n  ((@skip std/core/types/Just((x: char) : char) : (maybe :: V -> V)<char> ) as @pat@0@0: ((maybe :: V -> V)<char>))\n     -> x;\n})))) {\n  ((std/core/types/True() : bool ) as @pat@2@0: bool)\n     -> val b@10096 : bool\n              = std/core/string/(==)(part, \"\");\n    (match (b@10096) {\n      ((std/core/types/True() : bool ) as @pat@3: bool)\n         -> std/core/types/False;\n      ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n         -> std/core/string/contains(\"/\\x5C\", (std/core/sslice/head(part)));\n    });\n  (@pat@5: bool)\n     -> std/core/types/False;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x160\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Jump","target":996}]},
{"label":"1054([switch default case#3352])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@6,{\"op\": \"Var\",\"id\": \"@x160\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Const","format":"bool","out":0,"value":false},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/False","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@6,{\"op\": \"Var\",\"id\": \"@x160\",\"type\": {\"op\": \"Bool\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1055([#3177])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: 1","traced":{"any":[]}},
{"op":"Const","format":"int","out":5,"value":1},
{"op":"PrimOp","name":"infixEq(Int, Int): Boolean","out":{"any":[0]},"in":{"any":[0,5]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Push","target":1035,"args":{"any":[1,2,3,4]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[1053],"default":1054}]},
{"label":"1056([match_std/core/types/Cons@[#3120]#3172])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(root,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"156\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (root: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"156\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"157\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: ((std/core/types/Cons((part: string), (rest: list<string>)) : list<string> ) as @pat@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"157\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(part,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"158\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (part: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"158\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"159\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (rest: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"159\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/int/(==)((std/core/string/count(root)), 1))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> val m@10093 : (maybe :: V -> V)<char>\n              = std/core/sslice/foreach-while<char,(total :: E)>((std/core/sslice/Sslice(root, 0, (std/core/sslice/length(root)))), (std/core/types/Just<char>));\n    (match ((std/core/char/is-alpha((match (m@10093) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<char> ) as @pat@2: ((maybe :: V -> V)<char>))\n         -> ' ';\n      ((@skip std/core/types/Just((x: char) : char) : (maybe :: V -> V)<char> ) as @pat@0@0: ((maybe :: V -> V)<char>))\n         -> x;\n    })))) {\n      ((std/core/types/True() : bool ) as @pat@2@0: bool)\n         -> val b@10096 : bool\n                  = std/core/string/(==)(part, \"\");\n        (match (b@10096) {\n          ((std/core/types/True() : bool ) as @pat@3: bool)\n             -> std/core/types/False;\n          ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n             -> std/core/string/contains(\"/\\x5C\", (std/core/sslice/head(part)));\n        });\n      (@pat@5: bool)\n         -> std/core/types/False;\n    });\n  (@pat@6: bool)\n     -> std/core/types/False;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/(==)((std/core/string/count(root)), 1)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/count(root)","traced":{"any":[]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":1055,"args":{"any":[0,2,3,1]}},
{"op":"Copy","from":4,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/count(root)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/(==)((std/core/string/count(root)), 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/int/(==)((std/core/string/count(root)), 1))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> val m@10093 : (maybe :: V -> V)<char>\n              = std/core/sslice/foreach-while<char,(total :: E)>((std/core/sslice/Sslice(root, 0, (std/core/sslice/length(root)))), (std/core/types/Just<char>));\n    (match ((std/core/char/is-alpha((match (m@10093) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<char> ) as @pat@2: ((maybe :: V -> V)<char>))\n         -> ' ';\n      ((@skip std/core/types/Just((x: char) : char) : (maybe :: V -> V)<char> ) as @pat@0@0: ((maybe :: V -> V)<char>))\n         -> x;\n    })))) {\n      ((std/core/types/True() : bool ) as @pat@2@0: bool)\n         -> val b@10096 : bool\n                  = std/core/string/(==)(part, \"\");\n        (match (b@10096) {\n          ((std/core/types/True() : bool ) as @pat@3: bool)\n             -> std/core/types/False;\n          ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n             -> std/core/string/contains(\"/\\x5C\", (std/core/sslice/head(part)));\n        });\n      (@pat@5: bool)\n         -> std/core/types/False;\n    });\n  (@pat@6: bool)\n     -> std/core/types/False;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(root,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"156\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (root: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"156\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"157\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: ((std/core/types/Cons((part: string), (rest: list<string>)) : list<string> ) as @pat@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"157\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(part,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"158\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (part: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"158\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"159\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (rest: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"159\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":994}]},
{"label":"1057([#3120])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"157\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: ((std/core/types/Cons((part: string), (rest: list<string>)) : list<string> ) as @pat@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"157\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"158\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"159\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"157\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: ((std/core/types/Cons((part: string), (rest: list<string>)) : list<string> ) as @pat@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"157\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"158\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"159\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":2,"clauses":[{"tag":"std/core/types/Cons","target":1056,"args":{"any":[2,3]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4102]","target":1020,"args":{"any":[]}}}]},
{"label":"1058([mcore:[#1571]#3068])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4,5,6]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"156\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"157\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"156\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"157\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":1057,"args":{"any":[1,2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4103]","target":1012,"args":{"any":[]}}}]},
{"label":"1059([mcore:[#1573]#3355])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/vector/vlist"}]},
{"label":"1060([k@[mcore:[#1579]#3361]#3374])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/char)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/string)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Const","format":"string","out":5,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[5]},"in":{"any":[5]}},
{"op":"Const","format":"string","out":6,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[6]},"in":{"any":[6]}},
{"op":"Jump","target":1058}]},
{"label":"1061([mcore:[#1579]#3361])",
"frameDescriptor":{"regs_any":7},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4,5,6]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"s@0@10098\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/replace-all(s, \";\", \":\")","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/string/replace-all"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"v@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/string/splitv(s@0@10098, \":\")","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Undefined:  std/core/string/splitv"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/paths-collect((std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@None<(list :: V -> V)<string>>","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":1060,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@None<(list :: V -> V)<string>>","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/paths-collect((std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/splitv(s@0@10098, \":\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"v@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/string/replace-all(s, \";\", \":\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"s@0@10098\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Jump","target":1059}]},
{"label":"1062([mcore:[#1580]#3394])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/show)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/show/string/show"}]},
{"label":"1063([k@[mcore:[#1585]#3399]#3407])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/show)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":1062}]},
{"label":"1064([mcore:[#1585]#3399])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/show/string/show((std/os/path/string(p)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/string(p)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/list)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":1063,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/string(p)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/show/string/show((std/os/path/string(p)))","traced":{"any":[]}},
{"op":"Jump","target":248}]},
{"label":"1065([mcore:[#1586]#3412])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/sslice/find-last"}]},
{"label":"1066([mcore:[#1594]#3418])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"1067([mcore:[#1596]#3424])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/sslice/string"}]},
{"label":"1068([mcore:[#1599]#3429])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"CallLib","lib":3,"symbol":"std/core/sslice/Sslice"}]},
{"label":"1069([mcore:[#1606]#3436])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/sslice/string"}]},
{"label":"1070([mcore:[#1608]#3441])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/sslice/after"}]},
{"label":"1071([mcore:[#1613]#3446])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"1072([mcore:[#1620]#3452])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/types/Tuple2"}]},
{"label":"1073([match_def@[#3470]#3471])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1074([match_std/core/types/Tuple2@[#3470]#3472])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"tuple2@10100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"165\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"165\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"166\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@4: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"166\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"tuple2@10100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"165\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"165\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"166\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@4: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"166\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1075([#3470])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"tuple2@10100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"165\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"166\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"tuple2@10100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"165\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"166\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/tuple2","scrutinee":0,"clauses":[{"tag":"std/core/types/Tuple2","target":1074,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4104]","target":1073,"args":{"any":[]}}}]},
{"label":"1076([match_def@[#3473]#3474])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1077([k@[#3477]#3485])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1078([#3477])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":""},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Jump","target":1072}]},
{"label":"1079([#3487])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1080([k@[#3488]#3490])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1081([match_def@[match_def@[#3488]#3492]#3493])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1082([k@[#3494]#3499])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1083([match_def@[match_def@[#3494]#3501]#3502])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1084([#3503])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@3@0,{\"op\": \"Var\",\"id\": \"@x183\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"184\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"184\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@3@0,{\"op\": \"Var\",\"id\": \"@x183\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"184\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"184\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1085([match_def@[#3494]#3501])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x183\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"184\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x183\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"184\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":1084,"args":{"any":[0]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4105]","target":1083,"args":{"any":[]}}}]},
{"label":"1086([match_std/core/types/Nothing@[#3494]#3504])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4@0,{\"op\": \"Var\",\"id\": \"@x183\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4@0,{\"op\": \"Var\",\"id\": \"@x183\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1087([#3494])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"180\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"180\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n     -> x@1@0;\n}","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x183\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x183\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n     -> x@1@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"180\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"180\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Nothing","target":1086,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4106]","target":1085,"args":{"any":[]}}}]},
{"label":"1088([match_def@[#3488]#3492])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"180\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"180\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"180\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"180\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":1087,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4107]","target":1081,"args":{"any":[]}}}]},
{"label":"1089([match_std/core/types/Cons@[#3488]#3507])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"180\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"180\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"181\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"181\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"182\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"182\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"180\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"180\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"181\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"181\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"182\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"182\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1090([#3488])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0@0,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"179\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"179\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"180\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"180\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@x@0) {\n  ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n     -> x@0@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n         -> x@1@0;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"180\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"180\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"181\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"182\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"180\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"180\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"181\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"182\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@x@0) {\n  ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n     -> x@0@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n         -> x@1@0;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0@0,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"179\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"179\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"180\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"180\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":1089,"args":{"any":[1,2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4108]","target":1088,"args":{"any":[]}}}]},
{"label":"1091([match_std/core/types/Nothing@[#3473]#3475])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"@x165\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<string,string>((match (p) {\n    ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n       -> (match (@x@0) {\n        ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n           -> x@0@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n               -> x@1@0;\n          });\n      });\n  }), \"\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n     -> (match (@x@0) {\n      ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n         -> x@0@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n         -> (match ((std/core/types/Nothing<string>)) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n             -> \"\";\n          ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n             -> x@1@0;\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"179\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"180\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":1078,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"179\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"180\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n     -> (match (@x@0) {\n      ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n         -> x@0@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n         -> (match ((std/core/types/Nothing<string>)) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n             -> \"\";\n          ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n             -> x@1@0;\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<string,string>((match (p) {\n    ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n       -> (match (@x@0) {\n        ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n           -> x@0@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n               -> x@1@0;\n          });\n      });\n  }), \"\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"@x165\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":0,"clauses":[{"tag":"std/os/path/Path","target":1090,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4109]","target":1079,"args":{"any":[]}}}]},
{"label":"1092([#3473])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x165\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x165\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":1,"clauses":[{"tag":"std/core/types/Nothing","target":1091,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4110]","target":1076,"args":{"any":[]}}}]},
{"label":"1093([match_def@[match_def@[#3508]#3509]#3510])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1094([k@[k@[#3511]#3513]#3521])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1095([k@[#3511]#3513])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":""},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Jump","target":1071}]},
{"label":"1096([match_def@[#3511]#3523])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1097([k@[match_std/os/path/Path@[#3511]#3524]#3526])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1098([match_def@[#3528]#3529])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1099([#3535])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1100([match_def@[#3537]#3538])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1101([match_std/core/types/Just@[#3537]#3539])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@3@0,{\"op\": \"Var\",\"id\": \"@x183\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"184\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"184\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@3@0,{\"op\": \"Var\",\"id\": \"@x183\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"184\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"184\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1102([#3537])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x183\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"184\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x183\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"184\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":1101,"args":{"any":[0]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4111]","target":1100,"args":{"any":[]}}}]},
{"label":"1103([#3540])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4@0,{\"op\": \"Var\",\"id\": \"@x183\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4@0,{\"op\": \"Var\",\"id\": \"@x183\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1104([match_std/core/types/Nil@[#3528]#3530])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"180\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"180\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n     -> x@1@0;\n}","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x183\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x183\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n     -> x@1@0;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"180\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"180\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Nothing","target":1103,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4112]","target":1102,"args":{"any":[]}}}]},
{"label":"1105([#3528])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"180\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"180\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"180\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"180\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":1104,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4113]","target":1098,"args":{"any":[]}}}]},
{"label":"1106([#3543])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"180\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"180\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"181\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"181\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"182\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"182\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"180\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"180\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"181\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"181\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"182\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"182\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1107([match_std/os/path/Path@[#3511]#3524])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0@0,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"179\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"179\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"180\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"180\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@x@0) {\n  ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n     -> x@0@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n         -> x@1@0;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"180\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"180\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"181\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"182\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"180\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"180\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"181\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"182\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@x@0) {\n  ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n     -> x@0@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n         -> x@1@0;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0@0,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"179\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"179\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"180\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"180\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":1106,"args":{"any":[1,2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4114]","target":1105,"args":{"any":[]}}}]},
{"label":"1108([#3511])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"@x165\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<string,string>((match (p) {\n    ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n       -> (match (@x@0) {\n        ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n           -> x@0@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n               -> x@1@0;\n          });\n      });\n  }), \"\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n     -> (match (@x@0) {\n      ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n         -> x@0@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n         -> (match ((std/core/types/Nothing<string>)) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n             -> \"\";\n          ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n             -> x@1@0;\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"179\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"180\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":1095,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"179\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"180\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n     -> (match (@x@0) {\n      ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n         -> x@0@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n         -> (match ((std/core/types/Nothing<string>)) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n             -> \"\";\n          ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n             -> x@1@0;\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<string,string>((match (p) {\n    ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n       -> (match (@x@0) {\n        ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n           -> x@0@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n               -> x@1@0;\n          });\n      });\n  }), \"\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"@x165\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":0,"clauses":[{"tag":"std/os/path/Path","target":1107,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4115]","target":1096,"args":{"any":[]}}}]},
{"label":"1109([match_def@[#3508]#3509])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x165\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x165\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":1,"clauses":[{"tag":"std/core/types/Nothing","target":1108,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4116]","target":1093,"args":{"any":[]}}}]},
{"label":"1110([k@[k@[k@[k@[#3546]#3552]#3558]#3564]#3570])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1111([k@[k@[k@[#3546]#3552]#3558]#3564])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":1066}]},
{"label":"1112([k@[k@[#3546]#3552]#3558])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":1111,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Jump","target":1069}]},
{"label":"1113([k@[#3546]#3552])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/string((std/core/sslice/after(slice)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/after(slice)","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":1112,"args":{"any":[0]}},
{"op":"Copy","from":1,"to":0},
{"op":"Copy","from":2,"to":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/after(slice)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/string((std/core/sslice/after(slice)))","traced":{"any":[]}},
{"op":"Jump","target":1070}]},
{"label":"1114([#3546])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":1113,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Jump","target":1067}]},
{"label":"1115([#3572])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1116([k@[#3573]#3580])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1117([#3573])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"172\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"172\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(s,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"176\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"176\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"177\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"177\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"178\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"178\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/Sslice(s, 0, start)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/Sslice(s, 0, start)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"172\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"172\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(s,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"176\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"176\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"177\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"177\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"178\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"178\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Jump","target":1068}]},
{"label":"1118([match_std/core/sslice/Sslice@[#3508]#3544])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x165\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(slice,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"172\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"172\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"173\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"173\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"174\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"174\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"175\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"175\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Tuple2<string,string>((std/core/sslice/string((match (slice) {\n    ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n       -> std/core/sslice/Sslice(s, 0, start);\n  }))), (std/core/sslice/string((std/core/sslice/after(slice)))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/string((match (slice) {\n  ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n     -> std/core/sslice/Sslice(s, 0, start);\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (slice) {\n  ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n     -> std/core/sslice/Sslice(s, 0, start);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"172\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"172\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"176\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"177\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"178\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Push","target":1114,"args":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"172\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"172\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"176\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"177\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"178\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (slice) {\n  ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n     -> std/core/sslice/Sslice(s, 0, start);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/string((match (slice) {\n  ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n     -> std/core/sslice/Sslice(s, 0, start);\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Tuple2<string,string>((std/core/sslice/string((match (slice) {\n    ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n       -> std/core/sslice/Sslice(s, 0, start);\n  }))), (std/core/sslice/string((std/core/sslice/after(slice)))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x165\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(slice,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"172\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"172\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"173\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"173\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"174\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"174\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"175\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"175\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":0,"clauses":[{"tag":"std/core/sslice/Sslice","target":1117,"args":{"any":[0,1,2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4117]","target":1115,"args":{"any":[]}}}]},
{"label":"1119([#3508])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"172\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"172\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"173\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"174\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"175\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"172\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"172\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"173\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"174\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"175\",\"type\": {\"op\": \"Int\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/sslice/sslice","scrutinee":0,"clauses":[{"tag":"std/core/sslice/Sslice","target":1118,"args":{"any":[3,4,5]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4118]","target":1109,"args":{"any":[]}}}]},
{"label":"1120([k@[k@[mcore:[#1627]#3458]#3460]#3468])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x165\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"172\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Push","target":1075,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x165\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"172\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":1119,"args":{"any":[2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4119]","target":1092,"args":{"any":[]}}}]},
{"label":"1121([k@[mcore:[#1627]#3458]#3460])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: \".\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"."},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":1120,"args":{"any":[1]}},
{"op":"Copy","from":2,"to":1},
{"op":"Copy","from":3,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \".\"","traced":{"any":[]}},
{"op":"Jump","target":1065}]},
{"label":"1122([match_def@[mcore:[#1627]#3458]#3582])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1123([k@[#3583]#3585])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1124([match_def@[match_def@[#3583]#3587]#3588])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1125([k@[#3589]#3594])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1126([match_def@[match_def@[#3589]#3596]#3597])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1127([#3598])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0@3,{\"op\": \"Var\",\"id\": \"@x170\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"171\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"171\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0@3,{\"op\": \"Var\",\"id\": \"@x170\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"171\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"171\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1128([match_def@[#3589]#3596])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x170\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"171\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x170\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"171\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":1127,"args":{"any":[0]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4120]","target":1126,"args":{"any":[]}}}]},
{"label":"1129([match_std/core/types/Nothing@[#3589]#3599])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"@x170\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"@x170\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1130([#3589])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"167\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"167\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n     -> x@1;\n}","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"std/core/types/Nothing"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"@x170\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"@x170\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n     -> x@1;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"167\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"167\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Nothing","target":1129,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4121]","target":1128,"args":{"any":[]}}}]},
{"label":"1131([match_def@[#3583]#3587])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"167\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"167\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"167\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"167\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":1130,"args":{"any":[]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4122]","target":1124,"args":{"any":[]}}}]},
{"label":"1132([match_std/core/types/Cons@[#3583]#3602])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"167\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"167\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"168\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"168\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"169\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"169\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"167\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"167\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"168\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"168\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"169\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"169\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1133([#3583])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"166\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"166\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"167\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"167\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@x) {\n  ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n     -> x@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n         -> x@1;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"167\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"167\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"168\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"169\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"167\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"167\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"168\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"169\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@x) {\n  ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n     -> x@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n         -> x@1;\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"166\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"166\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"167\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"167\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":1132,"args":{"any":[1,2]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4123]","target":1131,"args":{"any":[]}}}]},
{"label":"1134([mcore:[#1627]#3458])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"tuple2@10100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match ((std/core/sslice/find-last((match (p) {\n    ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n       -> (match (@x) {\n        ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n           -> x@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n               -> x@1;\n          });\n      });\n  }), \".\"))) {\n  ((std/core/types/Just(((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as slice: sslice/sslice) : sslice/sslice) : (maybe :: V -> V)<sslice/sslice> ) as @pat: ((maybe :: V -> V)<sslice/sslice>))\n     -> std/core/types/Tuple2<string,string>((std/core/sslice/string((match (slice) {\n        ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n           -> std/core/sslice/Sslice(s, 0, start);\n      }))), (std/core/sslice/string((std/core/sslice/after(slice)))));\n  ((@skip std/core/types/Nothing() : (maybe :: V -> V)<sslice/sslice> ) as @pat@3@0: ((maybe :: V -> V)<sslice/sslice>))\n     -> std/core/types/Tuple2<string,string>((match (p) {\n        ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n           -> (match (@x@0) {\n            ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n               -> x@0@0;\n            ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n               -> (match ((std/core/types/Nothing<string>)) {\n                ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n                   -> \"\";\n                ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n                   -> x@1@0;\n              });\n          });\n      }), \"\");\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/sslice/find-last((match (p) {\n    ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n       -> (match (@x) {\n        ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n           -> x@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n               -> x@1;\n          });\n      });\n  }), \".\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n     -> (match (@x) {\n      ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n         -> x@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n         -> (match ((std/core/types/Nothing<string>)) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n             -> \"\";\n          ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n             -> x@1;\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"166\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"167\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":1121,"args":{"any":[0]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"166\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"167\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n     -> (match (@x) {\n      ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n         -> x@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n         -> (match ((std/core/types/Nothing<string>)) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n             -> \"\";\n          ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n             -> x@1;\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/sslice/find-last((match (p) {\n    ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n       -> (match (@x) {\n        ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n           -> x@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n               -> x@1;\n          });\n      });\n  }), \".\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match ((std/core/sslice/find-last((match (p) {\n    ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n       -> (match (@x) {\n        ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n           -> x@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n               -> x@1;\n          });\n      });\n  }), \".\"))) {\n  ((std/core/types/Just(((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as slice: sslice/sslice) : sslice/sslice) : (maybe :: V -> V)<sslice/sslice> ) as @pat: ((maybe :: V -> V)<sslice/sslice>))\n     -> std/core/types/Tuple2<string,string>((std/core/sslice/string((match (slice) {\n        ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n           -> std/core/sslice/Sslice(s, 0, start);\n      }))), (std/core/sslice/string((std/core/sslice/after(slice)))));\n  ((@skip std/core/types/Nothing() : (maybe :: V -> V)<sslice/sslice> ) as @pat@3@0: ((maybe :: V -> V)<sslice/sslice>))\n     -> std/core/types/Tuple2<string,string>((match (p) {\n        ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n           -> (match (@x@0) {\n            ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n               -> x@0@0;\n            ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n               -> (match ((std/core/types/Nothing<string>)) {\n                ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n                   -> \"\";\n                ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n                   -> x@1@0;\n              });\n          });\n      }), \"\");\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"tuple2@10100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}","traced":{"any":[]}},
{"op":"Match","type":"std/os/path/path","scrutinee":0,"clauses":[{"tag":"std/os/path/Path","target":1133,"args":{"any":[0,1]}}],"default":{"tag":"60e19e69-ea12-43ba-b177-acb49d50aa6e#[Missing Tag#4124]","target":1122,"args":{"any":[]}}}]},
{"label":"1135([mcore:[#1629]#3603])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/hnd/@open-none1"}]},
{"label":"1136([#3614])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/sslice)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/types)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/vector)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/text/parse)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Jump","target":320}]},
{"label":"1137([k@[mcore:[#1633]#3609]#3611])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@open-none1<string,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>(std/os/path/path, @x-x1@10157)","traced":{"any":[]}},
{"op":"New","out":1,"targets":[1136],"args":{"any":[]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@open-none1<string,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>(std/os/path/path, @x-x1@10157)","traced":{"any":[]}},
{"op":"Jump","target":1135}]},
{"label":"1138([mcore:[#1633]#3609])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"@x-x1@10157\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/path/xtempdir()","traced":{"any":[]}},
{"op":"Push","target":1137,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/path/xtempdir()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"@x-x1@10157\",\"type\": {\"op\": \"String\"}}","traced":{"any":[]}},
{"op":"Jump","target":139}]},
{"label":"1139([mcore:[#1634]#16])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Construct","out":0,"type":"std/os/path/path","tag":"std/os/path/Path","args":{"any":[0,1]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1140([k@[k@[k@[k@[#3793]#3803]#3813]#3823]#3833])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"ThisLib_055100bd-0f0f-4b95-bd59-21fafa8d44dd"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Copy","from":2,"to":0},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1141([k@[k@[k@[#3793]#3803]#3813]#3823])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#767]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_text_parse.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/text/parse)"},
{"op":"Push","target":1140,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"1142([k@[k@[#3793]#3803]#3813])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#766]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core)"},
{"op":"Push","target":1141,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"1143([k@[#3793]#3803])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#765]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_console.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/console)"},
{"op":"Push","target":1142,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"1144([#3793])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#764]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_delayed.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/delayed)"},
{"op":"Push","target":1143,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"1145([k@[k@[k@[k@[#3743]#3753]#3763]#3773]#3783])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#763]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_debug.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/debug)"},
{"op":"Push","target":1144,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"1146([k@[k@[k@[#3743]#3753]#3763]#3773])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#762]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_show.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/show)"},
{"op":"Push","target":1145,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"1147([k@[k@[#3743]#3753]#3763])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#761]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_tuple.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/tuple)"},
{"op":"Push","target":1146,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"1148([k@[#3743]#3753])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#760]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_either.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/either)"},
{"op":"Push","target":1147,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"1149([#3743])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#759]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_maybe.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/maybe)"},
{"op":"Push","target":1148,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"1150([k@[k@[k@[k@[#3693]#3703]#3713]#3723]#3733])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#758]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_list.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/list)"},
{"op":"Push","target":1149,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"1151([k@[k@[k@[#3693]#3703]#3713]#3723])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#757]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_sslice.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/sslice)"},
{"op":"Push","target":1150,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"1152([k@[k@[#3693]#3703]#3713])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#756]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_string.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/string)"},
{"op":"Push","target":1151,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"1153([k@[#3693]#3703])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#755]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_vector.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/vector)"},
{"op":"Push","target":1152,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"1154([#3693])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#754]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_int.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/int)"},
{"op":"Push","target":1153,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"1155([k@[k@[k@[k@[#3643]#3653]#3663]#3673]#3683])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#753]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_char.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/char)"},
{"op":"Push","target":1154,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"1156([k@[k@[k@[#3643]#3653]#3663]#3673])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#752]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_order.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/order)"},
{"op":"Push","target":1155,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"1157([k@[k@[#3643]#3653]#3663])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#751]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_bool.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/bool)"},
{"op":"Push","target":1156,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"1158([k@[#3643]#3653])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#750]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_exn.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/exn)"},
{"op":"Push","target":1157,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"1159([#3643])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#749]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_hnd.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"Push","target":1158,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"1160([mcore:[static initializers#1694]#3633])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"[#748]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_types.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,2]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"Push","target":1159,"args":{"any":[1,0]}},
{"op":"LoadLib","path":2}]},
{"label":"1161([k@[main entrypoint#2]#3841])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Undefined: is a library"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1162([main entrypoint#2])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Copy","from":-1,"to":0},
{"op":"Push","target":1161,"args":{"any":[]}},
{"op":"Jump","target":1160}]}],
"symbols":[{"name":"std/os/path/path/root","position":2},
{"name":"std/os/path/path/parts","position":5},
{"name":"std/os/path/path/@copy","position":22},
{"name":"std/os/path/xapp-path","position":23},
{"name":"std/os/path/basename","position":36},
{"name":"std/os/path/nobase","position":53},
{"name":"std/os/path/split-parts","position":70},
{"name":"std/os/path/xrealpath","position":71},
{"name":"std/os/path/dirname","position":93},
{"name":"std/os/path/dirparts","position":98},
{"name":"std/os/path/xhomedir","position":99},
{"name":"std/os/path/nodir","position":115},
{"name":"std/os/path/parentname","position":133},
{"name":"std/os/path/partsep","position":134},
{"name":"std/os/path/pathsep","position":135},
{"name":"std/os/path/rootname","position":138},
{"name":"std/os/path/xtempdir","position":139},
{"name":"std/os/path/is-empty","position":151},
{"name":"std/os/path/(||)","position":163},
{"name":"std/os/path/push-part","position":188},
{"name":"std/os/path/push-parts","position":195},
{"name":"std/os/path/proot","position":226},
{"name":"std/os/path/string","position":248},
{"name":"std/os/path/@create-Path","position":259},
{"name":"std/os/path/path-parts","position":268},
{"name":"std/os/path/path","position":320},
{"name":"std/os/path/(/)","position":340},
{"name":"std/os/path/app-path","position":344},
{"name":"std/os/path/appdir","position":448},
{"name":"std/os/path/change-base","position":475},
{"name":"std/os/path/split-base","position":503},
{"name":"std/os/path/change-ext","position":642},
{"name":"std/os/path/extname","position":712},
{"name":"std/os/path/change-stem","position":821},
{"name":"std/os/path/pathstring/(/)","position":842},
{"name":"std/os/path/string/(/)","position":864},
{"name":"std/os/path/combine","position":885},
{"name":"std/os/path/string/realpath","position":889},
{"name":"std/os/path/realpath","position":896},
{"name":"std/os/path/cwd","position":900},
{"name":"std/os/path/default-ext","position":976},
{"name":"std/os/path/homedir","position":980},
{"name":"std/os/path/is-relative","position":984},
{"name":"std/os/path/is-absolute","position":992},
{"name":"std/os/path/noext","position":993},
{"name":"std/os/path/paths-collect","position":1058},
{"name":"std/os/path/paths","position":1061},
{"name":"std/os/path/show","position":1064},
{"name":"std/os/path/stemname","position":1134},
{"name":"std/os/path/tempdir","position":1138},
{"name":"std/os/path/Path","position":1139},
{"name":"$static-init","position":1160},
{"name":"$entrypoint","position":1162}],
"frameSize":{"regs_any":16}}