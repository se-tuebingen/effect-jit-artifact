{"metadata": {"generated by": "Koka","koka version": "3.1.2","program name": "std/core"},"includes": [],"definitions": [{"name": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_types.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/undiv","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_undiv.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/unsafe","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_unsafe.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_hnd.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/exn","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_exn.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/bool","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_bool.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/order","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_order.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/char","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_char.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/int","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_int.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/vector","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_vector.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/string","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_string.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_sslice.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/list","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_list.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/maybe","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_maybe.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/either","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_either.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/tuple","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_tuple.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/show","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_show.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/debug","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_debug.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/delayed","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_delayed.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/console","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_console.rpyeffect"}}}, {"name": {"op": "Var","id": "std/core/stream/head","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/stream"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "stream","type": {"op": "Ptr","extern_ptr_name": "std/core/stream"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "stream","type": {"op": "Ptr","extern_ptr_name": "std/core/stream"}},"type_tag": "std/core/stream","clauses": [{"tag": "std/core/Next","params": [{"op": "Var","id": "@\"head\"0","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"1","type": {"op": "Ptr","extern_ptr_name": "std/core/stream"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"0","type": {"op": "Top"}},"annotation": "genTest: normal: (@x: 187) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"0\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"stream\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"0\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x: 187) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}},\"annotation\": \"genTest: normal: (@pat@0: stream<187>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/stream\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"stream\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}}: \"std/core/stream\".\"std/core/Next\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"0\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(stream: (stream :: V -> V)<a>){\n  (match (stream) {\n    ((@skip std/core/Next((@x: a) : a, (@pat@0: (stream :: V -> V)<a>) : (stream :: V -> V)<a>) : (stream :: V -> V)<a> ) as @pat: ((stream :: V -> V)<a>))\n       -> @x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/stream/head\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/stream/head"]}, {"name": {"op": "Var","id": "std/core/stream/tail","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/stream"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/stream"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "stream","type": {"op": "Ptr","extern_ptr_name": "std/core/stream"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "stream","type": {"op": "Ptr","extern_ptr_name": "std/core/stream"}},"type_tag": "std/core/stream","clauses": [{"tag": "std/core/Next","params": [{"op": "Var","id": "@\"head\"2","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"3","type": {"op": "Ptr","extern_ptr_name": "std/core/stream"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/stream"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"3","type": {"op": "Ptr","extern_ptr_name": "std/core/stream"}},"annotation": "genTest: normal: (@x: stream<203>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"stream\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"2\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: 203) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}},\"annotation\": \"genTest: normal: (@x: stream<203>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/stream\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"stream\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}}: \"std/core/stream\".\"std/core/Next\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"2\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(stream: (stream :: V -> V)<a>){\n  (match (stream) {\n    ((@skip std/core/Next((@pat@0: a) : a, (@x: (stream :: V -> V)<a>) : (stream :: V -> V)<a>) : (stream :: V -> V)<a> ) as @pat: ((stream :: V -> V)<a>))\n       -> @x;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/stream/tail\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/stream/tail"]}, {"name": {"op": "Var","id": "std/core/stream/@copy","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/stream"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Ptr","extern_ptr_name": "std/core/stream"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "std/core/stream"}}, {"op": "Var","id": "head","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}, {"op": "Var","id": "tail","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/Next","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "std/core/stream"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/stream"},"purity": "Effectful"}},"annotation": "genExpr: std/core/Next<a>"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "head","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"4","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"4","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-head@220: 244) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"4\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-head@220"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"head\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-head@220,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"4\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-head@220: 244) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"head\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"4\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "head","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "std/core/stream"}},"type_tag": "std/core/stream","clauses": [{"tag": "std/core/Next","params": [{"op": "Var","id": "@\"head\"5","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"6","type": {"op": "Ptr","extern_ptr_name": "std/core/stream"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"5","type": {"op": "Top"}},"annotation": "genTest: normal: (@x: 244) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"5\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"5\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x: 244) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"5\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}},\"annotation\": \"genTest: normal: (@pat@0@0: stream<244>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"6\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/stream\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}}: \"std/core/stream\".\"std/core/Next\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"5\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@this) {\n  ((@skip std/core/Next((@x: 244) : a, (@pat@0@0: (stream :: V -> V)<244>) : (stream :: V -> V)<a>) : (stream :: V -> V)<a> ) as @pat@1: ((stream :: V -> V)<244>))\n     -> @x;\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"head\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"head\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (head) {\n  ((std/core/types/@Optional((@uniq-head@220: 244) : a) : ? a ) as @pat: ? 244)\n     -> @uniq-head@220;\n  ((@skip std/core/types/@None() : ? a ) as @pat@0: ? 244)\n     -> (match (@this) {\n      ((@skip std/core/Next((@x: 244) : a, (@pat@0@0: (stream :: V -> V)<244>) : (stream :: V -> V)<a>) : (stream :: V -> V)<a> ) as @pat@1: ((stream :: V -> V)<244>))\n         -> @x;\n    });\n}"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "tail","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"7","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/stream"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"7","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-tail@231: stream<244>) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"7\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-tail@231"}}]},"annotation": "genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"tail\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-tail@231,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"7\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-tail@231: stream<244>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"7\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"tail\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"7\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "tail","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/stream"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "std/core/stream"}},"type_tag": "std/core/stream","clauses": [{"tag": "std/core/Next","params": [{"op": "Var","id": "@\"head\"8","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"9","type": {"op": "Ptr","extern_ptr_name": "std/core/stream"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/stream"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"9","type": {"op": "Ptr","extern_ptr_name": "std/core/stream"}},"annotation": "genTest: normal: (@x@0: stream<244>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}}"},"annotation": "genExpr: @x@0"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"8\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@1: 244) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}},\"annotation\": \"genTest: normal: (@x@0: stream<244>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"9\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/stream\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}}: \"std/core/stream\".\"std/core/Next\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"8\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@this) {\n  ((@skip std/core/Next((@pat@0@1: 244) : a, (@x@0: (stream :: V -> V)<244>) : (stream :: V -> V)<a>) : (stream :: V -> V)<a> ) as @pat@3: ((stream :: V -> V)<244>))\n     -> @x@0;\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"tail\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"tail\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (tail) {\n  ((std/core/types/@Optional((@uniq-tail@231: (stream :: V -> V)<244>) : (stream :: V -> V)<a>) : ? ((stream :: V -> V)<a>) ) as @pat@1@0: ? ((stream :: V -> V)<244>))\n     -> @uniq-tail@231;\n  ((@skip std/core/types/@None() : ? ((stream :: V -> V)<a>) ) as @pat@2: ? ((stream :: V -> V)<244>))\n     -> (match (@this) {\n      ((@skip std/core/Next((@pat@0@1: 244) : a, (@x@0: (stream :: V -> V)<244>) : (stream :: V -> V)<a>) : (stream :: V -> V)<a> ) as @pat@3: ((stream :: V -> V)<244>))\n         -> @x@0;\n    });\n}"}]},"annotation": "genExpr: std/core/Next<a>((match (head) {\n    ((std/core/types/@Optional((@uniq-head@220: 244) : a) : ? a ) as @pat: ? 244)\n       -> @uniq-head@220;\n    ((@skip std/core/types/@None() : ? a ) as @pat@0: ? 244)\n       -> (match (@this) {\n        ((@skip std/core/Next((@x: 244) : a, (@pat@0@0: (stream :: V -> V)<244>) : (stream :: V -> V)<a>) : (stream :: V -> V)<a> ) as @pat@1: ((stream :: V -> V)<244>))\n           -> @x;\n      });\n  }), (match (tail) {\n    ((std/core/types/@Optional((@uniq-tail@231: (stream :: V -> V)<244>) : (stream :: V -> V)<a>) : ? ((stream :: V -> V)<a>) ) as @pat@1@0: ? ((stream :: V -> V)<244>))\n       -> @uniq-tail@231;\n    ((@skip std/core/types/@None() : ? ((stream :: V -> V)<a>) ) as @pat@2: ? ((stream :: V -> V)<244>))\n       -> (match (@this) {\n        ((@skip std/core/Next((@pat@0@1: 244) : a, (@x@0: (stream :: V -> V)<244>) : (stream :: V -> V)<a>) : (stream :: V -> V)<a> ) as @pat@3: ((stream :: V -> V)<244>))\n           -> @x@0;\n      });\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(@this: (stream :: V -> V)<a>, head: ? a, tail: ? ((stream :: V -> V)<a>)){\n  std/core/Next<a>((match (head) {\n      ((std/core/types/@Optional((@uniq-head@220: a) : a) : ? a ) as @pat: ? a)\n         -> @uniq-head@220;\n      ((@skip std/core/types/@None() : ? a ) as @pat@0: ? a)\n         -> (match (@this) {\n          ((@skip std/core/Next((@x: a) : a, (@pat@0@0: (stream :: V -> V)<a>) : (stream :: V -> V)<a>) : (stream :: V -> V)<a> ) as @pat@1: ((stream :: V -> V)<a>))\n             -> @x;\n        });\n    }), (match (tail) {\n      ((std/core/types/@Optional((@uniq-tail@231: (stream :: V -> V)<a>) : (stream :: V -> V)<a>) : ? ((stream :: V -> V)<a>) ) as @pat@1@0: ? ((stream :: V -> V)<a>))\n         -> @uniq-tail@231;\n      ((@skip std/core/types/@None() : ? ((stream :: V -> V)<a>) ) as @pat@2: ? ((stream :: V -> V)<a>))\n         -> (match (@this) {\n          ((@skip std/core/Next((@pat@0@1: a) : a, (@x@0: (stream :: V -> V)<a>) : (stream :: V -> V)<a>) : (stream :: V -> V)<a> ) as @pat@3: ((stream :: V -> V)<a>))\n             -> @x@0;\n        });\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/stream/@copy\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/stream\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/stream/@copy"]}, {"name": {"op": "Var","id": "std/core/@default-exn","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/exn","type": {"op": "Ptr"}},"name": "std/core/exn/@handle-exn","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/exn/exn"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/exn/@handle-exn<(),<(console/console :: X)|(e :: E)>,()>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/exn","type": {"op": "Ptr"}},"name": "std/core/exn/@Hnd-exn","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/exn/exn"},"purity": "Effectful"}},"annotation": "genExpr: std/core/exn/@Hnd-exn<<(console/console :: X)|(e :: E)>,()>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/Clause1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/hnd/clause1"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),<(console/console :: X)|(e :: E)>,()>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}}, {"op": "Var","id": "@_wildcard-x696_16","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/ev"}}, {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/yield-to-final","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}, {"op": "Function","params": [{"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/yield-to-final<a,<(console/console :: X)|(e :: E)>,<(console/console :: X)|(e :: E)>,()>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "m","type": {"op": "Ptr","extern_ptr_name": "std/core/hnd/marker"}},"annotation": "genExpr: m"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@_wildcard-x696_45","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/hnd/resume-result"}],"return": {"op": "Unit"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/console","type": {"op": "Ptr"}},"name": "std/core/console/prints","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: std/core/console/prints"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "uncaught exception: "},"annotation": "genExpr: \"uncaught exception: \""}]},"annotation": "genExpr: std/core/console/prints(\"uncaught exception: \")"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/console","type": {"op": "Ptr"}},"name": "std/core/console/printsln","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: std/core/console/printsln"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/exn","type": {"op": "Ptr"}},"name": "std/core/exn/show","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/exn/show"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Ptr","extern_ptr_name": "std/core/exn/exception"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: std/core/exn/show(x)"}]},"annotation": "genExpr: std/core/console/printsln((std/core/exn/show(x)))"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(console/console :: X)|(e :: E)>>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<387,()>) -> <(console/console :: X)|(398 :: E)> ()){\n  val _ : ()\n        = std/core/console/prints(\"uncaught exception: \");\n  std/core/console/printsln((std/core/exn/show(x)));\n}"}]},"annotation": "genExpr: std/core/hnd/yield-to-final<a,<(console/console :: X)|(e :: E)>,<(console/console :: X)|(e :: E)>,()>(m, (fn<<(console/console :: X)|(e :: E)>>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<387,()>) -> <(console/console :: X)|(398 :: E)> ()){\n    val _ : ()\n          = (std/core/console/prints(\"uncaught exception: \"));\n    (std/core/console/printsln((std/core/exn/show(x))));\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(console/console :: X)|(e :: E)>>(m: (hnd/marker :: (E, V) -> V)<<(console/console :: X)|(398 :: E)>,()>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n  std/core/hnd/yield-to-final<a,<(console/console :: X)|(e :: E)>,<(console/console :: X)|(e :: E)>,()>(m, (fn<<(console/console :: X)|(e :: E)>>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<387,()>) -> <(console/console :: X)|(398 :: E)> ()){\n      val _ : ()\n            = (std/core/console/prints(\"uncaught exception: \"));\n      (std/core/console/printsln((std/core/exn/show(x))));\n    }));\n}"}]},"annotation": "genExpr: std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),<(console/console :: X)|(e :: E)>,()>((fn<<(console/console :: X)|(e :: E)>>(m: (hnd/marker :: (E, V) -> V)<<(console/console :: X)|(398 :: E)>,()>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n  (std/core/hnd/yield-to-final<a,<(console/console :: X)|(e :: E)>,<(console/console :: X)|(e :: E)>,()>(m, (fn<<(console/console :: X)|(e :: E)>>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<387,()>) -> <(console/console :: X)|(398 :: E)> ()){\n      val _ : ()\n            = (std/core/console/prints(\"uncaught exception: \"));\n      (std/core/console/printsln((std/core/exn/show(x))));\n    })));\n}))"},"annotation": "genExpr: forall<a> std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),<(console/console :: X)|(e :: E)>,()>((fn<<(console/console :: X)|(e :: E)>>(m: (hnd/marker :: (E, V) -> V)<<(console/console :: X)|(398 :: E)>,()>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n  (std/core/hnd/yield-to-final<a,<(console/console :: X)|(e :: E)>,<(console/console :: X)|(e :: E)>,()>(m, (fn<<(console/console :: X)|(e :: E)>>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,()>) -> <(console/console :: X)|(398 :: E)> ()){\n      val _ : ()\n            = (std/core/console/prints(\"uncaught exception: \"));\n      (std/core/console/printsln((std/core/exn/show(x))));\n    })));\n}))"}]},"annotation": "genExpr: std/core/exn/@Hnd-exn<<(console/console :: X)|(e :: E)>,()>(0, (forall<a> std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),<(console/console :: X)|(e :: E)>,()>((fn<<(console/console :: X)|(e :: E)>>(m: (hnd/marker :: (E, V) -> V)<<(console/console :: X)|(398 :: E)>,()>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n    (std/core/hnd/yield-to-final<a,<(console/console :: X)|(e :: E)>,<(console/console :: X)|(e :: E)>,()>(m, (fn<<(console/console :: X)|(e :: E)>>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,()>) -> <(console/console :: X)|(398 :: E)> ()){\n        val _ : ()\n              = (std/core/console/prints(\"uncaught exception: \"));\n        (std/core/console/printsln((std/core/exn/show(x))));\n      })));\n  }))))"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@x","type": {"op": "Unit"}}],"body": {"op": "Var","id": "@x","type": {"op": "Unit"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(console/console :: X)|(e :: E)>>(@x: ()){\n  @x;\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: action"}]},"annotation": "genExpr: std/core/exn/@handle-exn<(),<(console/console :: X)|(e :: E)>,()>((std/core/exn/@Hnd-exn<<(console/console :: X)|(e :: E)>,()>(0, (forall<a> std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),<(console/console :: X)|(e :: E)>,()>((fn<<(console/console :: X)|(e :: E)>>(m: (hnd/marker :: (E, V) -> V)<<(console/console :: X)|(398 :: E)>,()>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n      (std/core/hnd/yield-to-final<a,<(console/console :: X)|(e :: E)>,<(console/console :: X)|(e :: E)>,()>(m, (fn<<(console/console :: X)|(e :: E)>>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,()>) -> <(console/console :: X)|(398 :: E)> ()){\n          val _ : ()\n                = (std/core/console/prints(\"uncaught exception: \"));\n          (std/core/console/printsln((std/core/exn/show(x))));\n        })));\n    }))))), (fn<<(console/console :: X)|(e :: E)>>(@x: ()){\n    @x;\n  }), action)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E)> fn<<(console/console :: X)|(e :: E)>>(action: () -> <(exn :: (E, V) -> V),(console/console :: X)|(e :: E)> ()){\n  std/core/exn/@handle-exn<(),<(console/console :: X)|(e :: E)>,()>((std/core/exn/@Hnd-exn<<(console/console :: X)|(e :: E)>,()>(0, (forall<a> std/core/hnd/Clause1<exception,a,(exn :: (E, V) -> V),<(console/console :: X)|(e :: E)>,()>((fn<<(console/console :: X)|(e :: E)>>(m: (hnd/marker :: (E, V) -> V)<<(console/console :: X)|(e :: E)>,()>, @_wildcard-x696_16: (hnd/ev :: ((E, V) -> V) -> V)<(exn :: (E, V) -> V)>, x: exception){\n        (std/core/hnd/yield-to-final<a,<(console/console :: X)|(e :: E)>,<(console/console :: X)|(e :: E)>,()>(m, (fn<<(console/console :: X)|(e :: E)>>(@_wildcard-x696_45: ((hnd/resume-result :: (V, V) -> V)<a,()>) -> <(console/console :: X)|(e :: E)> ()){\n            val _ : ()\n                  = (std/core/console/prints(\"uncaught exception: \"));\n            (std/core/console/printsln((std/core/exn/show(x))));\n          })));\n      }))))), (fn<<(console/console :: X)|(e :: E)>>(@x: ()){\n      @x;\n    }), action);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/@default-exn\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/@default-exn"]}, {"name": {"op": "Var","id": "std/core/cmp/(==)","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Top"}}, {"op": "Var","id": "y","type": {"op": "Top"}}, {"op": "Var","id": "@implicit/cmp","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x10","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "@implicit/cmp","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}},"annotation": "genExpr: ?cmp"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Top"}},"annotation": "genExpr: y"}]},"annotation": "genExpr: ?cmp(x, y)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x10","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"type_tag": "std/core/types/order","clauses": [{"tag": "std/core/types/Eq","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x10\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x10\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}}: \"std/core/types/order\".\"std/core/types/Eq\"(())"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x10\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(x: a, y: a, @implicit/cmp: (a, a) -> order){\n  (match ((?cmp(x, y))) {\n    ((std/core/types/Eq() : order ) as @pat: order)\n       -> std/core/types/True;\n    (@pat@0: order)\n       -> std/core/types/False;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/cmp/(==)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/cmp/(==)"]}, {"name": {"op": "Var","id": "std/core/apply","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "x","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: f(x)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,(e :: E)> fn<(e :: E)>(f: (a) -> (e :: E) b, x: a){\n  f(x);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/apply\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/apply"]}, {"name": {"op": "Var","id": "std/core/const","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "default","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@_wildcard-x103_6","type": {"op": "Top"}}],"body": {"op": "Var","id": "default","type": {"op": "Top"}}},"annotation": "genPure: pure lambda in core code"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b> fn(default: a){\n  fn(@_wildcard-x103_6: b){\n    default;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/const\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/const"]}, {"name": {"op": "Var","id": "std/core/host","type": {"op": "Function","params": [],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "Primitive","name": "!sexp:\"vm\"","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "String"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "String"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(ndet :: X)>(){\n  std/core/@extern-host();\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/host\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/host"]}, {"name": {"op": "Var","id": "std/core/ignore","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Top"}}],"body": {"op": "Literal","type": {"op": "Unit"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(x: a){\n  std/core/types/Unit;\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/ignore\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/ignore"]}, {"name": {"op": "Var","id": "std/core/main-console","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "main","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/@extern-main-console","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "main","type": {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: main"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/@extern-main-console<a,(e :: E)>(main)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(main: () -> (e :: E) a){\n  std/core/@extern-main-console<a,(e :: E)>(main);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/main-console\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/main-console"]}, {"name": {"op": "Var","id": "std/core/o","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}, {"op": "Var","id": "g","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "g","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: g"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: g(x)"}]},"annotation": "genExpr: f((g(x)))"}},"annotation": "genPure: pure lambda in core code"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,b,c,(e :: E)> fn(f: (a) -> (e :: E) b, g: (c) -> (e :: E) a){\n  fn<(e :: E)>(x: c){\n    f((g(x)));\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/o\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/o"]}, {"name": {"op": "Var","id": "std/core/same-type","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Top"}}, {"op": "Var","id": "y","type": {"op": "Top"}}],"body": {"op": "Var","id": "x","type": {"op": "Top"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(x: a, y: a){\n  x;\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/same-type\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/same-type"]}, {"name": {"op": "Var","id": "std/core/unique-count","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "mkRef(Ptr): Ref[Ptr]","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}}},"annotation": "genExpr: std/core/types/ref<int,(global :: H)>(0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/unique-count\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"ref\\\"\"}}"},"export_as": ["std/core/unique-count"]}, {"name": {"op": "Var","id": "std/core/(!=)","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Top"}}, {"op": "Var","id": "y","type": {"op": "Top"}}, {"op": "Var","id": "@implicit/(==)","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "b@10003","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "@implicit/(==)","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: ?(==)"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Top"}},"annotation": "genExpr: y"}]},"annotation": "genExpr: ?(==)(x, y)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"b@10003\",\"type\": {\"op\": \"Bool\"}}"},"export_as": ["b@10003"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "b@10003","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"b@10003\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "b@10003","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"b@10003\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(x: a, y: a, @implicit/(==): (a, a) -> bool){\n  val b@10003 : bool\n        = ?(==)(x, y);\n  (match (b@10003) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/types/False;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/core/types/True;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/(!=)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/(!=)"]}, {"name": {"op": "Var","id": "std/core/(<)","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Top"}}, {"op": "Var","id": "y","type": {"op": "Top"}}, {"op": "Var","id": "@implicit/cmp","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/order","type": {"op": "Ptr"}},"name": "std/core/order/(==)","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"order\""}, {"op": "Ptr","extern_ptr_name": "\"order\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: std/core/order/(==)"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "@implicit/cmp","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}},"annotation": "genExpr: ?cmp"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Top"}},"annotation": "genExpr: y"}]},"annotation": "genExpr: ?cmp(x, y)"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Lt","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"annotation": "genExpr: std/core/types/Lt"}]},"annotation": "genExpr: std/core/order/(==)((?cmp(x, y)), std/core/types/Lt)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(x: a, y: a, @implicit/cmp: (a, a) -> order){\n  std/core/order/(==)((?cmp(x, y)), std/core/types/Lt);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/(<)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/(<)"]}, {"name": {"op": "Var","id": "std/core/(>)","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Top"}}, {"op": "Var","id": "y","type": {"op": "Top"}}, {"op": "Var","id": "@implicit/cmp","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/order","type": {"op": "Ptr"}},"name": "std/core/order/(==)","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"order\""}, {"op": "Ptr","extern_ptr_name": "\"order\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: std/core/order/(==)"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "@implicit/cmp","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}},"annotation": "genExpr: ?cmp"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Top"}},"annotation": "genExpr: y"}]},"annotation": "genExpr: ?cmp(x, y)"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Gt","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"annotation": "genExpr: std/core/types/Gt"}]},"annotation": "genExpr: std/core/order/(==)((?cmp(x, y)), std/core/types/Gt)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(x: a, y: a, @implicit/cmp: (a, a) -> order){\n  std/core/order/(==)((?cmp(x, y)), std/core/types/Gt);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/(>)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/(>)"]}, {"name": {"op": "Var","id": "std/core/(<=)","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Top"}}, {"op": "Var","id": "y","type": {"op": "Top"}}, {"op": "Var","id": "@implicit/cmp","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/order","type": {"op": "Ptr"}},"name": "std/core/order/(==)","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"order\""}, {"op": "Ptr","extern_ptr_name": "\"order\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: std/core/order/(==)"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "@implicit/cmp","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}},"annotation": "genExpr: ?cmp"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Top"}},"annotation": "genExpr: y"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: ?cmp(y, x)"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Gt","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"annotation": "genExpr: std/core/types/Gt"}]},"annotation": "genExpr: std/core/order/(==)((?cmp(y, x)), std/core/types/Gt)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(x: a, y: a, @implicit/cmp: (a, a) -> order){\n  std/core/order/(==)((?cmp(y, x)), std/core/types/Gt);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/(<=)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/(<=)"]}, {"name": {"op": "Var","id": "std/core/(>=)","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "x","type": {"op": "Top"}}, {"op": "Var","id": "y","type": {"op": "Top"}}, {"op": "Var","id": "@implicit/cmp","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/order","type": {"op": "Ptr"}},"name": "std/core/order/(==)","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"order\""}, {"op": "Ptr","extern_ptr_name": "\"order\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: std/core/order/(==)"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "@implicit/cmp","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"order\""},"purity": "Effectful"}},"annotation": "genExpr: ?cmp"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "y","type": {"op": "Top"}},"annotation": "genExpr: y"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}]},"annotation": "genExpr: ?cmp(y, x)"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Lt","type": {"op": "Ptr","extern_ptr_name": "\"order\""}},"annotation": "genExpr: std/core/types/Lt"}]},"annotation": "genExpr: std/core/order/(==)((?cmp(y, x)), std/core/types/Lt)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a> fn(x: a, y: a, @implicit/cmp: (a, a) -> order){\n  std/core/order/(==)((?cmp(y, x)), std/core/types/Lt);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/(>=)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Top\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"order\\\"\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/(>=)"]}, {"name": {"op": "Var","id": "std/core/range/fold","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "start","type": {"op": "Int"}}, {"op": "Var","id": "end","type": {"op": "Int"}}, {"op": "Var","id": "init","type": {"op": "Top"}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixGt(Int, Int): Boolean","args": [{"op": "Var","id": "start","type": {"op": "Int"}}, {"op": "Var","id": "end","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "init","type": {"op": "Top"}},"annotation": "genExpr: init"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"start\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixGt(Int, Int): Boolean","args": [{"op": "Var","id": "start","type": {"op": "Int"}}, {"op": "Var","id": "end","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "x","type": {"op": "Top"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "start","type": {"op": "Int"}},"annotation": "genExpr: start"}, {"op": "DebugWrap","inner": {"op": "Var","id": "init","type": {"op": "Top"}},"annotation": "genExpr: init"}]},"annotation": "genExpr: f(start, init)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"x\",\"type\": {\"op\": \"Top\"}}"},"export_as": ["x"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/range/fold","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/range/fold<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Var","id": "start","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(start, 1)"}, {"op": "DebugWrap","inner": {"op": "Var","id": "end","type": {"op": "Int"}},"annotation": "genExpr: end"}, {"op": "DebugWrap","inner": {"op": "Var","id": "x","type": {"op": "Top"}},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"}]},"annotation": "genExpr: std/core/range/fold<a,(e :: E)>((std/core/int/int-add(start, 1)), end, x, f)"}},"annotation": "genExpr: val x : a\n      = f(start, init);\nstd/core/range/fold<a,(e :: E)>((std/core/int/int-add(start, 1)), end, x, f)"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"start\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(start: int, end: int, init: a, f: (int, a) -> (e :: E) a){\n  (match ((std/core/int/(>)(start, end))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> init;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> val x : a\n                = f(start, init);\n      std/core/range/fold<a,(e :: E)>((std/core/int/int-add(start, 1)), end, x, f);\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/range/fold\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}, {\"op\": \"Top\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/range/fold"]}, {"name": {"op": "Var","id": "std/core/fold","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "upto","type": {"op": "Int"}}, {"op": "Var","id": "init","type": {"op": "Top"}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/range/fold","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/range/fold<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "Var","id": "upto","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub(upto, 1)"}, {"op": "DebugWrap","inner": {"op": "Var","id": "init","type": {"op": "Top"}},"annotation": "genExpr: init"}, {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: f"}]},"annotation": "genExpr: std/core/range/fold<a,(e :: E)>(0, (std/core/int/int-sub(upto, 1)), init, f)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(upto: int, init: a, f: (int, a) -> (e :: E) a){\n  std/core/range/fold<a,(e :: E)>(0, (std/core/int/int-sub(upto, 1)), init, f);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/fold\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Top\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/fold"]}, {"name": {"op": "Var","id": "std/core/range/fold-while","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "start","type": {"op": "Int"}}, {"op": "Var","id": "end","type": {"op": "Int"}}, {"op": "Var","id": "init","type": {"op": "Top"}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixGt(Int, Int): Boolean","args": [{"op": "Var","id": "start","type": {"op": "Int"}}, {"op": "Var","id": "end","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "init","type": {"op": "Top"}},"annotation": "genExpr: init"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"start\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixGt(Int, Int): Boolean","args": [{"op": "Var","id": "start","type": {"op": "Int"}}, {"op": "Var","id": "end","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x11","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: f"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "start","type": {"op": "Int"}},"annotation": "genExpr: start"}, {"op": "DebugWrap","inner": {"op": "Var","id": "init","type": {"op": "Top"}},"annotation": "genExpr: init"}]},"annotation": "genExpr: f(start, init)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x11","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"12","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/range/fold-while","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/range/fold-while<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Var","id": "start","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(start, 1)"}, {"op": "DebugWrap","inner": {"op": "Var","id": "end","type": {"op": "Int"}},"annotation": "genExpr: end"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"12","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 982) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"12\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}, {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: f"}]},"annotation": "genExpr: std/core/range/fold-while<a,(e :: E)>((std/core/int/int-add(start, 1)), end, x, f)"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"12\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 982) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"12\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"12\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x11","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Top"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "init","type": {"op": "Top"}},"annotation": "genExpr: init"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((f(start, init))) {\n  ((std/core/types/Just((x: 982) : a) : (maybe :: V -> V)<a> ) as @pat@1: ((maybe :: V -> V)<982>))\n     -> std/core/range/fold-while<a,(e :: E)>((std/core/int/int-add(start, 1)), end, x, f);\n  ((@skip std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@2: ((maybe :: V -> V)<982>))\n     -> init;\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"start\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(start: int, end: int, init: a, f: (int, a) -> (e :: E) (maybe :: V -> V)<a>){\n  (match ((std/core/int/(>)(start, end))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> init;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> (match ((f(start, init))) {\n        ((std/core/types/Just((x: a) : a) : (maybe :: V -> V)<a> ) as @pat@1: ((maybe :: V -> V)<a>))\n           -> std/core/range/fold-while<a,(e :: E)>((std/core/int/int-add(start, 1)), end, x, f);\n        ((@skip std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@2: ((maybe :: V -> V)<a>))\n           -> init;\n      });\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/range/fold-while\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}, {\"op\": \"Top\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/range/fold-while"]}, {"name": {"op": "Var","id": "std/core/fold-while","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Var","id": "init","type": {"op": "Top"}}, {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/range/fold-while","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}, {"op": "Top"}, {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/range/fold-while<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub(n, 1)"}, {"op": "DebugWrap","inner": {"op": "Var","id": "init","type": {"op": "Top"}},"annotation": "genExpr: init"}, {"op": "DebugWrap","inner": {"op": "Var","id": "f","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: f"}]},"annotation": "genExpr: std/core/range/fold-while<a,(e :: E)>(0, (std/core/int/int-sub(n, 1)), init, f)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(n: int, init: a, f: (int, a) -> (e :: E) (maybe :: V -> V)<a>){\n  std/core/range/fold-while<a,(e :: E)>(0, (std/core/int/int-sub(n, 1)), init, f);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/fold-while\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Top\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/fold-while"]}, {"name": {"op": "Var","id": "std/core/range/@lift-for@1256","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}}, {"op": "Var","id": "end","type": {"op": "Int"}}, {"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLte(Int, Int): Boolean","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "end","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: action"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}]},"annotation": "genExpr: action(i)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}, {"name": {"op": "Var","id": "i@0@10010","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(i, 1)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"i@0@10010\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["i@0@10010"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/range/@lift-for@1256","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: std/core/range/@lift-for@1256<(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: action"}, {"op": "DebugWrap","inner": {"op": "Var","id": "end","type": {"op": "Int"}},"annotation": "genExpr: end"}, {"op": "DebugWrap","inner": {"op": "Var","id": "i@0@10010","type": {"op": "Int"}},"annotation": "genExpr: i@0@10010"}]},"annotation": "genExpr: std/core/range/@lift-for@1256<(e :: E)>(action, end, i@0@10010)"}},"annotation": "genExpr: val _ : ();\nval i@0@10010 : int;\nstd/core/range/@lift-for@1256<(e :: E)>(action, end, i@0@10010)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLte(Int, Int): Boolean","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "end","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Unit"}},"annotation": "genExpr: std/core/types/Unit"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E)> fn<(e :: E)>(action: (int) -> (e :: E) (), end: int, i: int){\n  (match ((std/core/int/(<=)(i, end))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> val _ : ();\n          val i@0@10010 : int;\n      std/core/range/@lift-for@1256<(e :: E)>(action, end, i@0@10010);\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/core/types/Unit;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/range/@lift-for@1256\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}, {\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/range/@lift-for@1256"]}, {"name": {"op": "Var","id": "std/core/range/for","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}, {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "start","type": {"op": "Int"}}, {"op": "Var","id": "end","type": {"op": "Int"}}, {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/range/@lift-for@1256","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: std/core/range/@lift-for@1256<(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: action"}, {"op": "DebugWrap","inner": {"op": "Var","id": "end","type": {"op": "Int"}},"annotation": "genExpr: end"}, {"op": "DebugWrap","inner": {"op": "Var","id": "start","type": {"op": "Int"}},"annotation": "genExpr: start"}]},"annotation": "genExpr: std/core/range/@lift-for@1256<(e :: E)>(action, end, start)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E)> fn<(e :: E)>(start: int, end: int, action: (int) -> (e :: E) ()){\n  std/core/range/@lift-for@1256<(e :: E)>(action, end, start);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/range/for\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/range/for"]}, {"name": {"op": "Var","id": "std/core/for","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "end@10012","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub(n, 1)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"end@10012\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["end@10012"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/range/@lift-for@1256","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: std/core/range/@lift-for@1256<(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: action"}, {"op": "DebugWrap","inner": {"op": "Var","id": "end@10012","type": {"op": "Int"}},"annotation": "genExpr: end@10012"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}]},"annotation": "genExpr: std/core/range/@lift-for@1256<(e :: E)>(action, end@10012, 0)"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E)> fn<(e :: E)>(n: int, action: (int) -> (e :: E) ()){\n  val end@10012 : int\n        = std/core/int/int-sub(n, 1);\n  std/core/range/@lift-for@1256<(e :: E)>(action, end@10012, 0);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/for\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/for"]}, {"name": {"op": "Var","id": "std/core/range/@lift-for-while@1257","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}}, {"op": "Var","id": "end","type": {"op": "Int"}}, {"op": "Var","id": "i","type": {"op": "Int"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLte(Int, Int): Boolean","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "end","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x13","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: action"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "i","type": {"op": "Int"}},"annotation": "genExpr: i"}]},"annotation": "genExpr: action(i)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x13","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "i@0@10014","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(i, 1)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"i@0@10014\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["i@0@10014"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/range/@lift-for-while@1257","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/range/@lift-for-while@1257<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: action"}, {"op": "DebugWrap","inner": {"op": "Var","id": "end","type": {"op": "Int"}},"annotation": "genExpr: end"}, {"op": "DebugWrap","inner": {"op": "Var","id": "i@0@10014","type": {"op": "Int"}},"annotation": "genExpr: i@0@10014"}]},"annotation": "genExpr: std/core/range/@lift-for-while@1257<a,(e :: E)>(action, end, i@0@10014)"}},"annotation": "genExpr: val i@0@10014 : int\n      = std/core/int/int-add(i, 1);\nstd/core/range/@lift-for-while@1257<a,(e :: E)>(action, end, i@0@10014)"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x13","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"14","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<a>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"14","type": {"op": "Top"}},"annotation": "genTest: normal: (x: 1121) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"14\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}]},"annotation": "genExpr: std/core/types/Just<a>(x)"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"14\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: 1121) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"14\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((action(i))) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@0: ((maybe :: V -> V)<1121>))\n     -> val i@0@10014 : int\n              = std/core/int/int-add(i, 1);\n    std/core/range/@lift-for-while@1257<a,(e :: E)>(action, end, i@0@10014);\n  ((@skip std/core/types/Just((x: 1121) : a) : (maybe :: V -> V)<a> ) as @pat@1: ((maybe :: V -> V)<1121>))\n     -> std/core/types/Just<a>(x);\n}"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixLte(Int, Int): Boolean","args": [{"op": "Var","id": "i","type": {"op": "Int"}}, {"op": "Var","id": "end","type": {"op": "Int"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"annotation": "genExpr: std/core/types/Nothing<a>"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"infixLte(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"i\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"end\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(action: (int) -> (e :: E) (maybe :: V -> V)<a>, end: int, i: int){\n  (match ((std/core/int/(<=)(i, end))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> (match ((action(i))) {\n        ((std/core/types/Nothing() : (maybe :: V -> V)<a> ) as @pat@0: ((maybe :: V -> V)<a>))\n           -> val i@0@10014 : int\n                    = std/core/int/int-add(i, 1);\n          std/core/range/@lift-for-while@1257<a,(e :: E)>(action, end, i@0@10014);\n        ((@skip std/core/types/Just((x: a) : a) : (maybe :: V -> V)<a> ) as @pat@1: ((maybe :: V -> V)<a>))\n           -> std/core/types/Just<a>(x);\n      });\n    ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n       -> std/core/types/Nothing<a>;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/range/@lift-for-while@1257\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}, {\"op\": \"Int\"}, {\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/range/@lift-for-while@1257"]}, {"name": {"op": "Var","id": "std/core/range/for-while","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Int"}, {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "start","type": {"op": "Int"}}, {"op": "Var","id": "end","type": {"op": "Int"}}, {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/range/@lift-for-while@1257","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/range/@lift-for-while@1257<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: action"}, {"op": "DebugWrap","inner": {"op": "Var","id": "end","type": {"op": "Int"}},"annotation": "genExpr: end"}, {"op": "DebugWrap","inner": {"op": "Var","id": "start","type": {"op": "Int"}},"annotation": "genExpr: start"}]},"annotation": "genExpr: std/core/range/@lift-for-while@1257<a,(e :: E)>(action, end, start)"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(start: int, end: int, action: (int) -> (e :: E) (maybe :: V -> V)<a>){\n  std/core/range/@lift-for-while@1257<a,(e :: E)>(action, end, start);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/range/for-while\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Int\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/range/for-while"]}, {"name": {"op": "Var","id": "std/core/for-while","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "end@10016","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub(n, 1)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"end@10016\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["end@10016"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/range/@lift-for-while@1257","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/range/@lift-for-while@1257<a,(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [{"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: action"}, {"op": "DebugWrap","inner": {"op": "Var","id": "end@10016","type": {"op": "Int"}},"annotation": "genExpr: end@10016"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}]},"annotation": "genExpr: std/core/range/@lift-for-while@1257<a,(e :: E)>(action, end@10016, 0)"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<a,(e :: E)> fn<(e :: E)>(n: int, action: (int) -> (e :: E) (maybe :: V -> V)<a>){\n  val end@10016 : int\n        = std/core/int/int-sub(n, 1);\n  std/core/range/@lift-for-while@1257<a,(e :: E)>(action, end@10016, 0);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/for-while\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/for-while"]}, {"name": {"op": "Var","id": "std/core/repeat","type": {"op": "Function","params": [{"op": "Int"}, {"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "end@10021","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixSub(Int, Int): Int","args": [{"op": "Var","id": "n","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-sub(n, 1)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"end@10021\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["end@10021"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/range/@lift-for@1256","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: std/core/range/@lift-for@1256<(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "i@0","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: action"},"args": []},"annotation": "genExpr: action()"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(e :: E)>(i@0: int){\n  action();\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "end@10021","type": {"op": "Int"}},"annotation": "genExpr: end@10021"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}]},"annotation": "genExpr: std/core/range/@lift-for@1256<(e :: E)>((fn<(e :: E)>(i@0: int){\n    (action());\n  }), end@10021, 0)"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E)> fn<(e :: E)>(n: int, action: () -> (e :: E) ()){\n  val end@10021 : int\n        = std/core/int/int-sub(n, 1);\n  std/core/range/@lift-for@1256<(e :: E)>((fn<(e :: E)>(i@0: int){\n      (action());\n    }), end@10021, 0);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/repeat\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Int\"}, {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/repeat"]}, {"name": {"op": "Var","id": "std/core/unique","type": {"op": "Function","params": [],"return": {"op": "Int"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "u","type": {"op": "Int"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "getRef(Ref[Ptr]): Ptr","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "std/core/unique-count","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}},"annotation": "genExpr: std/core/unique-count"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Top"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Top"}}},"annotation": "genExpr: std/core/types/ref/(!)<(global :: H),int,<(write :: H -> X)<(global :: H)>|(_e :: E)>>(std/core/unique-count)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"u\",\"type\": {\"op\": \"Int\"}}"},"export_as": ["u"]}, {"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "setRef(Ref[Ptr], Ptr): Unit","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "std/core/unique-count","type": {"op": "Ptr","extern_ptr_name": "\"ref\""}},"annotation": "genExpr: std/core/unique-count"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixAdd(Int, Int): Int","args": [{"op": "Var","id": "u","type": {"op": "Int"}}, {"op": "Literal","type": {"op": "Int"},"value": 1}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/int/int-add(u, 1)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}},"annotation": "genExpr: std/core/types/set<int,(global :: H)>(std/core/unique-count, (std/core/int/int-add(u, 1)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}],"body": {"op": "Var","id": "u","type": {"op": "Int"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(ndet :: X)>(){\n  val u : int;\n  val _ : ();\n  u;\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/unique\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Int\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/unique"]}, {"name": {"op": "Var","id": "std/core/while","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Bool"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}],"return": {"op": "Unit"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "predicate","type": {"op": "Function","params": [],"return": {"op": "Bool"},"purity": "Effectful"}}, {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x15","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "predicate","type": {"op": "Function","params": [],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: predicate"},"args": []},"annotation": "genExpr: predicate()"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x15","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "_","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: action"},"args": []},"annotation": "genExpr: action()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/core/while","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Bool"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: std/core/while<(e :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "predicate","type": {"op": "Function","params": [],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: predicate"}, {"op": "DebugWrap","inner": {"op": "Var","id": "action","type": {"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: action"}]},"annotation": "genExpr: std/core/while<(e :: E)>(predicate, action)"}},"annotation": "genExpr: val _ : ()\n      = action();\nstd/core/while<(e :: E)>(predicate, action)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x15\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x15","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Unit"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Unit"}},"annotation": "genExpr: std/core/types/Unit"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x15\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: forall<(e :: E)> fn<<(div :: X)|(e :: E)>>(predicate: () -> <(div :: X)|(e :: E)> bool, action: () -> <(div :: X)|(e :: E)> ()){\n  (match ((predicate())) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> val _ : ()\n                = action();\n      std/core/while<(e :: E)>(predicate, action);\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/core/types/Unit;\n  });\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/core/while\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}, {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}],\"return\": {\"op\": \"Unit\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/core/while"]}, {"name": {"op": "Var","id": "std/core/Next","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "std/core/stream"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/stream"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "head","type": {"op": "Top"}}, {"op": "Var","id": "tail","type": {"op": "Ptr","extern_ptr_name": "std/core/stream"}}],"body": {"op": "Construct","type_tag": "std/core/stream","tag": "std/core/Next","args": [{"op": "Var","id": "head","type": {"op": "Top"}}, {"op": "Var","id": "tail","type": {"op": "Ptr","extern_ptr_name": "std/core/stream"}}]}},"annotation": "genConstr"},"export_as": ["std/core/Next"]}],"main": {"op": "Primitive","name": "!undefined:is a library","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}}}