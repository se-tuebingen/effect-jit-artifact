{"blocks":[{"label":"0([match_def@[mcore:[#68]#3]#4])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"1([match_main/@Hnd-emit@[mcore:[#68]#3]#5])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"emit@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/emit\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/clause1<int,(),main/emit,67,68>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"emit@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/emit\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/clause1<int,(),main/emit,67,68>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"2([mcore:[#68]#3])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"emit@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/emit\"}}: \"main/emit\".\"main/@Hnd-emit\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"emit@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/emit\"}}: \"main/emit\".\"main/@Hnd-emit\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"0\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"main/emit","scrutinee":0,"clauses":[{"tag":"main/@Hnd-emit","target":1,"args":{"any":[0,1]}}],"default":{"tag":"04d98d81-653f-4101-a139-4b376cace7f2#[Missing Tag#507]","target":0,"args":{"any":[]}}}]},
{"label":"3([match_def@[mcore:[#69]#6]#7])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"4([match_main/@Hnd-emit@[mcore:[#69]#6]#8])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"emit@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/emit\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"2\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@x: hnd/clause1<int,(),main/emit,91,92>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"emit@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/emit\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"2\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@x: hnd/clause1<int,(),main/emit,91,92>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"5([mcore:[#69]#6])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"emit@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/emit\"}}: \"main/emit\".\"main/@Hnd-emit\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"2\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"emit@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/emit\"}}: \"main/emit\".\"main/@Hnd-emit\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"2\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"main/emit","scrutinee":0,"clauses":[{"tag":"main/@Hnd-emit","target":4,"args":{"any":[0,1]}}],"default":{"tag":"04d98d81-653f-4101-a139-4b376cace7f2#[Missing Tag#508]","target":3,"args":{"any":[]}}}]},
{"label":"6([mcore:[#70]#9])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/hnd/Htag"}]},
{"label":"7([mcore:[#73]#14])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"CallLib","lib":4,"symbol":"std/core/hnd/@hhandle"}]},
{"label":"8([mcore:[#79]#22])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@hhandle<a,(e :: E),<(main/emit :: (E, V) -> V)|(e :: E)>,(main/emit :: (E, V) -> V),a>(main/@tag-emit, hnd, ret, action)","traced":{"any":[]}},
{"op":"Const","format":"string","out":3,"value":"Name(main/@tag-emit)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@hhandle<a,(e :: E),<(main/emit :: (E, V) -> V)|(e :: E)>,(main/emit :: (E, V) -> V),a>(main/@tag-emit, hnd, ret, action)","traced":{"any":[]}},
{"op":"Jump","target":7}]},
{"label":"9([match_def@[mcore:[#80]#29]#30])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"10([match_main/@Hnd-emit@[mcore:[#80]#29]#31])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/emit\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"4\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@fun-emit,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-emit: hnd/clause1<int,(),main/emit,164,165>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"5\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/emit\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"4\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@fun-emit,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-emit: hnd/clause1<int,(),main/emit,164,165>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"5\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"11([mcore:[#80]#29])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/emit\"}}: \"main/emit\".\"main/@Hnd-emit\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"4\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"hnd\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"main/emit\"}}: \"main/emit\".\"main/@Hnd-emit\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"4\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"5\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"main/emit","scrutinee":0,"clauses":[{"tag":"main/@Hnd-emit","target":10,"args":{"any":[0,1]}}],"default":{"tag":"04d98d81-653f-4101-a139-4b376cace7f2#[Missing Tag#509]","target":9,"args":{"any":[]}}}]},
{"label":"12([mcore:[#81]#32])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"elt"}]},
{"label":"13([mcore:[#82]#38])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"CallLib","lib":0,"symbol":"getCurrentEvv"}]},
{"label":"14([#57])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"15([k@[#58]#60])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"16([match_def@[#58]#62])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"17([k@[match_main/@Hnd-emit@[#58]#63]#65])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"18([#67])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"19([k@[#68]#70])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"20([#68])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-emit: hnd/clause1<int,(),main/emit,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"12\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1007,1008>, hnd/ev<main/emit>, int) -> 1007 ()) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"12\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: f(m, ev@10013, e)","traced":{"any":[]}},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: f(m, ev@10013, e)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-emit: hnd/clause1<int,(),main/emit,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"12\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1007,1008>, hnd/ev<main/emit>, int) -> 1007 ()) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"12\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":3,"tag":"apply","args":{"any":[0,1,2]}}]},
{"label":"21([match_main/@Hnd-emit@[#58]#63])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"8\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/emit<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"10\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"10\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@fun-emit,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-emit: hnd/clause1<int,(),main/emit,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@fun-emit) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (1007 :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(1007 :: E),1008>))\n     -> f(m, ev@10013, e);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-emit: hnd/clause1<int,(),main/emit,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"12\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-emit: hnd/clause1<int,(),main/emit,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"12\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@fun-emit) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (1007 :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(1007 :: E),1008>))\n     -> f(m, ev@10013, e);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"8\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/emit<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"10\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"10\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@fun-emit,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-emit: hnd/clause1<int,(),main/emit,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/clause1","scrutinee":4,"clauses":[{"tag":"std/core/hnd/Clause1","target":20,"args":{"any":[3]}}],"default":{"tag":"04d98d81-653f-4101-a139-4b376cace7f2#[Missing Tag#510]","target":18,"args":{"any":[]}}}]},
{"label":"22([#58])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10013\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<main/emit>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"6\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"7\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"8\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/emit<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"9\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (h) {\n  ((@skip main/@Hnd-emit((@pat@0@0: int) : int, (@fun-emit: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a>) : (main/emit :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/emit :: (E, V) -> V)<(1007 :: E),1008>))\n     -> (match (@fun-emit) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (1007 :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(1007 :: E),1008>))\n         -> f(m, ev@10013, e);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"8\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/emit<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/emit\".\"main/@Hnd-emit\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"10\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":2},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"8\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/emit<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/emit\".\"main/@Hnd-emit\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"10\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (h) {\n  ((@skip main/@Hnd-emit((@pat@0@0: int) : int, (@fun-emit: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a>) : (main/emit :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/emit :: (E, V) -> V)<(1007 :: E),1008>))\n     -> (match (@fun-emit) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (1007 :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(1007 :: E),1008>))\n         -> f(m, ev@10013, e);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ev@10013\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0: hnd/htag<main/emit>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"6\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"7\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"8\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/emit<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1: hnd/evv<1007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"9\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"main/emit","scrutinee":4,"clauses":[{"tag":"main/@Hnd-emit","target":21,"args":{"any":[3,4]}}],"default":{"tag":"04d98d81-653f-4101-a139-4b376cace7f2#[Missing Tag#511]","target":16,"args":{"any":[]}}}]},
{"label":"23([k@[k@[mcore:[#91]#42]#48]#56])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ev@10013\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"8\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Swap","a":0,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ev@10013\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"7\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"8\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/ev","scrutinee":1,"clauses":[{"tag":"std/core/hnd/Ev","target":22,"args":{"any":[2,3,4,5]}}],"default":{"tag":"04d98d81-653f-4101-a139-4b376cace7f2#[Missing Tag#512]","target":14,"args":{"any":[]}}}]},
{"label":"24([k@[mcore:[#91]#42]#48])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"promote_ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":23,"args":{"any":[2]}},
{"op":"Copy","from":3,"to":2},
{"op":"Jump","target":12}]},
{"label":"25([mcore:[#91]#42])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"ev@10013\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@evv-at<(main/emit :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":0},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":24,"args":{"any":[1,0]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@evv-at<(main/emit :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"ev@10013\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Jump","target":13}]},
{"label":"26([mcore:[#94]#72])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"elt"}]},
{"label":"27([mcore:[#95]#78])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"CallLib","lib":0,"symbol":"getCurrentEvv"}]},
{"label":"28([switch case for Bool(true)#84])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"l\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"u\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/Unit","traced":{"any":[]}},
{"op":"Construct","out":0,"type":"Unit","tag":"unit","args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/Unit","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"l\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"u\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"29([k@[k@[#103]#105]#113])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"30([k@[#103]#105])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: main/range((std/core/int/int-add(l, 1)), u)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(l, 1)","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":1},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(l, 1)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/range((std/core/int/int-add(l, 1)), u)","traced":{"any":[]}},
{"op":"Jump","target":45}]},
{"label":"31([match_def@[#103]#115])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"32([k@[match_std/core/hnd/Ev@[#103]#116]#118])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"33([#120])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"34([k@[#121]#123])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"35([match_def@[#121]#125])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"36([#128])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"37([match_std/core/hnd/Clause1@[#121]#126])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-emit: hnd/clause1<int,(),main/emit,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"19\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1007,1008>, hnd/ev<main/emit>, int) -> 1007 ()) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"19\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: f(m, ev@10016, l)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: f(m, ev@10016, l)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-emit: hnd/clause1<int,(),main/emit,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}),(f,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"clause\\\"19\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}},\"annotation\": \"genTest: normal: (f: (hnd/marker<1007,1008>, hnd/ev<main/emit>, int) -> 1007 ()) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"clause\\\\\\\"19\\\",\\\"type\\\": {\\\"op\\\": \\\"Function\\\",\\\"params\\\": [{\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}, {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/ev\\\"}, {\\\"op\\\": \\\"Top\\\"}],\\\"return\\\": {\\\"op\\\": \\\"Top\\\"},\\\"purity\\\": \\\"Effectful\\\"}}\"})]","traced":{"any":[]}},
{"op":"Invoke","receiver":3,"tag":"apply","args":{"any":[0,1,2]}}]},
{"label":"38([#121])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"15\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/emit<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"17\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@fun-emit,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-emit: hnd/clause1<int,(),main/emit,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (@fun-emit) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (1007 :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(1007 :: E),1008>))\n     -> f(m, ev@10016, l);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-emit: hnd/clause1<int,(),main/emit,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"19\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-emit: hnd/clause1<int,(),main/emit,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"}: \"std/core/hnd/clause1\".\"std/core/hnd/Clause1\"(({\"op\": \"Var\",\"id\": \"@\\\"clause\\\"19\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}, {\"op\": \"Top\"}],\"return\": {\"op\": \"Top\"},\"purity\": \"Effectful\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (@fun-emit) {\n  ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (1007 :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(1007 :: E),1008>))\n     -> f(m, ev@10016, l);\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"15\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/emit<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"17\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@cfc\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@fun-emit,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}},\"annotation\": \"genTest: normal: (@fun-emit: hnd/clause1<int,(),main/emit,1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"@fun-emit\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/clause1\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/clause1","scrutinee":4,"clauses":[{"tag":"std/core/hnd/Clause1","target":37,"args":{"any":[3]}}],"default":{"tag":"04d98d81-653f-4101-a139-4b376cace7f2#[Missing Tag#513]","target":35,"args":{"any":[]}}}]},
{"label":"39([match_std/core/hnd/Ev@[#103]#116])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ev@10016\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@0: hnd/htag<main/emit>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"13\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"15\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/emit<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/evv<1007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"16\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (h) {\n  ((@skip main/@Hnd-emit((@pat@0@1: int) : int, (@fun-emit: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a>) : (main/emit :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/emit :: (E, V) -> V)<(1007 :: E),1008>))\n     -> (match (@fun-emit) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (1007 :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(1007 :: E),1008>))\n         -> f(m, ev@10016, l);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"15\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/emit<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/emit\".\"main/@Hnd-emit\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"17\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Copy","from":1,"to":2},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"15\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/emit<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"main/emit\".\"main/@Hnd-emit\"(({\"op\": \"Var\",\"id\": \"@\\\"@cfc\\\"17\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"@fun-emit\\\"18\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/clause1\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (h) {\n  ((@skip main/@Hnd-emit((@pat@0@1: int) : int, (@fun-emit: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(1007 :: E),1008>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a>) : (main/emit :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/emit :: (E, V) -> V)<(1007 :: E),1008>))\n     -> (match (@fun-emit) {\n      ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(1007 :: E),1008>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (1007 :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(1007 :: E),1008>))\n         -> f(m, ev@10016, l);\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"ev@10016\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"htag\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}},\"annotation\": \"genTest: normal: (@pat@0@0: hnd/htag<main/emit>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"htag\\\\\\\"13\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/htag\\\"}}\"}),(m,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}},\"annotation\": \"genTest: normal: (m: hnd/marker<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"marker\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/marker\\\"}}\"}),(h,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"15\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (h: main/emit<1007,1008>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hnd\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}},\"annotation\": \"genTest: normal: (@pat@1@0: hnd/evv<1007>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"hevv\\\\\\\"16\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"std/core/hnd/evv\\\"}}\"})]","traced":{"any":[]}},
{"op":"Match","type":"main/emit","scrutinee":4,"clauses":[{"tag":"main/@Hnd-emit","target":38,"args":{"any":[3,4]}}],"default":{"tag":"04d98d81-653f-4101-a139-4b376cace7f2#[Missing Tag#514]","target":33,"args":{"any":[]}}}]},
{"label":"40([#103])",
"frameDescriptor":{"regs_any":6},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (ev@10016) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (main/emit :: (E, V) -> V)<(e :: E),a>) : (main/emit :: (E, V) -> V)<(e :: E),a>, (@pat@1@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)> ) as @pat@1: ((hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>))\n     -> (match (h) {\n      ((@skip main/@Hnd-emit((@pat@0@1: int) : int, (@fun-emit: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a>) : (main/emit :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/emit :: (E, V) -> V)<(e :: E),a>))\n         -> (match (@fun-emit) {\n          ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (e :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a>))\n             -> f(m, ev@10016, l);\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"ev@10016\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"15\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Push","target":30,"args":{"any":[1,2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"ev@10016\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}: \"std/core/hnd/ev\".\"std/core/hnd/Ev\"(({\"op\": \"Var\",\"id\": \"@\\\"htag\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}, {\"op\": \"Var\",\"id\": \"@\\\"marker\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/marker\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hnd\\\"15\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"hevv\\\"16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/evv\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: one case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (ev@10016) {\n  ((@skip std/core/hnd/Ev<(e :: E),a>((@pat@0@0: (hnd/htag :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>) : (hnd/htag :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, (m: (hnd/marker :: (E, V) -> V)<(e :: E),a>) : (hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (main/emit :: (E, V) -> V)<(e :: E),a>) : (main/emit :: (E, V) -> V)<(e :: E),a>, (@pat@1@0: (hnd/evv :: E -> V)<(e :: E)>) : (hnd/evv :: E -> V)<(e :: E)>) : (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)> ) as @pat@1: ((hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>))\n     -> (match (h) {\n      ((@skip main/@Hnd-emit((@pat@0@1: int) : int, (@fun-emit: (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a>) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a>) : (main/emit :: (E, V) -> V)<(e :: E),a> ) as @pat@2: ((main/emit :: (E, V) -> V)<(e :: E),a>))\n         -> (match (@fun-emit) {\n          ((@skip std/core/hnd/Clause1((f: ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (e :: E) ()) : ((hnd/marker :: (E, V) -> V)<(e :: E),a>, (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, int) -> (e :: E) ()) : (hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a> ) as @pat@2@0: ((hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<int,(),(main/emit :: (E, V) -> V),(e :: E),a>))\n             -> f(m, ev@10016, l);\n        });\n    });\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Match","type":"std/core/hnd/ev","scrutinee":0,"clauses":[{"tag":"std/core/hnd/Ev","target":39,"args":{"any":[2,3,4,5]}}],"default":{"tag":"04d98d81-653f-4101-a139-4b376cace7f2#[Missing Tag#515]","target":31,"args":{"any":[]}}}]},
{"label":"41([k@[switch case for Bool(false)#89]#95])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"promote_ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":40,"args":{"any":[2,3]}},
{"op":"Copy","from":4,"to":2},
{"op":"Jump","target":26}]},
{"label":"42([switch case for Bool(false)#89])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"l\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"u\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: val ev@10016 : (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>;\nval _ : ();\nmain/range((std/core/int/int-add(l, 1)), u)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"ev@10016\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/@evv-at<(main/emit :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Const","format":"int","out":2,"value":0},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":41,"args":{"any":[2,0,1]}},
{"op":"Copy","from":3,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@make-ssize_t(0)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/@evv-at<(main/emit :: (E, V) -> V)>((std/core/types/@make-ssize_t(0)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"ev@10016\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/ev\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: val ev@10016 : (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>;\nval _ : ();\nmain/range((std/core/int/int-add(l, 1)), u)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixGt(Int, Int): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"l\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"u\",\"type\": {\"op\": \"Int\"}}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]","traced":{"any":[]}},
{"op":"Jump","target":27}]},
{"label":"43([switch default case#130])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"44([switch default case#87])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"PrimOp","name":"infixGt(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[0,1]}},
{"op":"Switch","arg":2,"values":[false],"targets":[42],"default":43}]},
{"label":"45([mcore:[#108]#82])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"PrimOp","name":"infixGt(Int, Int): Boolean","out":{"any":[2]},"in":{"any":[0,1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Switch","arg":2,"values":[true],"targets":[28],"default":44}]},
{"label":"46([mcore:[#109]#131])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/hnd/local-var"}]},
{"label":"47([mcore:[#115]#137])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/hnd/Clause1"}]},
{"label":"48([mcore:[#120]#142])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"x@10002\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/local-get<int,(h :: H),(div :: X)>(s)","traced":{"any":[]}},
{"op":"PrimOp","name":"getRef(Ref[Ptr]): Ptr","out":{"any":[0]},"in":{"any":[3]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/local-set<int,(div :: X),(h :: H)>(s, (std/core/int/int-add(x@10002, x)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/int-add(x@10002, x)","traced":{"any":[]}},
{"op":"PrimOp","name":"infixAdd(Int, Int): Int","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"PrimOp","name":"setRef(Ref[Ptr], Ptr): Unit","out":{"any":[0]},"in":{"any":[3,0]}},
{"op":"Construct","out":0,"type":"Unit","tag":"unit","args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/int-add(x@10002, x)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/local-set<int,(div :: X),(h :: H)>(s, (std/core/int/int-add(x@10002, x)))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/local-get<int,(h :: H),(div :: X)>(s)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"x@10002\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"49([mcore:[#124]#145])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"50([k@[mcore:[#130]#146]#153])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/local-get<int,(h :: H),<(div :: X),(main/emit :: (E, V) -> V)>>(s)","traced":{"any":[]}},
{"op":"PrimOp","name":"getRef(Ref[Ptr]): Ptr","out":{"any":[0]},"in":{"any":[1]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/local-get<int,(h :: H),<(div :: X),(main/emit :: (E, V) -> V)>>(s)","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"51([mcore:[#130]#146])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"_@0\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: main/range(0, n)","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":0},
{"op":"Const","format":"string","out":3,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Push","target":50,"args":{"any":[2]}},
{"op":"Copy","from":3,"to":2},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/range(0, n)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"_@0\",\"type\": {\"op\": \"Unit\"}}","traced":{"any":[]}},
{"op":"Jump","target":45}]},
{"label":"52([method_apply@[mcore:[#132]#154]#161])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Jump","target":48}]},
{"label":"53([#175])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Jump","target":49}]},
{"label":"54([#179])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":0,"b":1},
{"op":"Jump","target":51}]},
{"label":"55([k@[k@[mcore:[#132]#154]#168]#171])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"New","out":3,"targets":[53],"args":{"any":[]},"tags":["apply"]},
{"op":"New","out":1,"targets":[54],"args":{"any":[1,2]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":4,"value":"Name(main/@tag-emit)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Swap","a":2,"b":1},
{"op":"Swap","a":3,"b":1},
{"op":"Jump","target":8}]},
{"label":"56([k@[mcore:[#132]#154]#168])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Push","target":55,"args":{"any":[1,2]}},
{"op":"Copy","from":0,"to":1},
{"op":"Copy","from":3,"to":0},
{"op":"Jump","target":80}]},
{"label":"57([mcore:[#132]#154])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3]}},
{"op":"Debug","msg":"BGN: genExpr: main/@handle-emit<int,<(local :: H -> X)<(h :: H)>,(div :: X)>,int>((main/@Hnd-emit<<(local :: H -> X)<(h :: H)>,(div :: X)>,int>(1, (std/core/hnd/Clause1<int,(),(main/emit :: (E, V) -> V),<(local :: H -> X)<(h :: H)>,(div :: X)>,int>((fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(@_wildcard-x691_14: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(391 :: H)>,(div :: X)>,int>, @_wildcard-x691_17: (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, x: int){\n      val x@10002 : int;\n      val _ : ();\n      std/core/types/Unit;\n    }))))), (fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(@x: int){\n    @x;\n  }), (fn<<(main/emit :: (E, V) -> V),(local :: H -> X)<(h :: H)>,(div :: X)>>(){\n    val _@0 : ()\n          = (main/range(0, n));\n    (std/core/types/local-get<int,(h :: H),<(div :: X),(main/emit :: (E, V) -> V)>>(s));\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: main/@Hnd-emit<<(local :: H -> X)<(h :: H)>,(div :: X)>,int>(1, (std/core/hnd/Clause1<int,(),(main/emit :: (E, V) -> V),<(local :: H -> X)<(h :: H)>,(div :: X)>,int>((fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(@_wildcard-x691_14: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(391 :: H)>,(div :: X)>,int>, @_wildcard-x691_17: (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, x: int){\n    val x@10002 : int;\n    val _ : ();\n    std/core/types/Unit;\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 1","traced":{"any":[]}},
{"op":"Const","format":"int","out":1,"value":1},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/Clause1<int,(),(main/emit :: (E, V) -> V),<(local :: H -> X)<(h :: H)>,(div :: X)>,int>((fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(@_wildcard-x691_14: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(391 :: H)>,(div :: X)>,int>, @_wildcard-x691_17: (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, x: int){\n  val x@10002 : int;\n  val _ : ();\n  std/core/types/Unit;\n}))","traced":{"any":[]}},
{"op":"New","out":2,"targets":[52],"args":{"any":[0]},"tags":["apply"]},
{"op":"Const","format":"string","out":4,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[4]},"in":{"any":[4]}},
{"op":"Push","target":56,"args":{"any":[3,0,1]}},
{"op":"Copy","from":4,"to":1},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/Clause1<int,(),(main/emit :: (E, V) -> V),<(local :: H -> X)<(h :: H)>,(div :: X)>,int>((fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(@_wildcard-x691_14: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(391 :: H)>,(div :: X)>,int>, @_wildcard-x691_17: (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, x: int){\n  val x@10002 : int;\n  val _ : ();\n  std/core/types/Unit;\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 1","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/@Hnd-emit<<(local :: H -> X)<(h :: H)>,(div :: X)>,int>(1, (std/core/hnd/Clause1<int,(),(main/emit :: (E, V) -> V),<(local :: H -> X)<(h :: H)>,(div :: X)>,int>((fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(@_wildcard-x691_14: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(391 :: H)>,(div :: X)>,int>, @_wildcard-x691_17: (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, x: int){\n    val x@10002 : int;\n    val _ : ();\n    std/core/types/Unit;\n  }))))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/@handle-emit<int,<(local :: H -> X)<(h :: H)>,(div :: X)>,int>((main/@Hnd-emit<<(local :: H -> X)<(h :: H)>,(div :: X)>,int>(1, (std/core/hnd/Clause1<int,(),(main/emit :: (E, V) -> V),<(local :: H -> X)<(h :: H)>,(div :: X)>,int>((fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(@_wildcard-x691_14: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(391 :: H)>,(div :: X)>,int>, @_wildcard-x691_17: (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, x: int){\n      val x@10002 : int;\n      val _ : ();\n      std/core/types/Unit;\n    }))))), (fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(@x: int){\n    @x;\n  }), (fn<<(main/emit :: (E, V) -> V),(local :: H -> X)<(h :: H)>,(div :: X)>>(){\n    val _@0 : ()\n          = (main/range(0, n));\n    (std/core/types/local-get<int,(h :: H),<(div :: X),(main/emit :: (E, V) -> V)>>(s));\n  }))","traced":{"any":[]}},
{"op":"Jump","target":47}]},
{"label":"58([method_apply@[mcore:[#134]#192]#197])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Const","format":"string","out":3,"value":"Name(main/@tag-emit)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[3]},"in":{"any":[3]}},
{"op":"Swap","a":3,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Jump","target":57}]},
{"label":"59([mcore:[#134]#192])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/local-var<int,int,(div :: X),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(s: (local-var :: (H, V) -> V)<(391 :: H),int>){\n    (main/@handle-emit<int,<(local :: H -> X)<(h :: H)>,(div :: X)>,int>((main/@Hnd-emit<<(local :: H -> X)<(h :: H)>,(div :: X)>,int>(1, (std/core/hnd/Clause1<int,(),(main/emit :: (E, V) -> V),<(local :: H -> X)<(h :: H)>,(div :: X)>,int>((fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(@_wildcard-x691_14: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(391 :: H)>,(div :: X)>,int>, @_wildcard-x691_17: (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, x: int){\n          val x@10002 : int;\n          val _ : ();\n          std/core/types/Unit;\n        }))))), (fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(@x: int){\n        @x;\n      }), (fn<<(main/emit :: (E, V) -> V),(local :: H -> X)<(h :: H)>,(div :: X)>>(){\n        val _@0 : ()\n              = (main/range(0, n));\n        (std/core/types/local-get<int,(h :: H),<(div :: X),(main/emit :: (E, V) -> V)>>(s));\n      })));\n  }))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 0","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":0},
{"op":"New","out":1,"targets":[58],"args":{"any":[2]},"tags":["apply"]},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 0","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/local-var<int,int,(div :: X),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(s: (local-var :: (H, V) -> V)<(391 :: H),int>){\n    (main/@handle-emit<int,<(local :: H -> X)<(h :: H)>,(div :: X)>,int>((main/@Hnd-emit<<(local :: H -> X)<(h :: H)>,(div :: X)>,int>(1, (std/core/hnd/Clause1<int,(),(main/emit :: (E, V) -> V),<(local :: H -> X)<(h :: H)>,(div :: X)>,int>((fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(@_wildcard-x691_14: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(391 :: H)>,(div :: X)>,int>, @_wildcard-x691_17: (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, x: int){\n          val x@10002 : int;\n          val _ : ();\n          std/core/types/Unit;\n        }))))), (fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(@x: int){\n        @x;\n      }), (fn<<(main/emit :: (E, V) -> V),(local :: H -> X)<(h :: H)>,(div :: X)>>(){\n        val _@0 : ()\n              = (main/range(0, n));\n        (std/core/types/local-get<int,(h :: H),<(div :: X),(main/emit :: (E, V) -> V)>>(s));\n      })));\n  }))","traced":{"any":[]}},
{"op":"Jump","target":46}]},
{"label":"60([mcore:[#136]#209])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Debug","msg":"BGN: genExpr: (forall<(h :: H)> fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(){\n  std/core/hnd/local-var<int,int,(div :: X),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(s: (local-var :: (H, V) -> V)<(h :: H),int>){\n      (main/@handle-emit<int,<(local :: H -> X)<(h :: H)>,(div :: X)>,int>((main/@Hnd-emit<<(local :: H -> X)<(h :: H)>,(div :: X)>,int>(1, (std/core/hnd/Clause1<int,(),(main/emit :: (E, V) -> V),<(local :: H -> X)<(h :: H)>,(div :: X)>,int>((fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(@_wildcard-x691_14: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(h :: H)>,(div :: X)>,int>, @_wildcard-x691_17: (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, x: int){\n            val x@10002 : int;\n            val _ : ();\n            std/core/types/Unit;\n          }))))), (fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(@x: int){\n          @x;\n        }), (fn<<(main/emit :: (E, V) -> V),(local :: H -> X)<(h :: H)>,(div :: X)>>(){\n          val _@0 : ()\n                = (main/range(0, n));\n          (std/core/types/local-get<int,(h :: H),<(div :: X),(main/emit :: (E, V) -> V)>>(s));\n        })));\n    }));\n})()","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(main/@tag-emit)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Swap","a":0,"b":1},
{"op":"Swap","a":2,"b":1},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: (forall<(h :: H)> fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(){\n  std/core/hnd/local-var<int,int,(div :: X),(h :: H)>(0, (fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(s: (local-var :: (H, V) -> V)<(h :: H),int>){\n      (main/@handle-emit<int,<(local :: H -> X)<(h :: H)>,(div :: X)>,int>((main/@Hnd-emit<<(local :: H -> X)<(h :: H)>,(div :: X)>,int>(1, (std/core/hnd/Clause1<int,(),(main/emit :: (E, V) -> V),<(local :: H -> X)<(h :: H)>,(div :: X)>,int>((fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(@_wildcard-x691_14: (hnd/marker :: (E, V) -> V)<<(local :: H -> X)<(h :: H)>,(div :: X)>,int>, @_wildcard-x691_17: (hnd/ev :: ((E, V) -> V) -> V)<(main/emit :: (E, V) -> V)>, x: int){\n            val x@10002 : int;\n            val _ : ();\n            std/core/types/Unit;\n          }))))), (fn<<(local :: H -> X)<(h :: H)>,(div :: X)>>(@x: int){\n          @x;\n        }), (fn<<(main/emit :: (E, V) -> V),(local :: H -> X)<(h :: H)>,(div :: X)>>(){\n          val _@0 : ()\n                = (main/range(0, n));\n          (std/core/types/local-get<int,(h :: H),<(div :: X),(main/emit :: (E, V) -> V)>>(s));\n        })));\n    }));\n})()","traced":{"any":[]}},
{"op":"Jump","target":59}]},
{"label":"61([mcore:[#137]#216])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/os/env)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"CallLib","lib":0,"symbol":"std/os/env/get-args"}]},
{"label":"62([mcore:[#139]#220])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"CallLib","lib":2,"symbol":"std/core/int/parse-int"}]},
{"label":"63([mcore:[#146]#226])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/console)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/console/printsln"}]},
{"label":"64([mcore:[#148]#231])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"CallLib","lib":1,"symbol":"std/core/int/show"}]},
{"label":"65([k@[k@[#255]#264]#269])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/console)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Jump","target":63}]},
{"label":"66([k@[#255]#264])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/console/printsln((std/core/int/show(r)))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/show(r)","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Push","target":65,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/show(r)","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/console/printsln((std/core/int/show(r)))","traced":{"any":[]}},
{"op":"Jump","target":64}]},
{"label":"67([#255])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/hnd)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(main/@tag-emit)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":66,"args":{"any":[]}},
{"op":"Jump","target":60}]},
{"label":"68([match_def@[#274]#275])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"69([match_std/core/types/Just@[#274]#276])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"m@10004\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"15\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"m@10004\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"15\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"70([#274])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"m@10004\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"15\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"m@10004\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"15\",\"type\": {\"op\": \"Top\"}}))","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Just","target":69,"args":{"any":[0]}}],"default":{"tag":"04d98d81-653f-4101-a139-4b376cace7f2#[Missing Tag#516]","target":68,"args":{"any":[]}}}]},
{"label":"71([#277])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"m@10004\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: 5","traced":{"any":[]}},
{"op":"Const","format":"int","out":0,"value":5},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: 5","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"m@10004\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"72([k@[k@[k@[mcore:[#152]#236]#241]#243]#253])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"r\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: main/run((match (m@10004) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n     -> 5;\n  ((@skip std/core/types/Just((x: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n     -> x;\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (m@10004) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n     -> 5;\n  ((@skip std/core/types/Just((x: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n     -> x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"m@10004\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Push","target":67,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"m@10004\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (m@10004) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n     -> 5;\n  ((@skip std/core/types/Just((x: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n     -> x;\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: main/run((match (m@10004) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<int> ) as @pat: ((maybe :: V -> V)<int>))\n     -> 5;\n  ((@skip std/core/types/Just((x: int) : int) : (maybe :: V -> V)<int> ) as @pat@0: ((maybe :: V -> V)<int>))\n     -> x;\n}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"r\",\"type\": {\"op\": \"Int\"}}","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/maybe","scrutinee":0,"clauses":[{"tag":"std/core/types/Nothing","target":71,"args":{"any":[]}}],"default":{"tag":"04d98d81-653f-4101-a139-4b376cace7f2#[Missing Tag#517]","target":70,"args":{"any":[]}}}]},
{"label":"73([k@[k@[mcore:[#152]#236]#241]#243])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/types/@None<bool>","traced":{"any":[]}},
{"op":"Const","format":"string","out":1,"value":"std/core/types/@None"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[1]},"in":{"any":[1]}},
{"op":"Const","format":"string","out":2,"value":"Name(import$std/core/int)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[2]},"in":{"any":[2]}},
{"op":"Push","target":72,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/types/@None<bool>","traced":{"any":[]}},
{"op":"Jump","target":62}]},
{"label":"74([#281])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"PrimOp","name":"non-exhaustive match","out":{"any":[0]},"in":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"75([#282])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"xs@10006\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":""},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"xs@10006\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"76([match_def@[k@[mcore:[#152]#236]#241]#280])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs@10006\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs@10006\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Nil","target":75,"args":{"any":[]}}],"default":{"tag":"04d98d81-653f-4101-a139-4b376cace7f2#[Missing Tag#518]","target":74,"args":{"any":[]}}}]},
{"label":"77([#285])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"BGN: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs@10006\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"13\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"13\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Copy","from":1,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs@10006\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"13\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"13\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"14\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]","traced":{"any":[]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"78([k@[mcore:[#152]#236]#241])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"m@10004\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/int/parse-int((match (xs@10006) {\n    ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n       -> x@0;\n    ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n       -> \"\";\n  }), (std/core/types/@None<bool>))","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: match (xs@10006) {\n  ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> x@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n     -> \"\";\n}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: ifCon@{\"op\": \"Var\",\"id\": \"xs@10006\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"13\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Push","target":73,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: ifCon@{\"op\": \"Var\",\"id\": \"xs@10006\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"13\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch: guard-free case","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genMatch","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: match (xs@10006) {\n  ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> x@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n     -> \"\";\n}","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/int/parse-int((match (xs@10006) {\n    ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n       -> x@0;\n    ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n       -> \"\";\n  }), (std/core/types/@None<bool>))","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"m@10004\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}","traced":{"any":[]}},
{"op":"Match","type":"std/core/types/list","scrutinee":0,"clauses":[{"tag":"std/core/types/Cons","target":77,"args":{"any":[1,2]}}],"default":{"tag":"04d98d81-653f-4101-a139-4b376cace7f2#[Missing Tag#519]","target":76,"args":{"any":[]}}}]},
{"label":"79([mcore:[#152]#236])",
"frameDescriptor":{"regs_any":5},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1,2,3,4]}},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"xs@10006\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/os/env/get-args()","traced":{"any":[]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/os/env)"},
{"op":"PrimOp","name":"getGlobal(String): Ptr","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Push","target":78,"args":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/os/env/get-args()","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"xs@10006\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}","traced":{"any":[]}},
{"op":"Jump","target":61}]},
{"label":"80([mcore:[#153]#191])",
"frameDescriptor":{"regs_any":2},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0,1]}},
{"op":"Construct","out":0,"type":"main/emit","tag":"main/@Hnd-emit","args":{"any":[0,1]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"81([k@[k@[k@[k@[#457]#467]#477]#487]#494])",
"frameDescriptor":{"regs_any":3},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":1,"value":"main/@tag-emit"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"ThisLib_7ef2a110-5da7-44d6-b251-6cf15033b063"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Copy","from":2,"to":0},
{"op":"Return","args":{"any":[0]}}]},
{"label":"82([k@[k@[k@[#457]#467]#477]#487])",
"frameDescriptor":{"regs_any":4},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"Name(main/@tag-emit)"},
{"op":"Debug","msg":"BGN: Def of {\"op\": \"Var\",\"id\": \"main/@tag-emit\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: std/core/hnd/Htag<(main/emit :: (E, V) -> V)>(\"emit@main\")","traced":{"any":[]}},
{"op":"Debug","msg":"BGN: genExpr: \"emit@main\"","traced":{"any":[]}},
{"op":"Const","format":"string","out":2,"value":"emit@main"},
{"op":"Push","target":81,"args":{"any":[0,3]}},
{"op":"Copy","from":2,"to":0},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: \"emit@main\"","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: genExpr: std/core/hnd/Htag<(main/emit :: (E, V) -> V)>(\"emit@main\")","traced":{"any":[]}},
{"op":"Debug","msg":"AFTER TERMINATOR: END: Def of {\"op\": \"Var\",\"id\": \"main/@tag-emit\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/core/hnd/htag\"}}","traced":{"any":[]}},
{"op":"Jump","target":6}]},
{"label":"83([k@[k@[#457]#467]#477])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#67]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_os_env.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/os/env)"},
{"op":"Push","target":82,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"84([k@[#457]#467])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#66]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core)"},
{"op":"Push","target":83,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"85([#457])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#65]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_console.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/console)"},
{"op":"Push","target":84,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"86([k@[k@[k@[k@[#407]#417]#427]#437]#447])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#64]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_delayed.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/delayed)"},
{"op":"Push","target":85,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"87([k@[k@[k@[#407]#417]#427]#437])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#63]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_debug.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/debug)"},
{"op":"Push","target":86,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"88([k@[k@[#407]#417]#427])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#62]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_show.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/show)"},
{"op":"Push","target":87,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"89([k@[#407]#417])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#61]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_tuple.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/tuple)"},
{"op":"Push","target":88,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"90([#407])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#60]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_either.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/either)"},
{"op":"Push","target":89,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"91([k@[k@[k@[k@[#357]#367]#377]#387]#397])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#59]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_maybe.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/maybe)"},
{"op":"Push","target":90,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"92([k@[k@[k@[#357]#367]#377]#387])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#58]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_list.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/list)"},
{"op":"Push","target":91,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"93([k@[k@[#357]#367]#377])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#57]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_sslice.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/sslice)"},
{"op":"Push","target":92,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"94([k@[#357]#367])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#56]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_string.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/string)"},
{"op":"Push","target":93,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"95([#357])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#55]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_vector.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/vector)"},
{"op":"Push","target":94,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"96([k@[k@[k@[k@[#307]#317]#327]#337]#347])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#54]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_int.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/int)"},
{"op":"Push","target":95,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"97([k@[k@[k@[#307]#317]#327]#337])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#53]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_char.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/char)"},
{"op":"Push","target":96,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"98([k@[k@[#307]#317]#327])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#52]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_order.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/order)"},
{"op":"Push","target":97,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"99([k@[#307]#317])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[2,0]}},
{"op":"Const","format":"string","out":0,"value":"[#51]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_bool.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,2]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/bool)"},
{"op":"Push","target":98,"args":{"any":[1,0,3]}},
{"op":"LoadLib","path":2}]},
{"label":"100([#307])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":1,"value":"[#50]"},
{"op":"Const","format":"path","out":3,"value":"$0/./std_core_exn.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,3]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/exn)"},
{"op":"Push","target":99,"args":{"any":[0,1,2]}},
{"op":"LoadLib","path":3}]},
{"label":"101([k@[mcore:[static initializers#168]#287]#297])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[1,0]}},
{"op":"Const","format":"string","out":0,"value":"[#49]"},
{"op":"Const","format":"path","out":1,"value":"$0/./std_core_hnd.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[0]},"in":{"any":[0,1]}},
{"op":"Const","format":"string","out":0,"value":"Name(import$std/core/hnd)"},
{"op":"Push","target":100,"args":{"any":[0,2]}},
{"op":"LoadLib","path":1}]},
{"label":"102([mcore:[static initializers#168]#287])",
"frameDescriptor":{"regs_any":16},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[0]}},
{"op":"Const","format":"string","out":1,"value":"[#48]"},
{"op":"Const","format":"path","out":2,"value":"$0/./std_core_types.rpyeffect"},
{"op":"PrimOp","name":"setGlobal(String, Ptr): Unit","out":{"any":[1]},"in":{"any":[1,2]}},
{"op":"Const","format":"string","out":1,"value":"Name(import$std/core/types)"},
{"op":"Push","target":101,"args":{"any":[1,0]}},
{"op":"LoadLib","path":2}]},
{"label":"103([k@[main entrypoint#2]#504])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"Returned value","traced":{"any":[0]}},
{"op":"Const","format":"string","out":0,"value":"Undefined: is a library"},
{"op":"PrimOp","name":"panic(String): Bottom","out":{"any":[0]},"in":{"any":[0]}},
{"op":"Return","args":{"any":[0]}}]},
{"label":"104([main entrypoint#2])",
"frameDescriptor":{"regs_any":1},
"instructions":[{"op":"Debug","msg":"parameters","traced":{"any":[]}},
{"op":"Copy","from":-1,"to":0},
{"op":"Push","target":103,"args":{"any":[]}},
{"op":"Jump","target":102}]}],
"symbols":[{"name":"main/emit/@cfc","position":2},
{"name":"main/emit/@fun-emit","position":5},
{"name":"main/@handle-emit","position":8},
{"name":"main/@select-emit","position":11},
{"name":"main/emit","position":25},
{"name":"main/range","position":45},
{"name":"main/run","position":60},
{"name":"main/main","position":79},
{"name":"main/@Hnd-emit","position":80},
{"name":"$static-init","position":102},
{"name":"$entrypoint","position":104}],
"frameSize":{"regs_any":16}}