{"metadata": {"generated by": "Koka","koka version": "3.1.2","program name": "std/os/path"},"includes": [],"definitions": [{"name": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_types.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_hnd.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/exn","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_exn.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/bool","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_bool.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/order","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_order.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/char","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_char.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/int","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_int.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/vector","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_vector.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/string","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_string.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_sslice.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/list","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_list.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/maybe","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_maybe.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/either","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_either.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/tuple","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_tuple.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/show","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_show.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/debug","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_debug.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/delayed","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_delayed.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core/console","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core_console.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/core","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_core.rpyeffect"}}}, {"name": {"op": "Var","id": "import$std/text/parse","type": {"op": "Ptr"}},"value": {"op": "LoadLib","path": {"op": "Literal","type": {"op": "String"},"format": "path","value": "$0/./std_text_parse.rpyeffect"}}}, {"name": {"op": "Var","id": "std/os/path/path/root","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/os/path/path"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "path@0","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "path@0","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"0","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"1","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"root\"0","type": {"op": "String"}},"annotation": "genTest: normal: (@x: string) -> {\"op\": \"Var\",\"id\": \"@\\\"root\\\"0\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"path@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"0\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"0\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"1\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"path@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"0\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(path@0: std/os/path/path){\n  match (path@0) {\n    ((@skip std/os/path/Path((@x: string) : string, (@pat@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat: std/os/path/path)\n       -> @x;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/path/root\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/path/root"]}, {"name": {"op": "Var","id": "std/os/path/path/parts","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/os/path/path"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "path@0","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "path@0","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"2","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"3","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"3","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"path@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"2\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"2\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"3\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"path@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"2\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(path@0: std/os/path/path){\n  match (path@0) {\n    ((@skip std/os/path/Path((@pat@0: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat: std/os/path/path)\n       -> @x;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/path/parts\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/path/parts"]}, {"name": {"op": "Var","id": "std/os/path/path/@copy","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/os/path/path"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}}, {"op": "Var","id": "root","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}, {"op": "Var","id": "parts","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/Path","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/Path"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "root","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"4","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"4","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-root@108: string) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"4\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-root@108"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"root\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-root@108,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"4\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-root@108: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"4\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"root\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"4\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "root","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"5","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"6","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"root\"5","type": {"op": "String"}},"annotation": "genTest: normal: (@x: string) -> {\"op\": \"Var\",\"id\": \"@\\\"root\\\"5\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"5\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"5\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"6\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"5\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"6\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@this) {\n  ((@skip std/os/path/Path((@x: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@1: std/os/path/path)\n     -> @x;\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"root\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"root\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (root) {\n  ((std/core/types/@Optional((@uniq-root@108: string) : string) : ? string ) as @pat: ? string)\n     -> @uniq-root@108;\n  ((@skip std/core/types/@None() : ? string ) as @pat@0: ? string)\n     -> (match (@this) {\n      ((@skip std/os/path/Path((@x: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@1: std/os/path/path)\n         -> @x;\n    });\n}"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "parts","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"7","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"7","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-parts@115: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"7\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-parts@115"}}]},"annotation": "genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-parts@115,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"7\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-parts@115: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"7\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"7\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "parts","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@this","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"8","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"9","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"9","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x@0: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: @x@0"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"8\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"8\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"9\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@this\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"8\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"9\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@this) {\n  ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n     -> @x@0;\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (parts) {\n  ((std/core/types/@Optional((@uniq-parts@115: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1@0: ? ((list :: V -> V)<string>))\n     -> @uniq-parts@115;\n  ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n     -> (match (@this) {\n      ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n         -> @x@0;\n    });\n}"}]},"annotation": "genExpr: std/os/path/Path((match (root) {\n    ((std/core/types/@Optional((@uniq-root@108: string) : string) : ? string ) as @pat: ? string)\n       -> @uniq-root@108;\n    ((@skip std/core/types/@None() : ? string ) as @pat@0: ? string)\n       -> (match (@this) {\n        ((@skip std/os/path/Path((@x: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@1: std/os/path/path)\n           -> @x;\n      });\n  }), (match (parts) {\n    ((std/core/types/@Optional((@uniq-parts@115: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1@0: ? ((list :: V -> V)<string>))\n       -> @uniq-parts@115;\n    ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n       -> (match (@this) {\n        ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n           -> @x@0;\n      });\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(@this: std/os/path/path, root: ? string, parts: ? ((list :: V -> V)<string>)){\n  std/os/path/Path((match (root) {\n      ((std/core/types/@Optional((@uniq-root@108: string) : string) : ? string ) as @pat: ? string)\n         -> @uniq-root@108;\n      ((@skip std/core/types/@None() : ? string ) as @pat@0: ? string)\n         -> (match (@this) {\n          ((@skip std/os/path/Path((@x: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@1: std/os/path/path)\n             -> @x;\n        });\n    }), (match (parts) {\n      ((std/core/types/@Optional((@uniq-parts@115: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1@0: ? ((list :: V -> V)<string>))\n         -> @uniq-parts@115;\n      ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n         -> (match (@this) {\n          ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n             -> @x@0;\n        });\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/path/@copy\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/path/@copy"]}, {"name": {"op": "Var","id": "std/os/path/xapp-path","type": {"op": "Function","params": [],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "Primitive","name": "!undefined: std/os/path/@extern-xapp-path","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "String"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "String"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(io :: E)>(){\n  std/os/path/@extern-xapp-path();\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/xapp-path\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/xapp-path"]}, {"name": {"op": "Var","id": "std/os/path/basename","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/os/path/path"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"10","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"11","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"11","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"12","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"13","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"12","type": {"op": "Top"}},"annotation": "genTest: normal: (x@0: string) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"12\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x@0"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"12\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"12\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"13\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"12\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"13\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"11","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x14","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x14","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x14","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"15","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"15","type": {"op": "Top"}},"annotation": "genTest: normal: (x@1: string) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"15\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x@1"}}]},"annotation": "genBranch: [(@pat@0@2,{\"op\": \"Var\",\"id\": \"@x14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"15\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"15\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x14\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"15\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@2: ((maybe :: V -> V)<string>))\n     -> x@1;\n}"}}]},"annotation": "genBranch: [(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@x) {\n  ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> x@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@2: ((maybe :: V -> V)<string>))\n         -> x@1;\n    });\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"10\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"10\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"11\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"10\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"11\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(p: std/os/path/path){\n  match (p) {\n    ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2: std/os/path/path)\n       -> (match (@x) {\n        ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n           -> x@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@2: ((maybe :: V -> V)<string>))\n               -> x@1;\n          });\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/basename\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/basename"]}, {"name": {"op": "Var","id": "std/os/path/nobase","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/os/path/path"}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/Path","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/Path"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x16","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"value": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x16","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"17","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"17","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-root@108: string) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"17\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-root@108"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-root@108,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"17\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-root@108: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"17\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"17\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x16","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"18","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"19","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"root\"18","type": {"op": "String"}},"annotation": "genTest: normal: (@x@0: string) -> {\"op\": \"Var\",\"id\": \"@\\\"root\\\"18\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: @x@0"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"18\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"18\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"19\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@2: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"19\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"18\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"19\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p) {\n  ((@skip std/os/path/Path((@x@0: string) : string, (@pat@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n     -> @x@0;\n}"}}]},"annotation": "genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"@x16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x16\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/types/@None<string>)) {\n  ((std/core/types/@Optional((@uniq-root@108: string) : string) : ? string ) as @pat@3: ? string)\n     -> @uniq-root@108;\n  ((@skip std/core/types/@None() : ? string ) as @pat@0@1: ? string)\n     -> (match (p) {\n      ((@skip std/os/path/Path((@x@0: string) : string, (@pat@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n         -> @x@0;\n    });\n}"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"20","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"21","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"21","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"22","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"23","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"23","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"21\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"22\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"22\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"23\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"21\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"22\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"23\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"21","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<string>"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"21\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"21\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@x) {\n  ((std/core/types/Cons((@pat@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat: ((list :: V -> V)<string>))\n     -> xx;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"20\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"20\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"21\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"20\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"21\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@0: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2: std/os/path/path)\n     -> (match (@x) {\n      ((std/core/types/Cons((@pat@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat: ((list :: V -> V)<string>))\n         -> xx;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n         -> std/core/types/Nil<string>;\n    });\n}"}]},"annotation": "genExpr: std/os/path/Path((match ((std/core/types/@None<string>)) {\n    ((std/core/types/@Optional((@uniq-root@108: string) : string) : ? string ) as @pat@3: ? string)\n       -> @uniq-root@108;\n    ((@skip std/core/types/@None() : ? string ) as @pat@0@1: ? string)\n       -> (match (p) {\n        ((@skip std/os/path/Path((@x@0: string) : string, (@pat@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n           -> @x@0;\n      });\n  }), (match (p) {\n    ((@skip std/os/path/Path((@pat@0@0: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2: std/os/path/path)\n       -> (match (@x) {\n        ((std/core/types/Cons((@pat@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat: ((list :: V -> V)<string>))\n           -> xx;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n           -> std/core/types/Nil<string>;\n      });\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(p: std/os/path/path){\n  std/os/path/Path((match ((std/core/types/@None<string>)) {\n      ((std/core/types/@Optional((@uniq-root@108: string) : string) : ? string ) as @pat@3: ? string)\n         -> @uniq-root@108;\n      ((@skip std/core/types/@None() : ? string ) as @pat@0@1: ? string)\n         -> (match (p) {\n          ((@skip std/os/path/Path((@x@0: string) : string, (@pat@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n             -> @x@0;\n        });\n    }), (match (p) {\n      ((@skip std/os/path/Path((@pat@0@0: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2: std/os/path/path)\n         -> (match (@x) {\n          ((std/core/types/Cons((@pat@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat: ((list :: V -> V)<string>))\n             -> xx;\n          ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n             -> std/core/types/Nil<string>;\n        });\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/nobase\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/nobase"]}, {"name": {"op": "Var","id": "std/os/path/split-parts","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "parts","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<string,(list :: V -> V)<string>>"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "parts","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"24","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"25","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"24","type": {"op": "Top"}},"annotation": "genTest: normal: (x@0: string) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"24\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x@0"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"24\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"24\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"25\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"25\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"24\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"25\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "parts","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x26","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x26","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x26","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"27","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"27","type": {"op": "Top"}},"annotation": "genTest: normal: (x@1: string) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"27\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x@1"}}]},"annotation": "genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"@x26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"27\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"27\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x26\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"27\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@1: ((maybe :: V -> V)<string>))\n     -> x@1;\n}"}}]},"annotation": "genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (parts) {\n  ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> x@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@1: ((maybe :: V -> V)<string>))\n         -> x@1;\n    });\n}"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "parts","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"28","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"29","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"29","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"29\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(@pat@0@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"28\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"28\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"29\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"29\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"28\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"29\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "parts","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<string>"}}]},"annotation": "genBranch: [(@pat@1@1,{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (parts) {\n  ((std/core/types/Cons((@pat@0@1@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n     -> xx;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1: ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}"}]},"annotation": "genExpr: std/core/types/Tuple2<string,(list :: V -> V)<string>>((match (parts) {\n    ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n       -> x@0;\n    ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n       -> (match ((std/core/types/Nothing<string>)) {\n        ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat: ((maybe :: V -> V)<string>))\n           -> \"\";\n        ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@1: ((maybe :: V -> V)<string>))\n           -> x@1;\n      });\n  }), (match (parts) {\n    ((std/core/types/Cons((@pat@0@1@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n       -> xx;\n    ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1: ((list :: V -> V)<string>))\n       -> std/core/types/Nil<string>;\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(parts: (list :: V -> V)<string>){\n  std/core/types/Tuple2<string,(list :: V -> V)<string>>((match (parts) {\n      ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n         -> x@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n         -> (match ((std/core/types/Nothing<string>)) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat: ((maybe :: V -> V)<string>))\n             -> \"\";\n          ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@1: ((maybe :: V -> V)<string>))\n             -> x@1;\n        });\n    }), (match (parts) {\n      ((std/core/types/Cons((@pat@0@1@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n         -> xx;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1: ((list :: V -> V)<string>))\n         -> std/core/types/Nil<string>;\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/split-parts\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/split-parts"]}, {"name": {"op": "Var","id": "std/os/path/xrealpath","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "p","type": {"op": "String"}}],"body": {"op": "Primitive","name": "!undefined: std/os/path/@extern-xrealpath","args": [{"op": "Var","id": "p","type": {"op": "String"}}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "String"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "String"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(io :: E)>(p: string){\n  std/os/path/@extern-xrealpath(p);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/xrealpath\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/xrealpath"]}, {"name": {"op": "Var","id": "std/os/path/dirname","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/os/path/path"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "xs@10015","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/list","type": {"op": "Ptr"}},"name": "std/core/list/@lift-reverse-append@4790","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-reverse-append@4790<string>"},"args": [{"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<string>"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"30","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"31","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"31","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x@0: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"32","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"33","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"33","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx@0: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"33\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx@0"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"32\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"32\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"33\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"33\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"32\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"33\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"31","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x@0: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<string>"}}]},"annotation": "genBranch: [(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@x@0) {\n  ((std/core/types/Cons((@pat@0@0: string) : string, (xx@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@3: ((list :: V -> V)<string>))\n     -> xx@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"30\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"30\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"30\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n     -> (match (@x@0) {\n      ((std/core/types/Cons((@pat@0@0: string) : string, (xx@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@3: ((list :: V -> V)<string>))\n         -> xx@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n         -> std/core/types/Nil<string>;\n    });\n}"}]},"annotation": "genExpr: std/core/list/@lift-reverse-append@4790<string>((std/core/types/Nil<string>), (match (p) {\n    ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n       -> (match (@x@0) {\n        ((std/core/types/Cons((@pat@0@0: string) : string, (xx@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@3: ((list :: V -> V)<string>))\n           -> xx@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n           -> std/core/types/Nil<string>;\n      });\n  }))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"xs@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"export_as": ["xs@10015"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"30","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"31","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"root\"30","type": {"op": "String"}},"annotation": "genTest: normal: (@x: string) -> {\"op\": \"Var\",\"id\": \"@\\\"root\\\"30\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"30\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"30\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"31\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"30\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"31\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p) {\n  ((@skip std/os/path/Path((@x: string) : string, (@pat@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat: std/os/path/path)\n     -> @x;\n}"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs@10015","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs@10015","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"32","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"33","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/list","type": {"op": "Ptr"}},"name": "std/core/list/@lift-joinsep@4797","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-joinsep@4797"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "/"},"annotation": "genExpr: \"/\""}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"33","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"33\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"32","type": {"op": "Top"}},"annotation": "genTest: normal: (x: string) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"32\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}]},"annotation": "genExpr: std/core/list/@lift-joinsep@4797(\"/\", xx, x)"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"32\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"32\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"33\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"33\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs@10015\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"32\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"33\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (xs@10015) {\n  ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n     -> std/core/list/@lift-joinsep@4797(\"/\", xx, x);\n}"}]},"annotation": "genExpr: std/core/types/(++)((match (p) {\n    ((@skip std/os/path/Path((@x: string) : string, (@pat@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat: std/os/path/path)\n       -> @x;\n  }), (match (xs@10015) {\n    ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n       -> \"\";\n    ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n       -> std/core/list/@lift-joinsep@4797(\"/\", xx, x);\n  }))"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(p: std/os/path/path){\n  val xs@10015 : (list :: V -> V)<string>\n        = std/core/list/@lift-reverse-append@4790<string>((std/core/types/Nil<string>), (match (p) {\n            ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n               -> (match (@x@0) {\n                ((std/core/types/Cons((@pat@0@0: string) : string, (xx@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@3: ((list :: V -> V)<string>))\n                   -> xx@0;\n                ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n                   -> std/core/types/Nil<string>;\n              });\n          }));\n  std/core/types/(++)((match (p) {\n      ((@skip std/os/path/Path((@x: string) : string, (@pat@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat: std/os/path/path)\n         -> @x;\n    }), (match (xs@10015) {\n      ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n         -> std/core/list/@lift-joinsep@4797(\"/\", xx, x);\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/dirname\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/dirname"]}, {"name": {"op": "Var","id": "std/os/path/dirparts","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/os/path/path"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/list","type": {"op": "Ptr"}},"name": "std/core/list/@lift-reverse-append@4790","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-reverse-append@4790<string>"},"args": [{"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<string>"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"34","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"35","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"35","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"35\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"34\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"34\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"35\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"35\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"34\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"35\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat: std/os/path/path)\n     -> @x;\n}"}]},"annotation": "genExpr: std/core/list/@lift-reverse-append@4790<string>((std/core/types/Nil<string>), (match (p) {\n    ((@skip std/os/path/Path((@pat@0: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat: std/os/path/path)\n       -> @x;\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(p: std/os/path/path){\n  std/core/list/@lift-reverse-append@4790<string>((std/core/types/Nil<string>), (match (p) {\n      ((@skip std/os/path/Path((@pat@0: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat: std/os/path/path)\n         -> @x;\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/dirparts\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/dirparts"]}, {"name": {"op": "Var","id": "std/os/path/xhomedir","type": {"op": "Function","params": [],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "Primitive","name": "!undefined: std/os/path/@extern-xhomedir","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "String"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "String"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(io :: E)>(){\n  std/os/path/@extern-xhomedir();\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/xhomedir\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/xhomedir"]}, {"name": {"op": "Var","id": "std/os/path/nodir","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/os/path/path"}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "parts@10024","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@Optional","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"@optional\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/@Optional<(list :: V -> V)<string>>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/list","type": {"op": "Ptr"}},"name": "std/core/list/take","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/take<string>"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"36","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"37","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"37","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x@1: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"37\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: @x@1"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"36\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"36\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"37\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"37\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"36\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"37\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n     -> @x@1;\n}"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}]},"annotation": "genExpr: std/core/list/take<string>((match (p) {\n    ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n       -> @x@1;\n  }), 1)"}]},"annotation": "genExpr: std/core/types/@Optional<(list :: V -> V)<string>>((std/core/list/take<string>((match (p) {\n    ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n       -> @x@1;\n  }), 1)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"parts@10024\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}"},"export_as": ["parts@10024"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/Path","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/Path"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "parts@10024","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"36","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"36","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-parts@115: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"36\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-parts@115"}}]},"annotation": "genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"parts@10024\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-parts@115,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"36\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-parts@115: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"36\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"parts@10024\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"36\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "parts@10024","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"37","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"38","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"38","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x@0: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"38\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: @x@0"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"37\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"37\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"38\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"38\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"37\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"38\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n     -> @x@0;\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"parts@10024\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"parts@10024\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (parts@10024) {\n  ((std/core/types/@Optional((@uniq-parts@115: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1@0: ? ((list :: V -> V)<string>))\n     -> @uniq-parts@115;\n  ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n     -> (match (p) {\n      ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n         -> @x@0;\n    });\n}"}]},"annotation": "genExpr: std/os/path/Path(\"\", (match (parts@10024) {\n    ((std/core/types/@Optional((@uniq-parts@115: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1@0: ? ((list :: V -> V)<string>))\n       -> @uniq-parts@115;\n    ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n       -> (match (p) {\n        ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n           -> @x@0;\n      });\n  }))"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(p: std/os/path/path){\n  val parts@10024 : ? ((list :: V -> V)<string>)\n        = std/core/types/@Optional<(list :: V -> V)<string>>((std/core/list/take<string>((match (p) {\n            ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n               -> @x@1;\n          }), 1)));\n  std/os/path/Path(\"\", (match (parts@10024) {\n      ((std/core/types/@Optional((@uniq-parts@115: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1@0: ? ((list :: V -> V)<string>))\n         -> @uniq-parts@115;\n      ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n         -> (match (p) {\n          ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n             -> @x@0;\n        });\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/nodir\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/nodir"]}, {"name": {"op": "Var","id": "std/os/path/parentname","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/os/path/path"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"39","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"40","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x41","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"value": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"40","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"40\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"42","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"43","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"43","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"43\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"40\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"40\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"42\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"42\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"43\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"43\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"40\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"40\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"42\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"43\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"40","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"40\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<string>"}}]},"annotation": "genBranch: [(@pat@1@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"40\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"40\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"40\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"40\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x41","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"44","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"45","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"44","type": {"op": "Top"}},"annotation": "genTest: normal: (x@0: string) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"44\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x@0"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x41\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"44\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"44\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"45\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"45\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x41\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"44\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"45\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x41","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x46","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x46","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x46\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x46\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x46","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"47","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"47","type": {"op": "Top"}},"annotation": "genTest: normal: (x@1: string) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"47\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x@1"}}]},"annotation": "genBranch: [(@pat@0@3,{\"op\": \"Var\",\"id\": \"@x46\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"47\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"47\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x46\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"47\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n     -> x@1;\n}"}}]},"annotation": "genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"@x41\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x41\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((match (@x) {\n  ((std/core/types/Cons((@pat@0@1: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n     -> xx;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1: ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n})) {\n  ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> x@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n         -> x@1;\n    });\n}"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"39\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"39\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"40\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"40\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"39\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"40\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(p: std/os/path/path){\n  match (p) {\n    ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n       -> (match ((match (@x) {\n        ((std/core/types/Cons((@pat@0@1: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n           -> xx;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1: ((list :: V -> V)<string>))\n           -> std/core/types/Nil<string>;\n      })) {\n        ((std/core/types/Cons((x@0: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n           -> x@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n               -> x@1;\n          });\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/parentname\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/parentname"]}, {"name": {"op": "Var","id": "std/os/path/partsep","type": {"op": "Function","params": [],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "Primitive","name": "!undefined: std/os/path/@extern-partsep","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "String"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "String"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(ndet :: X)>(){\n  std/os/path/@extern-partsep();\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/partsep\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/partsep"]}, {"name": {"op": "Var","id": "std/os/path/pathsep","type": {"op": "Function","params": [],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "Primitive","name": "!undefined: std/os/path/@extern-pathsep","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "String"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "String"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(ndet :: X)>(){\n  std/os/path/@extern-pathsep();\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/pathsep\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/pathsep"]}, {"name": {"op": "Var","id": "std/os/path/rootname","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/os/path/path"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"48","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"49","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"root\"48","type": {"op": "String"}},"annotation": "genTest: normal: (@x: string) -> {\"op\": \"Var\",\"id\": \"@\\\"root\\\"48\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"48\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"48\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"49\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"49\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"48\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"49\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(p: std/os/path/path){\n  match (p) {\n    ((@skip std/os/path/Path((@x: string) : string, (@pat@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat: std/os/path/path)\n       -> @x;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/rootname\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/rootname"]}, {"name": {"op": "Var","id": "std/os/path/xtempdir","type": {"op": "Function","params": [],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "Primitive","name": "!undefined: std/os/path/@extern-xtempdir","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "String"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "String"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(io :: E)>(){\n  std/os/path/@extern-xtempdir();\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/xtempdir\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/xtempdir"]}, {"name": {"op": "Var","id": "std/os/path/is-empty","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/os/path/path"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x50","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixEq(String, String): Boolean","args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"51","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"52","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"root\"51","type": {"op": "String"}},"annotation": "genTest: normal: (@x: string) -> {\"op\": \"Var\",\"id\": \"@\\\"root\\\"51\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"51\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"51\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"52\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"52\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"51\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"52\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p) {\n  ((@skip std/os/path/Path((@x: string) : string, (@pat@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat: std/os/path/path)\n     -> @x;\n}"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/string/(==)((match (p) {\n    ((@skip std/os/path/Path((@x: string) : string, (@pat@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat: std/os/path/path)\n       -> @x;\n  }), \"\")"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x50","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"53","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"54","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"54","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x@0: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"54\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"54\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"54\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"54\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"54\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"54\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"54\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@x@0) {\n  ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n     -> std/core/types/True;\n  (@pat@0@0: ((list :: V -> V)<string>))\n     -> std/core/types/False;\n}"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"53\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"53\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"54\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"54\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"53\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"54\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n     -> (match (@x@0) {\n      ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n         -> std/core/types/True;\n      (@pat@0@0: ((list :: V -> V)<string>))\n         -> std/core/types/False;\n    });\n}"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x50\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@0@2,{\"op\": \"Var\",\"id\": \"@x50\",\"type\": {\"op\": \"Bool\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(p: std/os/path/path){\n  match ((std/core/string/(==)((match (p) {\n      ((@skip std/os/path/Path((@x: string) : string, (@pat@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat: std/os/path/path)\n         -> @x;\n    }), \"\"))) {\n    ((std/core/types/True() : bool ) as @pat@1: bool)\n       -> (match (p) {\n        ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n           -> (match (@x@0) {\n            ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n               -> std/core/types/True;\n            (@pat@0@0: ((list :: V -> V)<string>))\n               -> std/core/types/False;\n          });\n      });\n    (@pat@0@2: bool)\n       -> std/core/types/False;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/is-empty\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/is-empty"]}, {"name": {"op": "Var","id": "std/os/path/(||)","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/os/path/path"}, {"op": "Ptr","extern_ptr_name": "std/os/path/path"}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "p1","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}}, {"op": "Var","id": "p2","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x55","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixEq(String, String): Boolean","args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p1","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"56","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"57","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"root\"56","type": {"op": "String"}},"annotation": "genTest: normal: (@x: string) -> {\"op\": \"Var\",\"id\": \"@\\\"root\\\"56\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"p1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"56\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"56\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"57\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"57\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"56\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"57\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p1) {\n  ((@skip std/os/path/Path((@x: string) : string, (@pat@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat: std/os/path/path)\n     -> @x;\n}"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/string/(==)((match (p1) {\n    ((@skip std/os/path/Path((@x: string) : string, (@pat@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat: std/os/path/path)\n       -> @x;\n  }), \"\")"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x55","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p1","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"58","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"59","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"59","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x@0: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"59\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "p2","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"annotation": "genExpr: p2"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"59\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"59\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"59\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"59\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "p1","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"annotation": "genExpr: p1"}}]},"annotation": "genBranch: [(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"59\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"59\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@x@0) {\n  ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n     -> p2;\n  (@pat@0@0: ((list :: V -> V)<string>))\n     -> p1;\n}"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"p1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"58\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"58\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"59\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"59\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"58\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"59\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p1) {\n  ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n     -> (match (@x@0) {\n      ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n         -> p2;\n      (@pat@0@0: ((list :: V -> V)<string>))\n         -> p1;\n    });\n}"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x55\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "p1","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"annotation": "genExpr: p1"}}]},"annotation": "genBranch: [(@pat@0@2,{\"op\": \"Var\",\"id\": \"@x55\",\"type\": {\"op\": \"Bool\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(p1: std/os/path/path, p2: std/os/path/path){\n  match ((std/core/string/(==)((match (p1) {\n      ((@skip std/os/path/Path((@x: string) : string, (@pat@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat: std/os/path/path)\n         -> @x;\n    }), \"\"))) {\n    ((std/core/types/True() : bool ) as @pat@1: bool)\n       -> (match (p1) {\n        ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n           -> (match (@x@0) {\n            ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n               -> p2;\n            (@pat@0@0: ((list :: V -> V)<string>))\n               -> p1;\n          });\n      });\n    (@pat@0@2: bool)\n       -> p1;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/(||)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/(||)"]}, {"name": {"op": "Var","id": "std/os/path/push-part","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "dir","type": {"op": "String"}}, {"op": "Var","id": "dirs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(String, String): Boolean","args": [{"op": "Var","id": "dir","type": {"op": "String"}}, {"op": "Literal","type": {"op": "String"},"value": "."}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "dirs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: dirs"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"dir\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \".\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(String, String): Boolean","args": [{"op": "Var","id": "dir","type": {"op": "String"}}, {"op": "Literal","type": {"op": "String"},"value": ""}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "dirs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: dirs"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"dir\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(String, String): Boolean","args": [{"op": "Var","id": "dir","type": {"op": "String"}}, {"op": "Literal","type": {"op": "String"},"value": ""}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(String, String): Boolean","args": [{"op": "Var","id": "dir","type": {"op": "String"}}, {"op": "Literal","type": {"op": "String"},"value": ".."}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "dirs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"60","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"61","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "dirs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"62","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"63","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"63","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"63\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}}]},"annotation": "genBranch: [(@pat@6,{\"op\": \"Var\",\"id\": \"dirs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"62\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"62\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"63\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"63\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"dirs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"62\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"63\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "dirs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<string>"}}]},"annotation": "genBranch: [(@pat@1@1,{\"op\": \"Var\",\"id\": \"dirs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"dirs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (dirs) {\n  ((std/core/types/Cons((@pat@0@1: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@6: ((list :: V -> V)<string>))\n     -> xx;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1: ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"dirs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"60\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"60\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"61\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@1@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"61\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"dirs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"60\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"61\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "dirs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<string>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "dir","type": {"op": "String"}},"annotation": "genExpr: dir"}, {"op": "DebugWrap","inner": {"op": "Var","id": "dirs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: dirs"}]},"annotation": "genExpr: std/core/types/Cons<string>(dir, dirs)"}}]},"annotation": "genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"dirs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"dirs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (dirs) {\n  ((std/core/types/Cons((@pat@0@0: string) : string, (@pat@1@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@4: ((list :: V -> V)<string>))\n     -> (match (dirs) {\n      ((std/core/types/Cons((@pat@0@1: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@6: ((list :: V -> V)<string>))\n         -> xx;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1: ((list :: V -> V)<string>))\n         -> std/core/types/Nil<string>;\n    });\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@2@0: ((list :: V -> V)<string>))\n     -> std/core/types/Cons<string>(dir, dirs);\n}"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"dir\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"..\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<string>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "dir","type": {"op": "String"}},"annotation": "genExpr: dir"}, {"op": "DebugWrap","inner": {"op": "Var","id": "dirs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: dirs"}]},"annotation": "genExpr: std/core/types/Cons<string>(dir, dirs)"}}]},"annotation": "genBranch: [(@pat@4@0,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"dir\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"..\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/string/(==)(dir, \"..\"))) {\n  ((std/core/types/True() : bool ) as @pat@3: bool)\n     -> (match (dirs) {\n      ((std/core/types/Cons((@pat@0@0: string) : string, (@pat@1@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@4: ((list :: V -> V)<string>))\n         -> (match (dirs) {\n          ((std/core/types/Cons((@pat@0@1: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@6: ((list :: V -> V)<string>))\n             -> xx;\n          ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1: ((list :: V -> V)<string>))\n             -> std/core/types/Nil<string>;\n        });\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@2@0: ((list :: V -> V)<string>))\n         -> std/core/types/Cons<string>(dir, dirs);\n    });\n  (@pat@4@0: bool)\n     -> std/core/types/Cons<string>(dir, dirs);\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"dir\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/string/(==)(dir, \"\"))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> dirs;\n  ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n     -> (match ((std/core/string/(==)(dir, \"..\"))) {\n      ((std/core/types/True() : bool ) as @pat@3: bool)\n         -> (match (dirs) {\n          ((std/core/types/Cons((@pat@0@0: string) : string, (@pat@1@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@4: ((list :: V -> V)<string>))\n             -> (match (dirs) {\n              ((std/core/types/Cons((@pat@0@1: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@6: ((list :: V -> V)<string>))\n                 -> xx;\n              ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1: ((list :: V -> V)<string>))\n                 -> std/core/types/Nil<string>;\n            });\n          ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@2@0: ((list :: V -> V)<string>))\n             -> std/core/types/Cons<string>(dir, dirs);\n        });\n      (@pat@4@0: bool)\n         -> std/core/types/Cons<string>(dir, dirs);\n    });\n}"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"dir\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \".\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(dir: string, dirs: (list :: V -> V)<string>){\n  match ((std/core/string/(==)(dir, \".\"))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> dirs;\n    (@pat@0: bool)\n       -> (match ((std/core/string/(==)(dir, \"\"))) {\n        ((std/core/types/True() : bool ) as @pat@1: bool)\n           -> dirs;\n        ((@skip std/core/types/False() : bool ) as @pat@2: bool)\n           -> (match ((std/core/string/(==)(dir, \"..\"))) {\n            ((std/core/types/True() : bool ) as @pat@3: bool)\n               -> (match (dirs) {\n                ((std/core/types/Cons((@pat@0@0: string) : string, (@pat@1@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@4: ((list :: V -> V)<string>))\n                   -> (match (dirs) {\n                    ((std/core/types/Cons((@pat@0@1: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@6: ((list :: V -> V)<string>))\n                       -> xx;\n                    ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1: ((list :: V -> V)<string>))\n                       -> std/core/types/Nil<string>;\n                  });\n                ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@2@0: ((list :: V -> V)<string>))\n                   -> std/core/types/Cons<string>(dir, dirs);\n              });\n            (@pat@4@0: bool)\n               -> std/core/types/Cons<string>(dir, dirs);\n          });\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/push-part\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/push-part"]}, {"name": {"op": "Var","id": "std/os/path/push-parts","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "parts","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}, {"op": "Var","id": "dirs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "parts","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"64","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"65","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/push-parts","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/push-parts"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"65","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (rest: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"65\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: rest"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/push-part","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/push-part"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"64","type": {"op": "Top"}},"annotation": "genTest: normal: (part: string) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"64\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: part"}, {"op": "DebugWrap","inner": {"op": "Var","id": "dirs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: dirs"}]},"annotation": "genExpr: std/os/path/push-part(part, dirs)"}]},"annotation": "genExpr: std/os/path/push-parts(rest, (std/os/path/push-part(part, dirs)))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(part,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"64\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (part: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"64\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"65\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (rest: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"65\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"64\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"65\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "parts","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "dirs","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: dirs"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(parts: (list :: V -> V)<string>, dirs: (list :: V -> V)<string>){\n  match (parts) {\n    ((std/core/types/Cons((part: string) : string, (rest: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat: ((list :: V -> V)<string>))\n       -> std/os/path/push-parts(rest, (std/os/path/push-part(part, dirs)));\n    ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@0: ((list :: V -> V)<string>))\n       -> dirs;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/push-parts\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/push-parts"]}, {"name": {"op": "Var","id": "std/os/path/proot","type": {"op": "Function","params": [],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "_@3","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/text/parse","type": {"op": "Ptr"}},"name": "std/text/parse/(||)","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/(||)<(),(total :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "_","type": {"op": "Ptr","extern_ptr_name": "\"char\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/text/parse","type": {"op": "Ptr"}},"name": "std/text/parse/alpha","type": {"op": "Function","params": [],"return": {"op": "Ptr","extern_ptr_name": "\"char\""},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/alpha"},"args": []},"annotation": "genExpr: std/text/parse/alpha()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}"},"export_as": ["_"]}, {"name": {"op": "Var","id": "_@0","type": {"op": "Ptr","extern_ptr_name": "\"char\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/text/parse","type": {"op": "Ptr"}},"name": "std/text/parse/char","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Ptr","extern_ptr_name": "\"char\""},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/char"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ":"},"annotation": "genExpr: ':'"}]},"annotation": "genExpr: std/text/parse/char(':')"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}"},"export_as": ["_@0"]}],"body": {"op": "Literal","type": {"op": "Unit"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(std/text/parse/parse :: (E, V) -> V)>(){\n  val _ : char;\n  val _@0 : char;\n  std/core/types/Unit;\n}"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "_@1","type": {"op": "Ptr","extern_ptr_name": "\"char\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/text/parse","type": {"op": "Ptr"}},"name": "std/text/parse/char","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Ptr","extern_ptr_name": "\"char\""},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/char"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "/"},"annotation": "genExpr: '/'"}]},"annotation": "genExpr: std/text/parse/char('/')"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_@1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}"},"export_as": ["_@1"]}, {"name": {"op": "Var","id": "_@2","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<char>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/text/parse","type": {"op": "Ptr"}},"name": "std/text/parse/none-of","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "\"char\""},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/none-of"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "/"},"annotation": "genExpr: \"/\""}]},"annotation": "genExpr: std/text/parse/none-of(\"/\")"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/text/parse","type": {"op": "Ptr"}},"name": "std/text/parse/many-acc","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/many-acc<char,(total :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/text/parse","type": {"op": "Ptr"}},"name": "std/text/parse/none-of","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "\"char\""},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/none-of"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "/"},"annotation": "genExpr: \"/\""}]},"annotation": "genExpr: std/text/parse/none-of(\"/\")"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(std/text/parse/parse :: (E, V) -> V)>(){\n  std/text/parse/none-of(\"/\");\n}"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<char>"}]},"annotation": "genExpr: std/text/parse/many-acc<char,(total :: E)>((fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    (std/text/parse/none-of(\"/\"));\n  }), (std/core/types/Nil<char>))"}]},"annotation": "genExpr: std/core/types/Cons<char>((std/text/parse/none-of(\"/\")), (std/text/parse/many-acc<char,(total :: E)>((fn<(std/text/parse/parse :: (E, V) -> V)>(){\n      (std/text/parse/none-of(\"/\"));\n    }), (std/core/types/Nil<char>))))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_@2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"export_as": ["_@2"]}],"body": {"op": "Literal","type": {"op": "Unit"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(std/text/parse/parse :: (E, V) -> V)>(){\n  val _@1 : char;\n  val _@2 : (list :: V -> V)<char>;\n  std/core/types/Unit;\n}"}]},"annotation": "genExpr: std/text/parse/(||)<(),(total :: E)>((fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    val _ : char;\n    val _@0 : char;\n    std/core/types/Unit;\n  }), (fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    val _@1 : char;\n    val _@2 : ((list :: V -> V)<char>);\n    std/core/types/Unit;\n  }))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_@3\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_@3"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/text/parse","type": {"op": "Ptr"}},"name": "std/text/parse/(||)","type": {"op": "Function","params": [{"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/(||)<bool,(total :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "_@4","type": {"op": "Ptr","extern_ptr_name": "\"char\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/text/parse","type": {"op": "Ptr"}},"name": "std/text/parse/char","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Ptr","extern_ptr_name": "\"char\""},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/char"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "/"},"annotation": "genExpr: '/'"}]},"annotation": "genExpr: std/text/parse/char('/')"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_@4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"char\\\"\"}}"},"export_as": ["_@4"]}],"body": {"op": "Literal","value": false,"type": {"op": "Bool"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(std/text/parse/parse :: (E, V) -> V)>(){\n  val _@4 : char\n        = std/text/parse/char('/');\n  std/core/types/False;\n}"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "_@5","type": {"op": "Unit"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/text/parse","type": {"op": "Ptr"}},"name": "std/text/parse/eof","type": {"op": "Function","params": [],"return": {"op": "Unit"},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/eof"},"args": []},"annotation": "genExpr: std/text/parse/eof()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"_@5\",\"type\": {\"op\": \"Unit\"}}"},"export_as": ["_@5"]}],"body": {"op": "Literal","value": true,"type": {"op": "Bool"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(std/text/parse/parse :: (E, V) -> V)>(){\n  val _@5 : ()\n        = std/text/parse/eof();\n  std/core/types/True;\n}"}]},"annotation": "genExpr: std/text/parse/(||)<bool,(total :: E)>((fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    val _@4 : char\n          = (std/text/parse/char('/'));\n    std/core/types/False;\n  }), (fn<(std/text/parse/parse :: (E, V) -> V)>(){\n    val _@5 : ()\n          = (std/text/parse/eof());\n    std/core/types/True;\n  }))"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(std/text/parse/parse :: (E, V) -> V)>(){\n  val _@3 : ()\n        = std/text/parse/(||)<(),(total :: E)>((fn<(std/text/parse/parse :: (E, V) -> V)>(){\n            val _ : char;\n            val _@0 : char;\n            std/core/types/Unit;\n          }), (fn<(std/text/parse/parse :: (E, V) -> V)>(){\n            val _@1 : char;\n            val _@2 : ((list :: V -> V)<char>);\n            std/core/types/Unit;\n          }));\n  std/text/parse/(||)<bool,(total :: E)>((fn<(std/text/parse/parse :: (E, V) -> V)>(){\n      val _@4 : char\n            = (std/text/parse/char('/'));\n      std/core/types/False;\n    }), (fn<(std/text/parse/parse :: (E, V) -> V)>(){\n      val _@5 : ()\n            = (std/text/parse/eof());\n      std/core/types/True;\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/proot\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/proot"]}, {"name": {"op": "Var","id": "std/os/path/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/os/path/path"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "xs@10042","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/list","type": {"op": "Ptr"}},"name": "std/core/list/@lift-reverse-append@4790","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-reverse-append@4790<string>"},"args": [{"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<string>"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"66","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"67","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"67","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x@0: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"67\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: @x@0"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"66\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"66\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"67\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"67\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"66\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"67\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n     -> @x@0;\n}"}]},"annotation": "genExpr: std/core/list/@lift-reverse-append@4790<string>((std/core/types/Nil<string>), (match (p) {\n    ((@skip std/os/path/Path((@pat@0@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n       -> @x@0;\n  }))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"xs@10042\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"export_as": ["xs@10042"]}, {"name": {"op": "Var","id": "s","type": {"op": "String"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"68","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"69","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"root\"68","type": {"op": "String"}},"annotation": "genTest: normal: (@x: string) -> {\"op\": \"Var\",\"id\": \"@\\\"root\\\"68\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"68\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"68\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"69\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"69\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"68\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"69\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p) {\n  ((@skip std/os/path/Path((@x: string) : string, (@pat@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat: std/os/path/path)\n     -> @x;\n}"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs@10042","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"xs@10042\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs@10042\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "xs@10042","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"70","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"71","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/list","type": {"op": "Ptr"}},"name": "std/core/list/@lift-joinsep@4797","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-joinsep@4797"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "/"},"annotation": "genExpr: \"/\""}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"71","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"71\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"70","type": {"op": "Top"}},"annotation": "genTest: normal: (x: string) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"70\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}]},"annotation": "genExpr: std/core/list/@lift-joinsep@4797(\"/\", xx, x)"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"xs@10042\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"70\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"70\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"71\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"71\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"xs@10042\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"70\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"71\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (xs@10042) {\n  ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n     -> std/core/list/@lift-joinsep@4797(\"/\", xx, x);\n}"}]},"annotation": "genExpr: std/core/types/(++)((match (p) {\n    ((@skip std/os/path/Path((@x: string) : string, (@pat@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat: std/os/path/path)\n       -> @x;\n  }), (match (xs@10042) {\n    ((std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n       -> \"\";\n    ((@skip std/core/types/Cons((x: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2: ((list :: V -> V)<string>))\n       -> std/core/list/@lift-joinsep@4797(\"/\", xx, x);\n  }))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"s\",\"type\": {\"op\": \"String\"}}"},"export_as": ["s"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(String, String): Boolean","args": [{"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Literal","type": {"op": "String"},"value": ""}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "."},"annotation": "genExpr: \".\""}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"s\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(String, String): Boolean","args": [{"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Literal","type": {"op": "String"},"value": ""}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}}]},"annotation": "genBranch: [(@pat@0@1,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"s\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(p: std/os/path/path){\n  val xs@10042 : (list :: V -> V)<string>;\n  val s : string;\n  match ((std/core/string/(==)(s, \"\"))) {\n    ((std/core/types/True() : bool ) as @pat@4: bool)\n       -> \".\";\n    ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n       -> s;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/string\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/string"]}, {"name": {"op": "Var","id": "std/os/path/@create-Path","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"@optional\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "root","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}, {"op": "Var","id": "parts","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/Path","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/Path"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "root","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"66","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"66","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-root@801: string) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"66\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-root@801"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"root\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-root@801,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"66\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-root@801: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"66\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"root\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"66\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "root","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"root\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"root\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (root) {\n  ((std/core/types/@Optional((@uniq-root@801: string) : string) : ? string ) as @pat: ? string)\n     -> @uniq-root@801;\n  ((@skip std/core/types/@None() : ? string ) as @pat@0: ? string)\n     -> \"\";\n}"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "parts","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"67","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"67","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-parts@807: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"67\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-parts@807"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-parts@807,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"67\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-parts@807: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"67\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"67\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "parts","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<string>"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (parts) {\n  ((std/core/types/@Optional((@uniq-parts@807: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1: ? ((list :: V -> V)<string>))\n     -> @uniq-parts@807;\n  ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}"}]},"annotation": "genExpr: std/os/path/Path((match (root) {\n    ((std/core/types/@Optional((@uniq-root@801: string) : string) : ? string ) as @pat: ? string)\n       -> @uniq-root@801;\n    ((@skip std/core/types/@None() : ? string ) as @pat@0: ? string)\n       -> \"\";\n  }), (match (parts) {\n    ((std/core/types/@Optional((@uniq-parts@807: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1: ? ((list :: V -> V)<string>))\n       -> @uniq-parts@807;\n    ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n       -> std/core/types/Nil<string>;\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(root: ? string, parts: ? ((list :: V -> V)<string>)){\n  std/os/path/Path((match (root) {\n      ((std/core/types/@Optional((@uniq-root@801: string) : string) : ? string ) as @pat: ? string)\n         -> @uniq-root@801;\n      ((@skip std/core/types/@None() : ? string ) as @pat@0: ? string)\n         -> \"\";\n    }), (match (parts) {\n      ((std/core/types/@Optional((@uniq-parts@807: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1: ? ((list :: V -> V)<string>))\n         -> @uniq-parts@807;\n      ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n         -> std/core/types/Nil<string>;\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/@create-Path\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/@create-Path"]}, {"name": {"op": "Var","id": "std/os/path/path-parts","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "root","type": {"op": "String"}}, {"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Var","id": "dirs","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "v@10012","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/string/splitv","args": [{"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Literal","type": {"op": "String"},"value": "/"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}},"annotation": "genExpr: std/core/string/splitv(s, \"/\")"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"v@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}}"},"export_as": ["v@10012"]}, {"name": {"op": "Var","id": "parts","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/push-parts","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/push-parts"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/vector","type": {"op": "Ptr"}},"name": "std/core/vector/vlist","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"vector\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/vector/vlist<string>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "v@10012","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: v@10012"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"annotation": "genExpr: std/core/types/@None<(list :: V -> V)<string>>"}]},"annotation": "genExpr: std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>))"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "dirs","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"68","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"68","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-dirs@921: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"68\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-dirs@921"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"dirs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-dirs@921,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"68\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-dirs@921: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"68\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"dirs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"68\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "dirs","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<string>"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"dirs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"dirs\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (dirs) {\n  ((std/core/types/@Optional((@uniq-dirs@921: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat: ? ((list :: V -> V)<string>))\n     -> @uniq-dirs@921;\n  ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@0: ? ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}"}]},"annotation": "genExpr: std/os/path/push-parts((std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>))), (match (dirs) {\n    ((std/core/types/@Optional((@uniq-dirs@921: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat: ? ((list :: V -> V)<string>))\n       -> @uniq-dirs@921;\n    ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@0: ? ((list :: V -> V)<string>))\n       -> std/core/types/Nil<string>;\n  }))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"export_as": ["parts"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/Path","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/Path"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "root","type": {"op": "String"}},"annotation": "genExpr: root"}, {"op": "DebugWrap","inner": {"op": "Var","id": "parts","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: parts"}]},"annotation": "genExpr: std/os/path/Path(root, parts)"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(root: string, s: string, dirs: ? ((list :: V -> V)<string>)){\n  val v@10012 : (vector :: V -> V)<string>;\n  val parts : (list :: V -> V)<string>;\n  std/os/path/Path(root, parts);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/path-parts\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"String\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/path-parts"]}, {"name": {"op": "Var","id": "std/os/path/path","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(String, String): Boolean","args": [{"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Literal","type": {"op": "String"},"value": ""}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/Path","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/Path"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<string>"}]},"annotation": "genExpr: std/os/path/Path(\"\", (std/core/types/Nil<string>))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"s\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Primitive","name": "infixEq(String, String): Boolean","args": [{"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Literal","type": {"op": "String"},"value": ""}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "t","type": {"op": "String"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/string/replace-all","args": [{"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Literal","type": {"op": "String"},"value": "\\"}, {"op": "Literal","type": {"op": "String"},"value": "/"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "String"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "String"}}},"annotation": "genExpr: std/core/string/replace-all(s, \"\\x5C\", \"/\")"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"t\",\"type\": {\"op\": \"String\"}}"},"export_as": ["t"]}],"body": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x68","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/text/parse","type": {"op": "Ptr"}},"name": "std/text/parse/starts-with","type": {"op": "Function","params": [{"op": "String"}, {"op": "Function","params": [],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/text/parse/starts-with<bool>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "t","type": {"op": "String"}},"annotation": "genExpr: t"}, {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/proot","type": {"op": "Function","params": [],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/proot"}]},"annotation": "genExpr: std/text/parse/starts-with<bool>(t, std/os/path/proot)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x68","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "v@10012","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/string/splitv","args": [{"op": "Var","id": "t","type": {"op": "String"}}, {"op": "Literal","type": {"op": "String"},"value": "/"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}},"annotation": "genExpr: std/core/string/splitv(t, \"/\")"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"v@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}}"},"export_as": ["v@10012"]}, {"name": {"op": "Var","id": "parts","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/push-parts","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/push-parts"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/vector","type": {"op": "Ptr"}},"name": "std/core/vector/vlist","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"vector\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/vector/vlist<string>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "v@10012","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: v@10012"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"annotation": "genExpr: std/core/types/@None<(list :: V -> V)<string>>"}]},"annotation": "genExpr: std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>))"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x69","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"value": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x69","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"70","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"70","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-dirs@921: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"70\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-dirs@921"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x69\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-dirs@921,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"70\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-dirs@921: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"70\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x69\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"70\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x69","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<string>"}}]},"annotation": "genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"@x69\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x69\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/types/@None<(list :: V -> V)<string>>)) {\n  ((std/core/types/@Optional((@uniq-dirs@921: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n     -> @uniq-dirs@921;\n  ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@0@0: ? ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}"}]},"annotation": "genExpr: std/os/path/push-parts((std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>))), (match ((std/core/types/@None<(list :: V -> V)<string>>)) {\n    ((std/core/types/@Optional((@uniq-dirs@921: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n       -> @uniq-dirs@921;\n    ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@0@0: ? ((list :: V -> V)<string>))\n       -> std/core/types/Nil<string>;\n  }))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"export_as": ["parts"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/Path","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/Path"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}, {"op": "DebugWrap","inner": {"op": "Var","id": "parts","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: parts"}]},"annotation": "genExpr: std/os/path/Path(\"\", parts)"}},"annotation": "genExpr: val v@10012 : (vector :: V -> V)<string>;\nval parts : (list :: V -> V)<string>;\nstd/os/path/Path(\"\", parts)"}}]},"annotation": "genBranch: [(@pat@1@0,{\"op\": \"Var\",\"id\": \"@x68\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x68\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x68","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"69","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"69","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/types/Tuple2((eof: bool), ((@skip std/core/sslice/Sslice((@pat@4: string), (@pat@5: int), (@pat@6: int)) : sslice/sslice ) as rest: sslice/sslice)) : (bool, sslice/sslice) ) as @pat@3: (bool, sslice/sslice)) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"69\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"70","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"71","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"71","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@4: string), (@pat@5: int), (@pat@6: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"71\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"72","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"73","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"74","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "root@0@10105","type": {"op": "String"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/string"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"71","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@4: string), (@pat@5: int), (@pat@6: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"71\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"75","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"76","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"77","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/Sslice","type": {"op": "Function","params": [{"op": "String"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/Sslice"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"str\"75","type": {"op": "String"}},"annotation": "genTest: normal: (s@1@0: string) -> {\"op\": \"Var\",\"id\": \"@\\\"str\\\"75\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: s@1@0"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"start\"76","type": {"op": "Int"}},"annotation": "genTest: normal: (start: int) -> {\"op\": \"Var\",\"id\": \"@\\\"start\\\"76\",\"type\": {\"op\": \"Int\"}}"},"annotation": "genExpr: start"}]},"annotation": "genExpr: std/core/sslice/Sslice(s@1@0, 0, start)"}}]},"annotation": "genBranch: [(@pat@7@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"71\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@4: string), (@pat@5: int), (@pat@6: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"71\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(s@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"75\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"75\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"76\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"76\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"77\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@2@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"77\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"71\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@4: string), (@pat@5: int), (@pat@6: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"71\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"75\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"76\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"77\",\"type\": {\"op\": \"Int\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (rest) {\n  ((@skip std/core/sslice/Sslice((s@1@0: string) : string, (start: int) : int, (@pat@0@2@0: int) : int) : sslice/sslice ) as @pat@7@0: sslice/sslice)\n     -> std/core/sslice/Sslice(s@1@0, 0, start);\n}"}]},"annotation": "genExpr: std/core/sslice/string((match (rest) {\n  ((@skip std/core/sslice/Sslice((s@1@0: string) : string, (start: int) : int, (@pat@0@2@0: int) : int) : sslice/sslice ) as @pat@7@0: sslice/sslice)\n     -> std/core/sslice/Sslice(s@1@0, 0, start);\n}))"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"70","type": {"op": "Top"}},"annotation": "genTest: normal: (eof: bool) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"70\",\"type\": {\"op\": \"Top\"}}"},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "/"},"annotation": "genExpr: \"/\""}}]},"annotation": "genBranch: [(@pat@7@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"70\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (eof: bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"70\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"70","type": {"op": "Top"}},"annotation": "genTest: normal: (eof: bool) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"70\",\"type\": {\"op\": \"Top\"}}"},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}}]},"annotation": "genBranch: [(@pat@8,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"70\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (eof: bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"70\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (eof) {\n  ((std/core/types/True() : bool ) as @pat@7@0@0: bool)\n     -> \"/\";\n  ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n     -> \"\";\n}"}]},"annotation": "genExpr: std/core/types/(++)((std/core/sslice/string((match (rest) {\n    ((@skip std/core/sslice/Sslice((s@1@0: string) : string, (start: int) : int, (@pat@0@2@0: int) : int) : sslice/sslice ) as @pat@7@0: sslice/sslice)\n       -> std/core/sslice/Sslice(s@1@0, 0, start);\n  }))), (match (eof) {\n    ((std/core/types/True() : bool ) as @pat@7@0@0: bool)\n       -> \"/\";\n    ((@skip std/core/types/False() : bool ) as @pat@8: bool)\n       -> \"\";\n  }))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"root@0@10105\",\"type\": {\"op\": \"String\"}}"},"export_as": ["root@0@10105"]}, {"name": {"op": "Var","id": "s@1@10106","type": {"op": "String"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/string"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"71","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@4: string), (@pat@5: int), (@pat@6: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"71\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: rest"}]},"annotation": "genExpr: std/core/sslice/string(rest)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"s@1@10106\",\"type\": {\"op\": \"String\"}}"},"export_as": ["s@1@10106"]}, {"name": {"op": "Var","id": "v@10012@0","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/string/splitv","args": [{"op": "Var","id": "s@1@10106","type": {"op": "String"}}, {"op": "Literal","type": {"op": "String"},"value": "/"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}},"annotation": "genExpr: std/core/string/splitv(s@1@10106, \"/\")"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"v@10012@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}}"},"export_as": ["v@10012@0"]}, {"name": {"op": "Var","id": "parts@0","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/push-parts","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/push-parts"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/vector","type": {"op": "Ptr"}},"name": "std/core/vector/vlist","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"vector\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/vector/vlist<string>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "v@10012@0","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: v@10012@0"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"annotation": "genExpr: std/core/types/@None<(list :: V -> V)<string>>"}]},"annotation": "genExpr: std/core/vector/vlist<string>(v@10012@0, (std/core/types/@None<(list :: V -> V)<string>>))"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x78","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"value": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x78","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"79","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"79","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-dirs@921@0: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"79\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-dirs@921@0"}}]},"annotation": "genBranch: [(@pat@7,{\"op\": \"Var\",\"id\": \"@x78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-dirs@921@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"79\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-dirs@921@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"79\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"79\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x78","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<string>"}}]},"annotation": "genBranch: [(@pat@0@2,{\"op\": \"Var\",\"id\": \"@x78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/types/@None<(list :: V -> V)<string>>)) {\n  ((std/core/types/@Optional((@uniq-dirs@921@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@7: ? ((list :: V -> V)<string>))\n     -> @uniq-dirs@921@0;\n  ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@0@2: ? ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}"}]},"annotation": "genExpr: std/os/path/push-parts((std/core/vector/vlist<string>(v@10012@0, (std/core/types/@None<(list :: V -> V)<string>>))), (match ((std/core/types/@None<(list :: V -> V)<string>>)) {\n    ((std/core/types/@Optional((@uniq-dirs@921@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@7: ? ((list :: V -> V)<string>))\n       -> @uniq-dirs@921@0;\n    ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@0@2: ? ((list :: V -> V)<string>))\n       -> std/core/types/Nil<string>;\n  }))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"parts@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"export_as": ["parts@0"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/Path","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/Path"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "root@0@10105","type": {"op": "String"}},"annotation": "genExpr: root@0@10105"}, {"op": "DebugWrap","inner": {"op": "Var","id": "parts@0","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: parts@0"}]},"annotation": "genExpr: std/os/path/Path(root@0@10105, parts@0)"}},"annotation": "genExpr: val root@0@10105 : string;\nval s@1@10106 : string;\nval v@10012@0 : (vector :: V -> V)<string>;\nval parts@0 : (list :: V -> V)<string>;\nstd/os/path/Path(root@0@10105, parts@0)"}}]},"annotation": "genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"@x68\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"69\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/types/Tuple2((eof: bool), ((@skip std/core/sslice/Sslice((@pat@4: string), (@pat@5: int), (@pat@6: int)) : sslice/sslice ) as rest: sslice/sslice)) : (bool, sslice/sslice) ) as @pat@3: (bool, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"69\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(eof,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"70\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (eof: bool) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"70\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"71\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@4: string), (@pat@5: int), (@pat@6: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"71\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"72\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@4: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"72\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"73\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@5: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"73\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"74\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@6: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"74\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"71\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@4: string), (@pat@5: int), (@pat@6: int)) : sslice/sslice ) as rest: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"71\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"72\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"73\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"74\",\"type\": {\"op\": \"Int\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"69\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/types/Tuple2((eof: bool), ((@skip std/core/sslice/Sslice((@pat@4: string), (@pat@5: int), (@pat@6: int)) : sslice/sslice ) as rest: sslice/sslice)) : (bool, sslice/sslice) ) as @pat@3: (bool, sslice/sslice)) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"69\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"70\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"71\",\"type\": {\"op\": \"Top\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x68\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"69\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/text/parse/starts-with<bool>(t, std/os/path/proot))) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<(bool, sslice/sslice)> ) as @pat@1@0: ((maybe :: V -> V)<(bool, sslice/sslice)>))\n     -> val v@10012 : (vector :: V -> V)<string>;\n        val parts : (list :: V -> V)<string>;\n    std/os/path/Path(\"\", parts);\n  ((@skip std/core/types/Just(((@skip std/core/types/Tuple2((eof: bool) : bool, ((@skip std/core/sslice/Sslice((@pat@4: string) : string, (@pat@5: int) : int, (@pat@6: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : (bool, sslice/sslice) ) as @pat@3: (bool, sslice/sslice)) : (bool, sslice/sslice)) : (maybe :: V -> V)<(bool, sslice/sslice)> ) as @pat@2@0: ((maybe :: V -> V)<(bool, sslice/sslice)>))\n     -> val root@0@10105 : string;\n        val s@1@10106 : string;\n        val v@10012@0 : (vector :: V -> V)<string>;\n        val parts@0 : (list :: V -> V)<string>;\n    std/os/path/Path(root@0@10105, parts@0);\n}"}},"annotation": "genExpr: val t : string\n      = std/core/string/replace-all(s, \"\\x5C\", \"/\");\nmatch ((std/text/parse/starts-with<bool>(t, std/os/path/proot))) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<(bool, sslice/sslice)> ) as @pat@1@0: ((maybe :: V -> V)<(bool, sslice/sslice)>))\n     -> val v@10012 : (vector :: V -> V)<string>;\n        val parts : (list :: V -> V)<string>;\n    std/os/path/Path(\"\", parts);\n  ((@skip std/core/types/Just(((@skip std/core/types/Tuple2((eof: bool) : bool, ((@skip std/core/sslice/Sslice((@pat@4: string) : string, (@pat@5: int) : int, (@pat@6: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : (bool, sslice/sslice) ) as @pat@3: (bool, sslice/sslice)) : (bool, sslice/sslice)) : (maybe :: V -> V)<(bool, sslice/sslice)> ) as @pat@2@0: ((maybe :: V -> V)<(bool, sslice/sslice)>))\n     -> val root@0@10105 : string;\n        val s@1@10106 : string;\n        val v@10012@0 : (vector :: V -> V)<string>;\n        val parts@0 : (list :: V -> V)<string>;\n    std/os/path/Path(root@0@10105, parts@0);\n}"}}]},"annotation": "genBranch: [(@pat@0@1,{\"op\": \"Primitive\",\"name\": \"infixEq(String, String): Boolean\",\"args\": [{\"op\": \"Var\",\"id\": \"s\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Literal\",\"type\": {\"op\": \"String\"},\"value\": \"\"}],\"returns\": [{\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}],\"rest\": {\"op\": \"Var\",\"id\": \"primitive_result\",\"type\": {\"op\": \"Bool\"}}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(s: string){\n  match ((std/core/string/(==)(s, \"\"))) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/os/path/Path(\"\", (std/core/types/Nil<string>));\n    ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n       -> val t : string\n                = std/core/string/replace-all(s, \"\\x5C\", \"/\");\n      (match ((std/text/parse/starts-with<bool>(t, std/os/path/proot))) {\n        ((std/core/types/Nothing() : (maybe :: V -> V)<(bool, sslice/sslice)> ) as @pat@1@0: ((maybe :: V -> V)<(bool, sslice/sslice)>))\n           -> val v@10012 : (vector :: V -> V)<string>;\n              val parts : (list :: V -> V)<string>;\n          std/os/path/Path(\"\", parts);\n        ((@skip std/core/types/Just(((@skip std/core/types/Tuple2((eof: bool) : bool, ((@skip std/core/sslice/Sslice((@pat@4: string) : string, (@pat@5: int) : int, (@pat@6: int) : int) : sslice/sslice ) as rest: sslice/sslice) : sslice/sslice) : (bool, sslice/sslice) ) as @pat@3: (bool, sslice/sslice)) : (bool, sslice/sslice)) : (maybe :: V -> V)<(bool, sslice/sslice)> ) as @pat@2@0: ((maybe :: V -> V)<(bool, sslice/sslice)>))\n           -> val root@0@10105 : string;\n              val s@1@10106 : string;\n              val v@10012@0 : (vector :: V -> V)<string>;\n              val parts@0 : (list :: V -> V)<string>;\n          std/os/path/Path(root@0@10105, parts@0);\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/path\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/path"]}, {"name": {"op": "Var","id": "std/os/path/(/)","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/os/path/path"}, {"op": "Ptr","extern_ptr_name": "std/os/path/path"}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "p1","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}}, {"op": "Var","id": "p2","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "parts@10056","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@Optional","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"@optional\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/@Optional<(list :: V -> V)<string>>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/push-parts","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/push-parts"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/list","type": {"op": "Ptr"}},"name": "std/core/list/@lift-reverse-append@4790","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-reverse-append@4790<string>"},"args": [{"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<string>"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p2","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"75","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"76","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"76","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x@0: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"76\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: @x@0"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"p2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"75\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"75\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"76\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"76\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"75\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"76\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p2) {\n  ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n     -> @x@0;\n}"}]},"annotation": "genExpr: std/core/list/@lift-reverse-append@4790<string>((std/core/types/Nil<string>), (match (p2) {\n    ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n       -> @x@0;\n  }))"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p1","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"77","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"78","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"78","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x@1: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: @x@1"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"p1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"77\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"77\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"78\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"77\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p1) {\n  ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@5: std/os/path/path)\n     -> @x@1;\n}"}]},"annotation": "genExpr: std/os/path/push-parts((std/core/list/@lift-reverse-append@4790<string>((std/core/types/Nil<string>), (match (p2) {\n      ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n         -> @x@0;\n    }))), (match (p1) {\n    ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@5: std/os/path/path)\n       -> @x@1;\n  }))"}]},"annotation": "genExpr: std/core/types/@Optional<(list :: V -> V)<string>>((std/os/path/push-parts((std/core/list/@lift-reverse-append@4790<string>((std/core/types/Nil<string>), (match (p2) {\n      ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n         -> @x@0;\n    }))), (match (p1) {\n    ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@5: std/os/path/path)\n       -> @x@1;\n  }))))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}"},"export_as": ["parts@10056"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/Path","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/Path"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p1","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"75","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"76","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"root\"75","type": {"op": "String"}},"annotation": "genTest: normal: (@x: string) -> {\"op\": \"Var\",\"id\": \"@\\\"root\\\"75\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"p1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"75\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"75\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"76\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"76\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"75\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"76\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p1) {\n  ((@skip std/os/path/Path((@x: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n     -> @x;\n}"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "parts@10056","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"77","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"77","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-parts@807: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"77\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-parts@807"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-parts@807,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"77\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-parts@807: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"77\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"77\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "parts@10056","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<string>"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (parts@10056) {\n  ((std/core/types/@Optional((@uniq-parts@807: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1: ? ((list :: V -> V)<string>))\n     -> @uniq-parts@807;\n  ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}"}]},"annotation": "genExpr: std/os/path/Path((match (p1) {\n    ((@skip std/os/path/Path((@x: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n       -> @x;\n  }), (match (parts@10056) {\n    ((std/core/types/@Optional((@uniq-parts@807: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1: ? ((list :: V -> V)<string>))\n       -> @uniq-parts@807;\n    ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n       -> std/core/types/Nil<string>;\n  }))"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(p1: std/os/path/path, p2: std/os/path/path){\n  val parts@10056 : ? ((list :: V -> V)<string>)\n        = std/core/types/@Optional<(list :: V -> V)<string>>((std/os/path/push-parts((std/core/list/@lift-reverse-append@4790<string>((std/core/types/Nil<string>), (match (p2) {\n              ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n                 -> @x@0;\n            }))), (match (p1) {\n            ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@5: std/os/path/path)\n               -> @x@1;\n          }))));\n  std/os/path/Path((match (p1) {\n      ((@skip std/os/path/Path((@x: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n         -> @x;\n    }), (match (parts@10056) {\n      ((std/core/types/@Optional((@uniq-parts@807: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1: ? ((list :: V -> V)<string>))\n         -> @uniq-parts@807;\n      ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n         -> std/core/types/Nil<string>;\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/(/)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}, {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/(/)"]}, {"name": {"op": "Var","id": "std/os/path/app-path","type": {"op": "Function","params": [],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x-x1@10145","type": {"op": "String"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/xapp-path","type": {"op": "Function","params": [],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/xapp-path"},"args": []},"annotation": "genExpr: std/os/path/xapp-path()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"@x-x1@10145\",\"type\": {\"op\": \"String\"}}"},"export_as": ["@x-x1@10145"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@open-none1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@open-none1<string,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/path","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/path"}, {"op": "DebugWrap","inner": {"op": "Var","id": "@x-x1@10145","type": {"op": "String"}},"annotation": "genExpr: @x-x1@10145"}]},"annotation": "genExpr: std/core/hnd/@open-none1<string,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>(std/os/path/path, @x-x1@10145)"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(io :: E)>(){\n  val @x-x1@10145 : string\n        = std/os/path/xapp-path();\n  std/core/hnd/@open-none1<string,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>(std/os/path/path, @x-x1@10145);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/app-path\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/app-path"]}, {"name": {"op": "Var","id": "std/os/path/appdir","type": {"op": "Function","params": [],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x-x1@0@10147","type": {"op": "String"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/xapp-path","type": {"op": "Function","params": [],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/xapp-path"},"args": []},"annotation": "genExpr: std/os/path/xapp-path()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"@x-x1@0@10147\",\"type\": {\"op\": \"String\"}}"},"export_as": ["@x-x1@0@10147"]}, {"name": {"op": "Var","id": "@x-x1@10146","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@open-none1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@open-none1<string,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/path","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/path"}, {"op": "DebugWrap","inner": {"op": "Var","id": "@x-x1@0@10147","type": {"op": "String"}},"annotation": "genExpr: @x-x1@0@10147"}]},"annotation": "genExpr: std/core/hnd/@open-none1<string,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>(std/os/path/path, @x-x1@0@10147)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"@x-x1@10146\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}"},"export_as": ["@x-x1@10146"]}, {"name": {"op": "Var","id": "p@0","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@open-none1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@open-none1<std/os/path/path,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/Path","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/Path"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x78","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"value": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x78","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"79","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"79","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-root@108: string) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"79\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-root@108"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-root@108,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"79\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-root@108: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"79\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"79\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x78","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"80","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"81","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"root\"80","type": {"op": "String"}},"annotation": "genTest: normal: (@x@0: string) -> {\"op\": \"Var\",\"id\": \"@\\\"root\\\"80\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: @x@0"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"80\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"80\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"81\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@2: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"81\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"80\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"81\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p) {\n  ((@skip std/os/path/Path((@x@0: string) : string, (@pat@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n     -> @x@0;\n}"}}]},"annotation": "genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"@x78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x78\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/types/@None<string>)) {\n  ((std/core/types/@Optional((@uniq-root@108: string) : string) : ? string ) as @pat@3: ? string)\n     -> @uniq-root@108;\n  ((@skip std/core/types/@None() : ? string ) as @pat@0@1: ? string)\n     -> (match (p) {\n      ((@skip std/os/path/Path((@x@0: string) : string, (@pat@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n         -> @x@0;\n    });\n}"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"82","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"83","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"83","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"84","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"85","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"85","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"85\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"83\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"84\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"84\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"85\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"85\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"83\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"84\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"85\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"83","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<string>"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"83\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"83\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@x) {\n  ((std/core/types/Cons((@pat@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat: ((list :: V -> V)<string>))\n     -> xx;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"82\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"82\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"83\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"82\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@0: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2: std/os/path/path)\n     -> (match (@x) {\n      ((std/core/types/Cons((@pat@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat: ((list :: V -> V)<string>))\n         -> xx;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n         -> std/core/types/Nil<string>;\n    });\n}"}]},"annotation": "genExpr: std/os/path/Path((match ((std/core/types/@None<string>)) {\n    ((std/core/types/@Optional((@uniq-root@108: string) : string) : ? string ) as @pat@3: ? string)\n       -> @uniq-root@108;\n    ((@skip std/core/types/@None() : ? string ) as @pat@0@1: ? string)\n       -> (match (p) {\n        ((@skip std/os/path/Path((@x@0: string) : string, (@pat@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n           -> @x@0;\n      });\n  }), (match (p) {\n    ((@skip std/os/path/Path((@pat@0@0: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2: std/os/path/path)\n       -> (match (@x) {\n        ((std/core/types/Cons((@pat@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat: ((list :: V -> V)<string>))\n           -> xx;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n           -> std/core/types/Nil<string>;\n      });\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(p: std/os/path/path){\n  std/os/path/Path((match ((std/core/types/@None<string>)) {\n      ((std/core/types/@Optional((@uniq-root@108: string) : string) : ? string ) as @pat@3: ? string)\n         -> @uniq-root@108;\n      ((@skip std/core/types/@None() : ? string ) as @pat@0@1: ? string)\n         -> (match (p) {\n          ((@skip std/os/path/Path((@x@0: string) : string, (@pat@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n             -> @x@0;\n        });\n    }), (match (p) {\n      ((@skip std/os/path/Path((@pat@0@0: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2: std/os/path/path)\n         -> (match (@x) {\n          ((std/core/types/Cons((@pat@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat: ((list :: V -> V)<string>))\n             -> xx;\n          ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n             -> std/core/types/Nil<string>;\n        });\n    }));\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "@x-x1@10146","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"annotation": "genExpr: @x-x1@10146"}]},"annotation": "genExpr: std/core/hnd/@open-none1<std/os/path/path,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>((fn(p: std/os/path/path){\n    (std/os/path/Path((match ((std/core/types/@None<string>)) {\n        ((std/core/types/@Optional((@uniq-root@108: string) : string) : ? string ) as @pat@3: ? string)\n           -> @uniq-root@108;\n        ((@skip std/core/types/@None() : ? string ) as @pat@0@1: ? string)\n           -> (match (p) {\n            ((@skip std/os/path/Path((@x@0: string) : string, (@pat@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n               -> @x@0;\n          });\n      }), (match (p) {\n        ((@skip std/os/path/Path((@pat@0@0: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2: std/os/path/path)\n           -> (match (@x) {\n            ((std/core/types/Cons((@pat@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat: ((list :: V -> V)<string>))\n               -> xx;\n            ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n               -> std/core/types/Nil<string>;\n          });\n      })));\n  }), @x-x1@10146)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"p@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}"},"export_as": ["p@0"]}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x78","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixEq(String, String): Boolean","args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@open-none1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@open-none1<std/os/path/path,string,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "p@1","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p@1","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"79","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"80","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"80","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x@1: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"80\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"81","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"82","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"81","type": {"op": "Top"}},"annotation": "genTest: normal: (x@0: string) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"81\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x@0"}}]},"annotation": "genBranch: [(@pat@1@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"80\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"80\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"81\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"81\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"82\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"82\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"80\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"80\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"81\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"82\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"80","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x@1: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"80\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x83","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x83","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x83","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"84","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"84","type": {"op": "Top"}},"annotation": "genTest: normal: (x@1: string) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"84\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x@1"}}]},"annotation": "genBranch: [(@pat@0@4,{\"op\": \"Var\",\"id\": \"@x83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"84\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"84\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x83\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"84\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@5: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@4: ((maybe :: V -> V)<string>))\n     -> x@1;\n}"}}]},"annotation": "genBranch: [(@pat@1@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"80\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"80\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"80\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"80\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@x@1) {\n  ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@1: ((list :: V -> V)<string>))\n     -> x@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@5: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@4: ((maybe :: V -> V)<string>))\n         -> x@1;\n    });\n}"}}]},"annotation": "genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"p@1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"79\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"79\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"80\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"80\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p@1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"79\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"80\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(p@1: std/os/path/path){\n  match (p@1) {\n    ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n       -> (match (@x@1) {\n        ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@1: ((list :: V -> V)<string>))\n           -> x@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@5: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@4: ((maybe :: V -> V)<string>))\n               -> x@1;\n          });\n      });\n  };\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "p@0","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"annotation": "genExpr: p@0"}]},"annotation": "genExpr: std/core/hnd/@open-none1<std/os/path/path,string,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>((fn(p@1: std/os/path/path){\n    (match (p@1) {\n      ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n         -> (match (@x@1) {\n          ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@1: ((list :: V -> V)<string>))\n             -> x@0;\n          ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n             -> (match ((std/core/types/Nothing<string>)) {\n              ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@5: ((maybe :: V -> V)<string>))\n                 -> \"\";\n              ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@4: ((maybe :: V -> V)<string>))\n                 -> x@1;\n            });\n        });\n    });\n  }), p@0)"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "bin"},"annotation": "genExpr: \"bin\""}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/string/(==)((std/core/hnd/@open-none1<std/os/path/path,string,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>((fn(p@1: std/os/path/path){\n      (match (p@1) {\n        ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n           -> (match (@x@1) {\n            ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@1: ((list :: V -> V)<string>))\n               -> x@0;\n            ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n               -> (match ((std/core/types/Nothing<string>)) {\n                ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@5: ((maybe :: V -> V)<string>))\n                   -> \"\";\n                ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@4: ((maybe :: V -> V)<string>))\n                   -> x@1;\n              });\n          });\n      });\n    }), p@0)), \"bin\")"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x78","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@open-none1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@open-none1<std/os/path/path,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "p@2","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/Path","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/Path"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x85","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"value": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x85","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"86","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"86","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-root@108@0: string) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"86\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-root@108@0"}}]},"annotation": "genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"@x85\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-root@108@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"86\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-root@108@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"86\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x85\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"86\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x85","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p@2","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"87","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"88","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"root\"87","type": {"op": "String"}},"annotation": "genTest: normal: (@x@0@0: string) -> {\"op\": \"Var\",\"id\": \"@\\\"root\\\"87\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: @x@0@0"}}]},"annotation": "genBranch: [(@pat@4@0,{\"op\": \"Var\",\"id\": \"p@2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"87\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"87\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"88\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@2@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"88\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p@2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"87\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"88\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p@2) {\n  ((@skip std/os/path/Path((@x@0@0: string) : string, (@pat@0@2@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4@0: std/os/path/path)\n     -> @x@0@0;\n}"}}]},"annotation": "genBranch: [(@pat@0@1@1,{\"op\": \"Var\",\"id\": \"@x85\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x85\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/types/@None<string>)) {\n  ((std/core/types/@Optional((@uniq-root@108@0: string) : string) : ? string ) as @pat@3@0: ? string)\n     -> @uniq-root@108@0;\n  ((@skip std/core/types/@None() : ? string ) as @pat@0@1@1: ? string)\n     -> (match (p@2) {\n      ((@skip std/os/path/Path((@x@0@0: string) : string, (@pat@0@2@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4@0: std/os/path/path)\n         -> @x@0@0;\n    });\n}"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p@2","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"89","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"90","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"90","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x@2: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"90\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"91","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"92","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"92","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx@0: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"92\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx@0"}}]},"annotation": "genBranch: [(@pat@7,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"90\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@2: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"90\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(@pat@0@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"91\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@5: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"91\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"92\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"92\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"90\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@2: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"90\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"91\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"92\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"90","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x@2: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"90\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<string>"}}]},"annotation": "genBranch: [(@pat@1@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"90\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@2: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"90\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"90\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@2: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"90\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@x@2) {\n  ((std/core/types/Cons((@pat@0@5: string) : string, (xx@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@7: ((list :: V -> V)<string>))\n     -> xx@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@2: ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}"}}]},"annotation": "genBranch: [(@pat@2@1,{\"op\": \"Var\",\"id\": \"p@2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"89\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"89\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"90\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@2: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"90\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p@2\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"89\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"90\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p@2) {\n  ((@skip std/os/path/Path((@pat@0@0@1: string) : string, (@x@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@1: std/os/path/path)\n     -> (match (@x@2) {\n      ((std/core/types/Cons((@pat@0@5: string) : string, (xx@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@7: ((list :: V -> V)<string>))\n         -> xx@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@2: ((list :: V -> V)<string>))\n         -> std/core/types/Nil<string>;\n    });\n}"}]},"annotation": "genExpr: std/os/path/Path((match ((std/core/types/@None<string>)) {\n    ((std/core/types/@Optional((@uniq-root@108@0: string) : string) : ? string ) as @pat@3@0: ? string)\n       -> @uniq-root@108@0;\n    ((@skip std/core/types/@None() : ? string ) as @pat@0@1@1: ? string)\n       -> (match (p@2) {\n        ((@skip std/os/path/Path((@x@0@0: string) : string, (@pat@0@2@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4@0: std/os/path/path)\n           -> @x@0@0;\n      });\n  }), (match (p@2) {\n    ((@skip std/os/path/Path((@pat@0@0@1: string) : string, (@x@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@1: std/os/path/path)\n       -> (match (@x@2) {\n        ((std/core/types/Cons((@pat@0@5: string) : string, (xx@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@7: ((list :: V -> V)<string>))\n           -> xx@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@2: ((list :: V -> V)<string>))\n           -> std/core/types/Nil<string>;\n      });\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(p@2: std/os/path/path){\n  std/os/path/Path((match ((std/core/types/@None<string>)) {\n      ((std/core/types/@Optional((@uniq-root@108@0: string) : string) : ? string ) as @pat@3@0: ? string)\n         -> @uniq-root@108@0;\n      ((@skip std/core/types/@None() : ? string ) as @pat@0@1@1: ? string)\n         -> (match (p@2) {\n          ((@skip std/os/path/Path((@x@0@0: string) : string, (@pat@0@2@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4@0: std/os/path/path)\n             -> @x@0@0;\n        });\n    }), (match (p@2) {\n      ((@skip std/os/path/Path((@pat@0@0@1: string) : string, (@x@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@1: std/os/path/path)\n         -> (match (@x@2) {\n          ((std/core/types/Cons((@pat@0@5: string) : string, (xx@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@7: ((list :: V -> V)<string>))\n             -> xx@0;\n          ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@2: ((list :: V -> V)<string>))\n             -> std/core/types/Nil<string>;\n        });\n    }));\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "p@0","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"annotation": "genExpr: p@0"}]},"annotation": "genExpr: std/core/hnd/@open-none1<std/os/path/path,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>((fn(p@2: std/os/path/path){\n    (std/os/path/Path((match ((std/core/types/@None<string>)) {\n        ((std/core/types/@Optional((@uniq-root@108@0: string) : string) : ? string ) as @pat@3@0: ? string)\n           -> @uniq-root@108@0;\n        ((@skip std/core/types/@None() : ? string ) as @pat@0@1@1: ? string)\n           -> (match (p@2) {\n            ((@skip std/os/path/Path((@x@0@0: string) : string, (@pat@0@2@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4@0: std/os/path/path)\n               -> @x@0@0;\n          });\n      }), (match (p@2) {\n        ((@skip std/os/path/Path((@pat@0@0@1: string) : string, (@x@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@1: std/os/path/path)\n           -> (match (@x@2) {\n            ((std/core/types/Cons((@pat@0@5: string) : string, (xx@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@7: ((list :: V -> V)<string>))\n               -> xx@0;\n            ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@2: ((list :: V -> V)<string>))\n               -> std/core/types/Nil<string>;\n          });\n      })));\n  }), p@0)"}}]},"annotation": "genBranch: [(@pat@6,{\"op\": \"Var\",\"id\": \"@x78\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x93","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixEq(String, String): Boolean","args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@open-none1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@open-none1<std/os/path/path,string,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "p@3","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p@3","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"94","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"95","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"95","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x@3: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"95\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"96","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"97","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"96","type": {"op": "Top"}},"annotation": "genTest: normal: (x@0@0: string) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"96\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x@0@0"}}]},"annotation": "genBranch: [(@pat@1@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"95\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@3: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"95\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"96\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"96\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"97\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@2: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"97\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"95\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@3: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"95\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"96\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"97\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"95","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x@3: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"95\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x98","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x98","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}}]},"annotation": "genBranch: [(@pat@8,{\"op\": \"Var\",\"id\": \"@x98\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x98\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x98","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"99","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"99","type": {"op": "Top"}},"annotation": "genTest: normal: (x@3: string) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"99\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x@3"}}]},"annotation": "genBranch: [(@pat@0@8,{\"op\": \"Var\",\"id\": \"@x98\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"99\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@3: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"99\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x98\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"99\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@8: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@3: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@8: ((maybe :: V -> V)<string>))\n     -> x@3;\n}"}}]},"annotation": "genBranch: [(@pat@1@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"95\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@3: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"95\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"95\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@3: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"95\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@x@3) {\n  ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@3: ((list :: V -> V)<string>))\n     -> x@0@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@2: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@8: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@3: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@8: ((maybe :: V -> V)<string>))\n         -> x@3;\n    });\n}"}}]},"annotation": "genBranch: [(@pat@2@2,{\"op\": \"Var\",\"id\": \"p@3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"94\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"94\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"95\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@3: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"95\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p@3\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"94\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"95\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(p@3: std/os/path/path){\n  match (p@3) {\n    ((@skip std/os/path/Path((@pat@0@1@2: string) : string, (@x@3: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@2: std/os/path/path)\n       -> (match (@x@3) {\n        ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@3: ((list :: V -> V)<string>))\n           -> x@0@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@2: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@8: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@3: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@8: ((maybe :: V -> V)<string>))\n               -> x@3;\n          });\n      });\n  };\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "p@0","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"annotation": "genExpr: p@0"}]},"annotation": "genExpr: std/core/hnd/@open-none1<std/os/path/path,string,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>((fn(p@3: std/os/path/path){\n    (match (p@3) {\n      ((@skip std/os/path/Path((@pat@0@1@2: string) : string, (@x@3: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@2: std/os/path/path)\n         -> (match (@x@3) {\n          ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@3: ((list :: V -> V)<string>))\n             -> x@0@0;\n          ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@2: ((list :: V -> V)<string>))\n             -> (match ((std/core/types/Nothing<string>)) {\n              ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@8: ((maybe :: V -> V)<string>))\n                 -> \"\";\n              ((@skip std/core/types/Just((x@3: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@8: ((maybe :: V -> V)<string>))\n                 -> x@3;\n            });\n        });\n    });\n  }), p@0)"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "exe"},"annotation": "genExpr: \"exe\""}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/string/(==)((std/core/hnd/@open-none1<std/os/path/path,string,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>((fn(p@3: std/os/path/path){\n      (match (p@3) {\n        ((@skip std/os/path/Path((@pat@0@1@2: string) : string, (@x@3: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@2: std/os/path/path)\n           -> (match (@x@3) {\n            ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@3: ((list :: V -> V)<string>))\n               -> x@0@0;\n            ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@2: ((list :: V -> V)<string>))\n               -> (match ((std/core/types/Nothing<string>)) {\n                ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@8: ((maybe :: V -> V)<string>))\n                   -> \"\";\n                ((@skip std/core/types/Just((x@3: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@8: ((maybe :: V -> V)<string>))\n                   -> x@3;\n              });\n          });\n      });\n    }), p@0)), \"exe\")"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x93","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@open-none1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@open-none1<std/os/path/path,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "p@4","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/Path","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/Path"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x100","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"value": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x100","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"101","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"101","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-root@108@1: string) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"101\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-root@108@1"}}]},"annotation": "genBranch: [(@pat@3@1,{\"op\": \"Var\",\"id\": \"@x100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-root@108@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"101\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-root@108@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"101\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"101\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x100","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p@4","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"102","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"103","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"root\"102","type": {"op": "String"}},"annotation": "genTest: normal: (@x@0@1: string) -> {\"op\": \"Var\",\"id\": \"@\\\"root\\\"102\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: @x@0@1"}}]},"annotation": "genBranch: [(@pat@4@1,{\"op\": \"Var\",\"id\": \"p@4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"102\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"102\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@2@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"103\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@2@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"103\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p@4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"102\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"103\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p@4) {\n  ((@skip std/os/path/Path((@x@0@1: string) : string, (@pat@0@2@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4@1: std/os/path/path)\n     -> @x@0@1;\n}"}}]},"annotation": "genBranch: [(@pat@0@1@3,{\"op\": \"Var\",\"id\": \"@x100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/types/@None<string>)) {\n  ((std/core/types/@Optional((@uniq-root@108@1: string) : string) : ? string ) as @pat@3@1: ? string)\n     -> @uniq-root@108@1;\n  ((@skip std/core/types/@None() : ? string ) as @pat@0@1@3: ? string)\n     -> (match (p@4) {\n      ((@skip std/os/path/Path((@x@0@1: string) : string, (@pat@0@2@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4@1: std/os/path/path)\n         -> @x@0@1;\n    });\n}"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p@4","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"104","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"105","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"105","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x@4: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"105\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"106","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"107","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"107","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx@1: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"107\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx@1"}}]},"annotation": "genBranch: [(@pat@9,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"105\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@4: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"105\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(@pat@0@9,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"106\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@9: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"106\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"107\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"107\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"105\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@4: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"105\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"106\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"107\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"105","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x@4: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"105\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<string>"}}]},"annotation": "genBranch: [(@pat@1@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"105\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@4: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"105\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"105\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@4: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"105\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@x@4) {\n  ((std/core/types/Cons((@pat@0@9: string) : string, (xx@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@9: ((list :: V -> V)<string>))\n     -> xx@1;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@5: ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}"}}]},"annotation": "genBranch: [(@pat@2@3,{\"op\": \"Var\",\"id\": \"p@4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@0@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"104\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@0@3: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"104\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"105\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@4: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"105\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p@4\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"104\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"105\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p@4) {\n  ((@skip std/os/path/Path((@pat@0@0@3: string) : string, (@x@4: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@3: std/os/path/path)\n     -> (match (@x@4) {\n      ((std/core/types/Cons((@pat@0@9: string) : string, (xx@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@9: ((list :: V -> V)<string>))\n         -> xx@1;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@5: ((list :: V -> V)<string>))\n         -> std/core/types/Nil<string>;\n    });\n}"}]},"annotation": "genExpr: std/os/path/Path((match ((std/core/types/@None<string>)) {\n    ((std/core/types/@Optional((@uniq-root@108@1: string) : string) : ? string ) as @pat@3@1: ? string)\n       -> @uniq-root@108@1;\n    ((@skip std/core/types/@None() : ? string ) as @pat@0@1@3: ? string)\n       -> (match (p@4) {\n        ((@skip std/os/path/Path((@x@0@1: string) : string, (@pat@0@2@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4@1: std/os/path/path)\n           -> @x@0@1;\n      });\n  }), (match (p@4) {\n    ((@skip std/os/path/Path((@pat@0@0@3: string) : string, (@x@4: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@3: std/os/path/path)\n       -> (match (@x@4) {\n        ((std/core/types/Cons((@pat@0@9: string) : string, (xx@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@9: ((list :: V -> V)<string>))\n           -> xx@1;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@5: ((list :: V -> V)<string>))\n           -> std/core/types/Nil<string>;\n      });\n  }))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(p@4: std/os/path/path){\n  std/os/path/Path((match ((std/core/types/@None<string>)) {\n      ((std/core/types/@Optional((@uniq-root@108@1: string) : string) : ? string ) as @pat@3@1: ? string)\n         -> @uniq-root@108@1;\n      ((@skip std/core/types/@None() : ? string ) as @pat@0@1@3: ? string)\n         -> (match (p@4) {\n          ((@skip std/os/path/Path((@x@0@1: string) : string, (@pat@0@2@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4@1: std/os/path/path)\n             -> @x@0@1;\n        });\n    }), (match (p@4) {\n      ((@skip std/os/path/Path((@pat@0@0@3: string) : string, (@x@4: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@3: std/os/path/path)\n         -> (match (@x@4) {\n          ((std/core/types/Cons((@pat@0@9: string) : string, (xx@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@9: ((list :: V -> V)<string>))\n             -> xx@1;\n          ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@5: ((list :: V -> V)<string>))\n             -> std/core/types/Nil<string>;\n        });\n    }));\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "p@0","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"annotation": "genExpr: p@0"}]},"annotation": "genExpr: std/core/hnd/@open-none1<std/os/path/path,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>((fn(p@4: std/os/path/path){\n    (std/os/path/Path((match ((std/core/types/@None<string>)) {\n        ((std/core/types/@Optional((@uniq-root@108@1: string) : string) : ? string ) as @pat@3@1: ? string)\n           -> @uniq-root@108@1;\n        ((@skip std/core/types/@None() : ? string ) as @pat@0@1@3: ? string)\n           -> (match (p@4) {\n            ((@skip std/os/path/Path((@x@0@1: string) : string, (@pat@0@2@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4@1: std/os/path/path)\n               -> @x@0@1;\n          });\n      }), (match (p@4) {\n        ((@skip std/os/path/Path((@pat@0@0@3: string) : string, (@x@4: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@3: std/os/path/path)\n           -> (match (@x@4) {\n            ((std/core/types/Cons((@pat@0@9: string) : string, (xx@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@9: ((list :: V -> V)<string>))\n               -> xx@1;\n            ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@5: ((list :: V -> V)<string>))\n               -> std/core/types/Nil<string>;\n          });\n      })));\n  }), p@0)"}}]},"annotation": "genBranch: [(@pat@1@4,{\"op\": \"Var\",\"id\": \"@x93\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x93","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "p@0","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"annotation": "genExpr: p@0"}}]},"annotation": "genBranch: [(@pat@2@4,{\"op\": \"Var\",\"id\": \"@x93\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/string/(==)((std/core/hnd/@open-none1<std/os/path/path,string,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>((fn(p@3: std/os/path/path){\n      (match (p@3) {\n        ((@skip std/os/path/Path((@pat@0@1@2: string) : string, (@x@3: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@2: std/os/path/path)\n           -> (match (@x@3) {\n            ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@3: ((list :: V -> V)<string>))\n               -> x@0@0;\n            ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@2: ((list :: V -> V)<string>))\n               -> (match ((std/core/types/Nothing<string>)) {\n                ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@8: ((maybe :: V -> V)<string>))\n                   -> \"\";\n                ((@skip std/core/types/Just((x@3: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@8: ((maybe :: V -> V)<string>))\n                   -> x@3;\n              });\n          });\n      });\n    }), p@0)), \"exe\"))) {\n  ((std/core/types/True() : bool ) as @pat@1@4: bool)\n     -> std/core/hnd/@open-none1<std/os/path/path,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>((fn(p@4: std/os/path/path){\n        (std/os/path/Path((match ((std/core/types/@None<string>)) {\n            ((std/core/types/@Optional((@uniq-root@108@1: string) : string) : ? string ) as @pat@3@1: ? string)\n               -> @uniq-root@108@1;\n            ((@skip std/core/types/@None() : ? string ) as @pat@0@1@3: ? string)\n               -> (match (p@4) {\n                ((@skip std/os/path/Path((@x@0@1: string) : string, (@pat@0@2@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4@1: std/os/path/path)\n                   -> @x@0@1;\n              });\n          }), (match (p@4) {\n            ((@skip std/os/path/Path((@pat@0@0@3: string) : string, (@x@4: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@3: std/os/path/path)\n               -> (match (@x@4) {\n                ((std/core/types/Cons((@pat@0@9: string) : string, (xx@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@9: ((list :: V -> V)<string>))\n                   -> xx@1;\n                ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@5: ((list :: V -> V)<string>))\n                   -> std/core/types/Nil<string>;\n              });\n          })));\n      }), p@0);\n  ((@skip std/core/types/False() : bool ) as @pat@2@4: bool)\n     -> p@0;\n}"}}]},"annotation": "genBranch: [(@pat@0@6,{\"op\": \"Var\",\"id\": \"@x78\",\"type\": {\"op\": \"Bool\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(io :: E)>(){\n  val @x-x1@0@10147 : string;\n  val @x-x1@10146 : std/os/path/path;\n  val p@0 : std/os/path/path;\n  match ((std/core/string/(==)((std/core/hnd/@open-none1<std/os/path/path,string,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>((fn(p@1: std/os/path/path){\n        (match (p@1) {\n          ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n             -> (match (@x@1) {\n              ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@1: ((list :: V -> V)<string>))\n                 -> x@0;\n              ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n                 -> (match ((std/core/types/Nothing<string>)) {\n                  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@5: ((maybe :: V -> V)<string>))\n                     -> \"\";\n                  ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@4: ((maybe :: V -> V)<string>))\n                     -> x@1;\n                });\n            });\n        });\n      }), p@0)), \"bin\"))) {\n    ((std/core/types/True() : bool ) as @pat@6: bool)\n       -> std/core/hnd/@open-none1<std/os/path/path,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>((fn(p@2: std/os/path/path){\n          (std/os/path/Path((match ((std/core/types/@None<string>)) {\n              ((std/core/types/@Optional((@uniq-root@108@0: string) : string) : ? string ) as @pat@3@0: ? string)\n                 -> @uniq-root@108@0;\n              ((@skip std/core/types/@None() : ? string ) as @pat@0@1@1: ? string)\n                 -> (match (p@2) {\n                  ((@skip std/os/path/Path((@x@0@0: string) : string, (@pat@0@2@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4@0: std/os/path/path)\n                     -> @x@0@0;\n                });\n            }), (match (p@2) {\n              ((@skip std/os/path/Path((@pat@0@0@1: string) : string, (@x@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@1: std/os/path/path)\n                 -> (match (@x@2) {\n                  ((std/core/types/Cons((@pat@0@5: string) : string, (xx@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@7: ((list :: V -> V)<string>))\n                     -> xx@0;\n                  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@2: ((list :: V -> V)<string>))\n                     -> std/core/types/Nil<string>;\n                });\n            })));\n        }), p@0);\n    (@pat@0@6: bool)\n       -> (match ((std/core/string/(==)((std/core/hnd/@open-none1<std/os/path/path,string,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>((fn(p@3: std/os/path/path){\n            (match (p@3) {\n              ((@skip std/os/path/Path((@pat@0@1@2: string) : string, (@x@3: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@2: std/os/path/path)\n                 -> (match (@x@3) {\n                  ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@3: ((list :: V -> V)<string>))\n                     -> x@0@0;\n                  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@2: ((list :: V -> V)<string>))\n                     -> (match ((std/core/types/Nothing<string>)) {\n                      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@8: ((maybe :: V -> V)<string>))\n                         -> \"\";\n                      ((@skip std/core/types/Just((x@3: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@8: ((maybe :: V -> V)<string>))\n                         -> x@3;\n                    });\n                });\n            });\n          }), p@0)), \"exe\"))) {\n        ((std/core/types/True() : bool ) as @pat@1@4: bool)\n           -> std/core/hnd/@open-none1<std/os/path/path,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>((fn(p@4: std/os/path/path){\n              (std/os/path/Path((match ((std/core/types/@None<string>)) {\n                  ((std/core/types/@Optional((@uniq-root@108@1: string) : string) : ? string ) as @pat@3@1: ? string)\n                     -> @uniq-root@108@1;\n                  ((@skip std/core/types/@None() : ? string ) as @pat@0@1@3: ? string)\n                     -> (match (p@4) {\n                      ((@skip std/os/path/Path((@x@0@1: string) : string, (@pat@0@2@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4@1: std/os/path/path)\n                         -> @x@0@1;\n                    });\n                }), (match (p@4) {\n                  ((@skip std/os/path/Path((@pat@0@0@3: string) : string, (@x@4: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@3: std/os/path/path)\n                     -> (match (@x@4) {\n                      ((std/core/types/Cons((@pat@0@9: string) : string, (xx@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@9: ((list :: V -> V)<string>))\n                         -> xx@1;\n                      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@5: ((list :: V -> V)<string>))\n                         -> std/core/types/Nil<string>;\n                    });\n                })));\n            }), p@0);\n        ((@skip std/core/types/False() : bool ) as @pat@2@4: bool)\n           -> p@0;\n      });\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/appdir\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/appdir"]}, {"name": {"op": "Var","id": "std/os/path/change-base","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/os/path/path"}, {"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}}, {"op": "Var","id": "basename@0","type": {"op": "String"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "q","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/Path","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/Path"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x108","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"value": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x108","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"109","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"109","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-root@108: string) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"109\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-root@108"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"@x108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-root@108,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"109\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-root@108: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"109\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"109\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x108","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"110","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"111","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"root\"110","type": {"op": "String"}},"annotation": "genTest: normal: (@x@0: string) -> {\"op\": \"Var\",\"id\": \"@\\\"root\\\"110\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: @x@0"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"110\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"110\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"111\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@2: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"111\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"110\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"111\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p) {\n  ((@skip std/os/path/Path((@x@0: string) : string, (@pat@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n     -> @x@0;\n}"}}]},"annotation": "genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"@x108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x108\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/types/@None<string>)) {\n  ((std/core/types/@Optional((@uniq-root@108: string) : string) : ? string ) as @pat@3: ? string)\n     -> @uniq-root@108;\n  ((@skip std/core/types/@None() : ? string ) as @pat@0@1: ? string)\n     -> (match (p) {\n      ((@skip std/os/path/Path((@x@0: string) : string, (@pat@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n         -> @x@0;\n    });\n}"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"112","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"113","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"113","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"114","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"115","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"115","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"115\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"113\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"114\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"114\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"115\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"115\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"113\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"114\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"115\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"113","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<string>"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"113\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"113\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@x) {\n  ((std/core/types/Cons((@pat@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat: ((list :: V -> V)<string>))\n     -> xx;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"112\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"112\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"113\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"112\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"113\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@0: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2: std/os/path/path)\n     -> (match (@x) {\n      ((std/core/types/Cons((@pat@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat: ((list :: V -> V)<string>))\n         -> xx;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n         -> std/core/types/Nil<string>;\n    });\n}"}]},"annotation": "genExpr: std/os/path/Path((match ((std/core/types/@None<string>)) {\n    ((std/core/types/@Optional((@uniq-root@108: string) : string) : ? string ) as @pat@3: ? string)\n       -> @uniq-root@108;\n    ((@skip std/core/types/@None() : ? string ) as @pat@0@1: ? string)\n       -> (match (p) {\n        ((@skip std/os/path/Path((@x@0: string) : string, (@pat@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n           -> @x@0;\n      });\n  }), (match (p) {\n    ((@skip std/os/path/Path((@pat@0@0: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2: std/os/path/path)\n       -> (match (@x) {\n        ((std/core/types/Cons((@pat@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat: ((list :: V -> V)<string>))\n           -> xx;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1: ((list :: V -> V)<string>))\n           -> std/core/types/Nil<string>;\n      });\n  }))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"q\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}"},"export_as": ["q"]}, {"name": {"op": "Var","id": "v@10012","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/string/splitv","args": [{"op": "Var","id": "basename@0","type": {"op": "String"}}, {"op": "Literal","type": {"op": "String"},"value": "/"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}},"annotation": "genExpr: std/core/string/splitv(basename@0, \"/\")"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"v@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}}"},"export_as": ["v@10012"]}, {"name": {"op": "Var","id": "parts","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/push-parts","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/push-parts"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/vector","type": {"op": "Ptr"}},"name": "std/core/vector/vlist","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"vector\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/vector/vlist<string>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "v@10012","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: v@10012"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"annotation": "genExpr: std/core/types/@None<(list :: V -> V)<string>>"}]},"annotation": "genExpr: std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>))"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "q","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"116","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"117","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"117","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x@0@0: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"117\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: @x@0@0"}}]},"annotation": "genBranch: [(@pat@1@2,{\"op\": \"Var\",\"id\": \"q\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"116\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"116\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"117\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"117\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"q\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"116\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"117\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (q) {\n  ((@skip std/os/path/Path((@pat@0@0@0: string) : string, (@x@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@1@2: std/os/path/path)\n     -> @x@0@0;\n}"}]},"annotation": "genExpr: std/os/path/push-parts((std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>))), (match (q) {\n    ((@skip std/os/path/Path((@pat@0@0@0: string) : string, (@x@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@1@2: std/os/path/path)\n       -> @x@0@0;\n  }))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"export_as": ["parts"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/Path","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/Path"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "q","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"108","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"109","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"root\"108","type": {"op": "String"}},"annotation": "genTest: normal: (@x@1: string) -> {\"op\": \"Var\",\"id\": \"@\\\"root\\\"108\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: @x@1"}}]},"annotation": "genBranch: [(@pat@6,{\"op\": \"Var\",\"id\": \"q\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"108\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"108\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"109\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@4: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"109\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"q\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"108\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"109\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (q) {\n  ((@skip std/os/path/Path((@x@1: string) : string, (@pat@0@4: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@6: std/os/path/path)\n     -> @x@1;\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "parts","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: parts"}]},"annotation": "genExpr: std/os/path/Path((match (q) {\n    ((@skip std/os/path/Path((@x@1: string) : string, (@pat@0@4: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@6: std/os/path/path)\n       -> @x@1;\n  }), parts)"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(p: std/os/path/path, basename@0: string){\n  val q : std/os/path/path;\n  val v@10012 : (vector :: V -> V)<string>;\n  val parts : (list :: V -> V)<string>;\n  std/os/path/Path((match (q) {\n      ((@skip std/os/path/Path((@x@1: string) : string, (@pat@0@4: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@6: std/os/path/path)\n         -> @x@1;\n    }), parts);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/change-base\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}, {\"op\": \"String\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/change-base"]}, {"name": {"op": "Var","id": "std/os/path/split-base","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "basename@0","type": {"op": "String"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x110","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/find-last","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/find-last"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "basename@0","type": {"op": "String"}},"annotation": "genExpr: basename@0"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "."},"annotation": "genExpr: \".\""}]},"annotation": "genExpr: std/core/sslice/find-last(basename@0, \".\")"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x110","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"111","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"111","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"111\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"112","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"113","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"114","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<string,string>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/string"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"111","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"111\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"115","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"116","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"117","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/Sslice","type": {"op": "Function","params": [{"op": "String"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/Sslice"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"str\"115","type": {"op": "String"}},"annotation": "genTest: normal: (s: string) -> {\"op\": \"Var\",\"id\": \"@\\\"str\\\"115\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: s"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"start\"116","type": {"op": "Int"}},"annotation": "genTest: normal: (start: int) -> {\"op\": \"Var\",\"id\": \"@\\\"start\\\"116\",\"type\": {\"op\": \"Int\"}}"},"annotation": "genExpr: start"}]},"annotation": "genExpr: std/core/sslice/Sslice(s, 0, start)"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"111\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"111\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(s,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"115\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"115\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"116\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"116\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"117\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"117\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"111\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"111\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"115\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"116\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"117\",\"type\": {\"op\": \"Int\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (slice) {\n  ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n     -> std/core/sslice/Sslice(s, 0, start);\n}"}]},"annotation": "genExpr: std/core/sslice/string((match (slice) {\n  ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n     -> std/core/sslice/Sslice(s, 0, start);\n}))"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/string"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/after","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/after"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"111","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"111\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: slice"}]},"annotation": "genExpr: std/core/sslice/after(slice)"}]},"annotation": "genExpr: std/core/sslice/string((std/core/sslice/after(slice)))"}]},"annotation": "genExpr: std/core/types/Tuple2<string,string>((std/core/sslice/string((match (slice) {\n    ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n       -> std/core/sslice/Sslice(s, 0, start);\n  }))), (std/core/sslice/string((std/core/sslice/after(slice)))))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x110\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(slice,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"111\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"111\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"112\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"112\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"113\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"113\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"114\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"114\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"111\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"111\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"112\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"113\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"114\",\"type\": {\"op\": \"Int\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x110\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"111\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x110","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<string,string>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "basename@0","type": {"op": "String"}},"annotation": "genExpr: basename@0"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}]},"annotation": "genExpr: std/core/types/Tuple2<string,string>(basename@0, \"\")"}}]},"annotation": "genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"@x110\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x110\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(basename@0: string){\n  match ((std/core/sslice/find-last(basename@0, \".\"))) {\n    ((std/core/types/Just(((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as slice: sslice/sslice) : sslice/sslice) : (maybe :: V -> V)<sslice/sslice> ) as @pat: ((maybe :: V -> V)<sslice/sslice>))\n       -> std/core/types/Tuple2<string,string>((std/core/sslice/string((match (slice) {\n          ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n             -> std/core/sslice/Sslice(s, 0, start);\n        }))), (std/core/sslice/string((std/core/sslice/after(slice)))));\n    ((@skip std/core/types/Nothing() : (maybe :: V -> V)<sslice/sslice> ) as @pat@3@0: ((maybe :: V -> V)<sslice/sslice>))\n       -> std/core/types/Tuple2<string,string>(basename@0, \"\");\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/split-base\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/split-base"]}, {"name": {"op": "Var","id": "std/os/path/change-ext","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/os/path/path"}, {"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}}, {"op": "Var","id": "extname@0","type": {"op": "String"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x118","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/find-last","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/find-last"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"119","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"120","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"120","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"120\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"121","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"122","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"121","type": {"op": "Top"}},"annotation": "genTest: normal: (x@0: string) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"121\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x@0"}}]},"annotation": "genBranch: [(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"120\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"120\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"121\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"121\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"122\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"122\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"120\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"120\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"121\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"122\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"120","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"120\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x123","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x123","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"@x123\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x123\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x123","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"124","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"124","type": {"op": "Top"}},"annotation": "genTest: normal: (x: string) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"124\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}}]},"annotation": "genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"@x123\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"124\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"124\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x123\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"124\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@1: ((maybe :: V -> V)<string>))\n     -> x;\n}"}}]},"annotation": "genBranch: [(@pat@1@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"120\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"120\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"120\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"120\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@x) {\n  ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n     -> x@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@1: ((maybe :: V -> V)<string>))\n         -> x;\n    });\n}"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"119\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"119\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"120\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"120\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"119\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"120\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n     -> (match (@x) {\n      ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n         -> x@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n         -> (match ((std/core/types/Nothing<string>)) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n             -> \"\";\n          ((@skip std/core/types/Just((x: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@1: ((maybe :: V -> V)<string>))\n             -> x;\n        });\n    });\n}"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "."},"annotation": "genExpr: \".\""}]},"annotation": "genExpr: std/core/sslice/find-last((match (p) {\n    ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n       -> (match (@x) {\n        ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n           -> x@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@1: ((maybe :: V -> V)<string>))\n               -> x;\n          });\n      });\n  }), \".\")"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x118","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"125","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"125","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"125\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"126","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"127","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"128","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "stemname@0","type": {"op": "String"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/string"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"125","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"125\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"129","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"130","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"131","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/Sslice","type": {"op": "Function","params": [{"op": "String"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/Sslice"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"str\"129","type": {"op": "String"}},"annotation": "genTest: normal: (s: string) -> {\"op\": \"Var\",\"id\": \"@\\\"str\\\"129\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: s"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"start\"130","type": {"op": "Int"}},"annotation": "genTest: normal: (start: int) -> {\"op\": \"Var\",\"id\": \"@\\\"start\\\"130\",\"type\": {\"op\": \"Int\"}}"},"annotation": "genExpr: start"}]},"annotation": "genExpr: std/core/sslice/Sslice(s, 0, start)"}}]},"annotation": "genBranch: [(@pat@3@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"125\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"125\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(s,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"129\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"129\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"130\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"130\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"131\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"131\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"125\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"125\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"129\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"130\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"131\",\"type\": {\"op\": \"Int\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (slice) {\n  ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3@0: sslice/sslice)\n     -> std/core/sslice/Sslice(s, 0, start);\n}"}]},"annotation": "genExpr: std/core/sslice/string((match (slice) {\n  ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3@0: sslice/sslice)\n     -> std/core/sslice/Sslice(s, 0, start);\n}))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"stemname@0\",\"type\": {\"op\": \"String\"}}"},"export_as": ["stemname@0"]}, {"name": {"op": "Var","id": "@pat@1@2","type": {"op": "String"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/string"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/after","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/after"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"125","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"125\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: slice"}]},"annotation": "genExpr: std/core/sslice/after(slice)"}]},"annotation": "genExpr: std/core/sslice/string((std/core/sslice/after(slice)))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"@pat@1@2\",\"type\": {\"op\": \"String\"}}"},"export_as": ["@pat@1@2"]}, {"name": {"op": "Var","id": "maybe@10070","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/starts-with","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/starts-with"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "extname@0","type": {"op": "String"}},"annotation": "genExpr: extname@0"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "."},"annotation": "genExpr: \".\""}]},"annotation": "genExpr: std/core/sslice/starts-with(extname@0, \".\")"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"maybe@10070\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}"},"export_as": ["maybe@10070"]}, {"name": {"op": "Var","id": "newext","type": {"op": "String"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "maybe@10070","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"132","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "extname@0","type": {"op": "String"}},"annotation": "genExpr: extname@0"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"maybe@10070\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"132\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@4: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"132\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"maybe@10070\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"132\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "maybe@10070","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "."},"annotation": "genExpr: \".\""}, {"op": "DebugWrap","inner": {"op": "Var","id": "extname@0","type": {"op": "String"}},"annotation": "genExpr: extname@0"}]},"annotation": "genExpr: std/core/types/(++)(\".\", extname@0)"}}]},"annotation": "genBranch: [(@pat@1@3,{\"op\": \"Var\",\"id\": \"maybe@10070\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"maybe@10070\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (maybe@10070) {\n  ((std/core/types/Just((@pat@0@4: sslice/sslice) : sslice/sslice) : (maybe :: V -> V)<sslice/sslice> ) as @pat@5: ((maybe :: V -> V)<sslice/sslice>))\n     -> extname@0;\n  ((@skip std/core/types/Nothing() : (maybe :: V -> V)<sslice/sslice> ) as @pat@1@3: ((maybe :: V -> V)<sslice/sslice>))\n     -> std/core/types/(++)(\".\", extname@0);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"newext\",\"type\": {\"op\": \"String\"}}"},"export_as": ["newext"]}, {"name": {"op": "Var","id": "s@0@10114","type": {"op": "String"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "stemname@0","type": {"op": "String"}},"annotation": "genExpr: stemname@0"}, {"op": "DebugWrap","inner": {"op": "Var","id": "newext","type": {"op": "String"}},"annotation": "genExpr: newext"}]},"annotation": "genExpr: std/core/types/(++)(stemname@0, newext)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"s@0@10114\",\"type\": {\"op\": \"String\"}}"},"export_as": ["s@0@10114"]}, {"name": {"op": "Var","id": "v@10012","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/string/splitv","args": [{"op": "Var","id": "s@0@10114","type": {"op": "String"}}, {"op": "Literal","type": {"op": "String"},"value": "/"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}},"annotation": "genExpr: std/core/string/splitv(s@0@10114, \"/\")"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"v@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}}"},"export_as": ["v@10012"]}, {"name": {"op": "Var","id": "parts","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/push-parts","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/push-parts"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/vector","type": {"op": "Ptr"}},"name": "std/core/vector/vlist","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"vector\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/vector/vlist<string>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "v@10012","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: v@10012"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"annotation": "genExpr: std/core/types/@None<(list :: V -> V)<string>>"}]},"annotation": "genExpr: std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>))"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"133","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"134","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"134","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x@0: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"134\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"135","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"136","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"136","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"136\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}}]},"annotation": "genBranch: [(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"134\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"134\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(@pat@0@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"135\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"135\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"136\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"136\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"134\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"134\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"135\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"136\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"134","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x@0: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"134\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<string>"}}]},"annotation": "genBranch: [(@pat@1@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"134\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"134\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"134\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"134\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@x@0) {\n  ((std/core/types/Cons((@pat@0@1@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2@0: ((list :: V -> V)<string>))\n     -> xx;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1@0: ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}"}}]},"annotation": "genBranch: [(@pat@3@1,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"133\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@2@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"133\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"134\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"134\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"133\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"134\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@2@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3@1: std/os/path/path)\n     -> (match (@x@0) {\n      ((std/core/types/Cons((@pat@0@1@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2@0: ((list :: V -> V)<string>))\n         -> xx;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1@0: ((list :: V -> V)<string>))\n         -> std/core/types/Nil<string>;\n    });\n}"}]},"annotation": "genExpr: std/os/path/push-parts((std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>))), (match (p) {\n    ((@skip std/os/path/Path((@pat@0@2@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3@1: std/os/path/path)\n       -> (match (@x@0) {\n        ((std/core/types/Cons((@pat@0@1@0: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2@0: ((list :: V -> V)<string>))\n           -> xx;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1@0: ((list :: V -> V)<string>))\n           -> std/core/types/Nil<string>;\n      });\n  }))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"export_as": ["parts"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/Path","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/Path"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"129","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"130","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"root\"129","type": {"op": "String"}},"annotation": "genTest: normal: (@x@0@0: string) -> {\"op\": \"Var\",\"id\": \"@\\\"root\\\"129\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: @x@0@0"}}]},"annotation": "genBranch: [(@pat@6@0,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"129\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"129\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@5@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"130\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@5@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"130\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"129\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"130\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p) {\n  ((@skip std/os/path/Path((@x@0@0: string) : string, (@pat@0@5@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@6@0: std/os/path/path)\n     -> @x@0@0;\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "parts","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: parts"}]},"annotation": "genExpr: std/os/path/Path((match (p) {\n    ((@skip std/os/path/Path((@x@0@0: string) : string, (@pat@0@5@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@6@0: std/os/path/path)\n       -> @x@0@0;\n  }), parts)"}},"annotation": "genExpr: val stemname@0 : string;\nval @pat@1@2 : string;\nval maybe@10070 : (maybe :: V -> V)<sslice/sslice>;\nval newext : string;\nval s@0@10114 : string;\nval v@10012 : (vector :: V -> V)<string>;\nval parts : (list :: V -> V)<string>;\nstd/os/path/Path((match (p) {\n    ((@skip std/os/path/Path((@x@0@0: string) : string, (@pat@0@5@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@6@0: std/os/path/path)\n       -> @x@0@0;\n  }), parts)"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x118\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(slice,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"125\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"125\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"126\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"126\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"127\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"127\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"128\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"128\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"125\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"125\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"126\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"127\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"128\",\"type\": {\"op\": \"Int\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x118\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"125\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x118","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "maybe@10070@0","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/starts-with","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/starts-with"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "extname@0","type": {"op": "String"}},"annotation": "genExpr: extname@0"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "."},"annotation": "genExpr: \".\""}]},"annotation": "genExpr: std/core/sslice/starts-with(extname@0, \".\")"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"maybe@10070@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}"},"export_as": ["maybe@10070@0"]}, {"name": {"op": "Var","id": "newext@0","type": {"op": "String"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "maybe@10070@0","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"131","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "extname@0","type": {"op": "String"}},"annotation": "genExpr: extname@0"}}]},"annotation": "genBranch: [(@pat@5@0,{\"op\": \"Var\",\"id\": \"maybe@10070@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(@pat@0@4@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"131\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@4@0: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"131\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"maybe@10070@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"131\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "maybe@10070@0","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "."},"annotation": "genExpr: \".\""}, {"op": "DebugWrap","inner": {"op": "Var","id": "extname@0","type": {"op": "String"}},"annotation": "genExpr: extname@0"}]},"annotation": "genExpr: std/core/types/(++)(\".\", extname@0)"}}]},"annotation": "genBranch: [(@pat@1@3@0,{\"op\": \"Var\",\"id\": \"maybe@10070@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"maybe@10070@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (maybe@10070@0) {\n  ((std/core/types/Just((@pat@0@4@0: sslice/sslice) : sslice/sslice) : (maybe :: V -> V)<sslice/sslice> ) as @pat@5@0: ((maybe :: V -> V)<sslice/sslice>))\n     -> extname@0;\n  ((@skip std/core/types/Nothing() : (maybe :: V -> V)<sslice/sslice> ) as @pat@1@3@0: ((maybe :: V -> V)<sslice/sslice>))\n     -> std/core/types/(++)(\".\", extname@0);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"newext@0\",\"type\": {\"op\": \"String\"}}"},"export_as": ["newext@0"]}, {"name": {"op": "Var","id": "s@0@10114@0","type": {"op": "String"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"132","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"133","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"133","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x@1: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"134","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"135","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"134","type": {"op": "Top"}},"annotation": "genTest: normal: (x@0@0: string) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"134\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x@0@0"}}]},"annotation": "genBranch: [(@pat@1@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"133\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"134\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"134\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"135\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"133\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"134\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"133","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x@1: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x136","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x136","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}}]},"annotation": "genBranch: [(@pat@4@0,{\"op\": \"Var\",\"id\": \"@x136\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x136\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x136","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"137","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"137","type": {"op": "Top"}},"annotation": "genTest: normal: (x@1: string) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"137\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x@1"}}]},"annotation": "genBranch: [(@pat@0@1@1,{\"op\": \"Var\",\"id\": \"@x136\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"137\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"137\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x136\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"137\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@1@1: ((maybe :: V -> V)<string>))\n     -> x@1;\n}"}}]},"annotation": "genBranch: [(@pat@1@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"133\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"133\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@x@1) {\n  ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n     -> x@0@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@1@1: ((maybe :: V -> V)<string>))\n         -> x@1;\n    });\n}"}}]},"annotation": "genBranch: [(@pat@3@2,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@2@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"132\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@2@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"132\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"133\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"132\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@2@1: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3@2: std/os/path/path)\n     -> (match (@x@1) {\n      ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n         -> x@0@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n         -> (match ((std/core/types/Nothing<string>)) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n             -> \"\";\n          ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@1@1: ((maybe :: V -> V)<string>))\n             -> x@1;\n        });\n    });\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "newext@0","type": {"op": "String"}},"annotation": "genExpr: newext@0"}]},"annotation": "genExpr: std/core/types/(++)((match (p) {\n    ((@skip std/os/path/Path((@pat@0@2@1: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3@2: std/os/path/path)\n       -> (match (@x@1) {\n        ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n           -> x@0@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@1@1: ((maybe :: V -> V)<string>))\n               -> x@1;\n          });\n      });\n  }), newext@0)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"s@0@10114@0\",\"type\": {\"op\": \"String\"}}"},"export_as": ["s@0@10114@0"]}, {"name": {"op": "Var","id": "v@10012@0","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/string/splitv","args": [{"op": "Var","id": "s@0@10114@0","type": {"op": "String"}}, {"op": "Literal","type": {"op": "String"},"value": "/"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}},"annotation": "genExpr: std/core/string/splitv(s@0@10114@0, \"/\")"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"v@10012@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}}"},"export_as": ["v@10012@0"]}, {"name": {"op": "Var","id": "parts@0","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/push-parts","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/push-parts"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/vector","type": {"op": "Ptr"}},"name": "std/core/vector/vlist","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"vector\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/vector/vlist<string>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "v@10012@0","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: v@10012@0"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"annotation": "genExpr: std/core/types/@None<(list :: V -> V)<string>>"}]},"annotation": "genExpr: std/core/vector/vlist<string>(v@10012@0, (std/core/types/@None<(list :: V -> V)<string>>))"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"138","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"139","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"139","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x@0@1: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"139\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"140","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"141","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"141","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx@0: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"141\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx@0"}}]},"annotation": "genBranch: [(@pat@2@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"139\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"139\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(@pat@0@1@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"140\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@1@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"140\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"141\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"141\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"139\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"139\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"140\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"141\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"139","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x@0@1: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"139\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<string>"}}]},"annotation": "genBranch: [(@pat@1@1@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"139\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"139\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"139\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"139\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@x@0@1) {\n  ((std/core/types/Cons((@pat@0@1@0@0: string) : string, (xx@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2@0@0: ((list :: V -> V)<string>))\n     -> xx@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1@0@0: ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}"}}]},"annotation": "genBranch: [(@pat@3@0@1,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@2@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"138\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@2@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"138\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"139\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"139\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"138\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"139\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@2@0@0: string) : string, (@x@0@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3@0@1: std/os/path/path)\n     -> (match (@x@0@1) {\n      ((std/core/types/Cons((@pat@0@1@0@0: string) : string, (xx@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2@0@0: ((list :: V -> V)<string>))\n         -> xx@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1@0@0: ((list :: V -> V)<string>))\n         -> std/core/types/Nil<string>;\n    });\n}"}]},"annotation": "genExpr: std/os/path/push-parts((std/core/vector/vlist<string>(v@10012@0, (std/core/types/@None<(list :: V -> V)<string>>))), (match (p) {\n    ((@skip std/os/path/Path((@pat@0@2@0@0: string) : string, (@x@0@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3@0@1: std/os/path/path)\n       -> (match (@x@0@1) {\n        ((std/core/types/Cons((@pat@0@1@0@0: string) : string, (xx@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@2@0@0: ((list :: V -> V)<string>))\n           -> xx@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1@0@0: ((list :: V -> V)<string>))\n           -> std/core/types/Nil<string>;\n      });\n  }))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"parts@0\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"export_as": ["parts@0"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/Path","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/Path"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"131","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"132","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"root\"131","type": {"op": "String"}},"annotation": "genTest: normal: (@x@0@0@0: string) -> {\"op\": \"Var\",\"id\": \"@\\\"root\\\"131\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: @x@0@0@0"}}]},"annotation": "genBranch: [(@pat@6@0@0,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"131\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x@0@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"131\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@5@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"132\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@5@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"132\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"131\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"132\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p) {\n  ((@skip std/os/path/Path((@x@0@0@0: string) : string, (@pat@0@5@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@6@0@0: std/os/path/path)\n     -> @x@0@0@0;\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "parts@0","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: parts@0"}]},"annotation": "genExpr: std/os/path/Path((match (p) {\n    ((@skip std/os/path/Path((@x@0@0@0: string) : string, (@pat@0@5@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@6@0@0: std/os/path/path)\n       -> @x@0@0@0;\n  }), parts@0)"}},"annotation": "genExpr: val maybe@10070@0 : (maybe :: V -> V)<sslice/sslice>;\nval newext@0 : string;\nval s@0@10114@0 : string;\nval v@10012@0 : (vector :: V -> V)<string>;\nval parts@0 : (list :: V -> V)<string>;\nstd/os/path/Path((match (p) {\n    ((@skip std/os/path/Path((@x@0@0@0: string) : string, (@pat@0@5@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@6@0@0: std/os/path/path)\n       -> @x@0@0@0;\n  }), parts@0)"}}]},"annotation": "genBranch: [(@pat@3@0@0,{\"op\": \"Var\",\"id\": \"@x118\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x118\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(p: std/os/path/path, extname@0: string){\n  match ((std/core/sslice/find-last((match (p) {\n      ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n         -> (match (@x) {\n          ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n             -> x@0;\n          ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n             -> (match ((std/core/types/Nothing<string>)) {\n              ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n                 -> \"\";\n              ((@skip std/core/types/Just((x: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@1: ((maybe :: V -> V)<string>))\n                 -> x;\n            });\n        });\n    }), \".\"))) {\n    ((std/core/types/Just(((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as slice: sslice/sslice) : sslice/sslice) : (maybe :: V -> V)<sslice/sslice> ) as @pat: ((maybe :: V -> V)<sslice/sslice>))\n       -> val stemname@0 : string;\n          val @pat@1@2 : string;\n          val maybe@10070 : (maybe :: V -> V)<sslice/sslice>;\n          val newext : string;\n          val s@0@10114 : string;\n          val v@10012 : (vector :: V -> V)<string>;\n          val parts : (list :: V -> V)<string>;\n      std/os/path/Path((match (p) {\n          ((@skip std/os/path/Path((@x@0@0: string) : string, (@pat@0@5@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@6@0: std/os/path/path)\n             -> @x@0@0;\n        }), parts);\n    ((@skip std/core/types/Nothing() : (maybe :: V -> V)<sslice/sslice> ) as @pat@3@0@0: ((maybe :: V -> V)<sslice/sslice>))\n       -> val maybe@10070@0 : (maybe :: V -> V)<sslice/sslice>;\n          val newext@0 : string;\n          val s@0@10114@0 : string;\n          val v@10012@0 : (vector :: V -> V)<string>;\n          val parts@0 : (list :: V -> V)<string>;\n      std/os/path/Path((match (p) {\n          ((@skip std/os/path/Path((@x@0@0@0: string) : string, (@pat@0@5@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@6@0@0: std/os/path/path)\n             -> @x@0@0@0;\n        }), parts@0);\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/change-ext\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}, {\"op\": \"String\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/change-ext"]}, {"name": {"op": "Var","id": "std/os/path/extname","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/os/path/path"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "tuple2@10072","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x133","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/find-last","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/find-last"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"134","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"135","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"135","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"136","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"137","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"136","type": {"op": "Top"}},"annotation": "genTest: normal: (x@0: string) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"136\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x@0"}}]},"annotation": "genBranch: [(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"135\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"136\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"136\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"137\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"135\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"136\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"135","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x138","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x138","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"@x138\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x138\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x138","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"139","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"139","type": {"op": "Top"}},"annotation": "genTest: normal: (x@1: string) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"139\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x@1"}}]},"annotation": "genBranch: [(@pat@0@3,{\"op\": \"Var\",\"id\": \"@x138\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"139\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"139\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x138\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"139\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n     -> x@1;\n}"}}]},"annotation": "genBranch: [(@pat@1@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"135\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"135\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@x) {\n  ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n     -> x@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n         -> x@1;\n    });\n}"}}]},"annotation": "genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"134\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"134\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"135\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"134\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n     -> (match (@x) {\n      ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n         -> x@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n         -> (match ((std/core/types/Nothing<string>)) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n             -> \"\";\n          ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n             -> x@1;\n        });\n    });\n}"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "."},"annotation": "genExpr: \".\""}]},"annotation": "genExpr: std/core/sslice/find-last((match (p) {\n    ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n       -> (match (@x) {\n        ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n           -> x@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n               -> x@1;\n          });\n      });\n  }), \".\")"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x133","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"140","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"140","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"140\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"141","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"142","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"143","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<string,string>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/string"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"140","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"140\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"144","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"145","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"146","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/Sslice","type": {"op": "Function","params": [{"op": "String"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/Sslice"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"str\"144","type": {"op": "String"}},"annotation": "genTest: normal: (s: string) -> {\"op\": \"Var\",\"id\": \"@\\\"str\\\"144\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: s"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"start\"145","type": {"op": "Int"}},"annotation": "genTest: normal: (start: int) -> {\"op\": \"Var\",\"id\": \"@\\\"start\\\"145\",\"type\": {\"op\": \"Int\"}}"},"annotation": "genExpr: start"}]},"annotation": "genExpr: std/core/sslice/Sslice(s, 0, start)"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"140\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"140\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(s,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"144\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"144\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"145\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"145\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"146\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"146\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"140\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"140\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"144\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"145\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"146\",\"type\": {\"op\": \"Int\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (slice) {\n  ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n     -> std/core/sslice/Sslice(s, 0, start);\n}"}]},"annotation": "genExpr: std/core/sslice/string((match (slice) {\n  ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n     -> std/core/sslice/Sslice(s, 0, start);\n}))"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/string"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/after","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/after"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"140","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"140\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: slice"}]},"annotation": "genExpr: std/core/sslice/after(slice)"}]},"annotation": "genExpr: std/core/sslice/string((std/core/sslice/after(slice)))"}]},"annotation": "genExpr: std/core/types/Tuple2<string,string>((std/core/sslice/string((match (slice) {\n    ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n       -> std/core/sslice/Sslice(s, 0, start);\n  }))), (std/core/sslice/string((std/core/sslice/after(slice)))))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(slice,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"140\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"140\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"141\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"141\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"142\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"142\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"143\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"143\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"140\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"140\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"141\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"142\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"143\",\"type\": {\"op\": \"Int\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"140\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x133","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<string,string>"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"147","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"148","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"148","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x@0: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"148\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"149","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"150","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"149","type": {"op": "Top"}},"annotation": "genTest: normal: (x@0@0: string) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"149\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x@0@0"}}]},"annotation": "genBranch: [(@pat@1@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"148\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"149\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"149\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"150\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"148\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"149\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"148","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x@0: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"148\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x151","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x151","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}}]},"annotation": "genBranch: [(@pat@4@0,{\"op\": \"Var\",\"id\": \"@x151\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x151\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x151","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"152","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"152","type": {"op": "Top"}},"annotation": "genTest: normal: (x@1@0: string) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"152\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x@1@0"}}]},"annotation": "genBranch: [(@pat@0@3@0,{\"op\": \"Var\",\"id\": \"@x151\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"152\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"152\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x151\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"152\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n     -> x@1@0;\n}"}}]},"annotation": "genBranch: [(@pat@1@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"148\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"148\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@x@0) {\n  ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n     -> x@0@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n         -> x@1@0;\n    });\n}"}}]},"annotation": "genBranch: [(@pat@2@0@0,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"147\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"147\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"148\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"147\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"148\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n     -> (match (@x@0) {\n      ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n         -> x@0@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n         -> (match ((std/core/types/Nothing<string>)) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n             -> \"\";\n          ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n             -> x@1@0;\n        });\n    });\n}"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}]},"annotation": "genExpr: std/core/types/Tuple2<string,string>((match (p) {\n    ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n       -> (match (@x@0) {\n        ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n           -> x@0@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n               -> x@1@0;\n          });\n      });\n  }), \"\")"}}]},"annotation": "genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"@x133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x133\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/sslice/find-last((match (p) {\n    ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n       -> (match (@x) {\n        ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n           -> x@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n               -> x@1;\n          });\n      });\n  }), \".\"))) {\n  ((std/core/types/Just(((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as slice: sslice/sslice) : sslice/sslice) : (maybe :: V -> V)<sslice/sslice> ) as @pat: ((maybe :: V -> V)<sslice/sslice>))\n     -> std/core/types/Tuple2<string,string>((std/core/sslice/string((match (slice) {\n        ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n           -> std/core/sslice/Sslice(s, 0, start);\n      }))), (std/core/sslice/string((std/core/sslice/after(slice)))));\n  ((@skip std/core/types/Nothing() : (maybe :: V -> V)<sslice/sslice> ) as @pat@3@0: ((maybe :: V -> V)<sslice/sslice>))\n     -> std/core/types/Tuple2<string,string>((match (p) {\n        ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n           -> (match (@x@0) {\n            ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n               -> x@0@0;\n            ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n               -> (match ((std/core/types/Nothing<string>)) {\n                ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n                   -> \"\";\n                ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n                   -> x@1@0;\n              });\n          });\n      }), \"\");\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"tuple2@10072\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}"},"export_as": ["tuple2@10072"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "tuple2@10072","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"133","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"134","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"134","type": {"op": "Top"}},"annotation": "genTest: normal: (@x@0@0: string) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"134\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x@0@0"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"tuple2@10072\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@pat@0@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"133\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@4: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"133\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"134\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"134\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"tuple2@10072\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"133\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"134\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(p: std/os/path/path){\n  val tuple2@10072 : (string, string)\n        = match ((std/core/sslice/find-last((match (p) {\n            ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n               -> (match (@x) {\n                ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n                   -> x@0;\n                ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n                   -> (match ((std/core/types/Nothing<string>)) {\n                    ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n                       -> \"\";\n                    ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n                       -> x@1;\n                  });\n              });\n          }), \".\"))) {\n          ((std/core/types/Just(((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as slice: sslice/sslice) : sslice/sslice) : (maybe :: V -> V)<sslice/sslice> ) as @pat: ((maybe :: V -> V)<sslice/sslice>))\n             -> std/core/types/Tuple2<string,string>((std/core/sslice/string((match (slice) {\n                ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n                   -> std/core/sslice/Sslice(s, 0, start);\n              }))), (std/core/sslice/string((std/core/sslice/after(slice)))));\n          ((@skip std/core/types/Nothing() : (maybe :: V -> V)<sslice/sslice> ) as @pat@3@0: ((maybe :: V -> V)<sslice/sslice>))\n             -> std/core/types/Tuple2<string,string>((match (p) {\n                ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n                   -> (match (@x@0) {\n                    ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n                       -> x@0@0;\n                    ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n                       -> (match ((std/core/types/Nothing<string>)) {\n                        ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n                           -> \"\";\n                        ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n                           -> x@1@0;\n                      });\n                  });\n              }), \"\");\n        };\n  match (tuple2@10072) {\n    ((@skip std/core/types/Tuple2((@pat@0@4: string) : string, (@x@0@0: string) : string) : (string, string) ) as @pat@5: (string, string))\n       -> @x@0@0;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/extname\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/extname"]}, {"name": {"op": "Var","id": "std/os/path/change-stem","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/os/path/path"}, {"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}}, {"op": "Var","id": "stemname@0","type": {"op": "String"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "tuple2@10074","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x135","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/find-last","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/find-last"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"136","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"137","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"137","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"138","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"139","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"138","type": {"op": "Top"}},"annotation": "genTest: normal: (x@0: string) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"138\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x@0"}}]},"annotation": "genBranch: [(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"137\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"138\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"138\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"139\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"139\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"137\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"138\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"139\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"137","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x140","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x140","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"@x140\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x140\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x140","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"141","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"141","type": {"op": "Top"}},"annotation": "genTest: normal: (x@1: string) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"141\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x@1"}}]},"annotation": "genBranch: [(@pat@0@3,{\"op\": \"Var\",\"id\": \"@x140\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"141\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"141\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x140\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"141\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n     -> x@1;\n}"}}]},"annotation": "genBranch: [(@pat@1@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"137\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"137\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@x) {\n  ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n     -> x@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n         -> x@1;\n    });\n}"}}]},"annotation": "genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"136\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"136\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"137\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"136\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"137\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n     -> (match (@x) {\n      ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n         -> x@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n         -> (match ((std/core/types/Nothing<string>)) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n             -> \"\";\n          ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n             -> x@1;\n        });\n    });\n}"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "."},"annotation": "genExpr: \".\""}]},"annotation": "genExpr: std/core/sslice/find-last((match (p) {\n    ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n       -> (match (@x) {\n        ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n           -> x@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n               -> x@1;\n          });\n      });\n  }), \".\")"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x135","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"142","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"142","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"142\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"143","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"144","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"145","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<string,string>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/string"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"142","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"142\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"146","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"147","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"148","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/Sslice","type": {"op": "Function","params": [{"op": "String"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/Sslice"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"str\"146","type": {"op": "String"}},"annotation": "genTest: normal: (s: string) -> {\"op\": \"Var\",\"id\": \"@\\\"str\\\"146\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: s"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"start\"147","type": {"op": "Int"}},"annotation": "genTest: normal: (start: int) -> {\"op\": \"Var\",\"id\": \"@\\\"start\\\"147\",\"type\": {\"op\": \"Int\"}}"},"annotation": "genExpr: start"}]},"annotation": "genExpr: std/core/sslice/Sslice(s, 0, start)"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"142\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"142\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(s,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"146\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"146\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"147\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"147\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"148\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"142\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"142\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"146\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"147\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"148\",\"type\": {\"op\": \"Int\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (slice) {\n  ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n     -> std/core/sslice/Sslice(s, 0, start);\n}"}]},"annotation": "genExpr: std/core/sslice/string((match (slice) {\n  ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n     -> std/core/sslice/Sslice(s, 0, start);\n}))"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/string"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/after","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/after"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"142","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"142\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: slice"}]},"annotation": "genExpr: std/core/sslice/after(slice)"}]},"annotation": "genExpr: std/core/sslice/string((std/core/sslice/after(slice)))"}]},"annotation": "genExpr: std/core/types/Tuple2<string,string>((std/core/sslice/string((match (slice) {\n    ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n       -> std/core/sslice/Sslice(s, 0, start);\n  }))), (std/core/sslice/string((std/core/sslice/after(slice)))))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(slice,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"142\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"142\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"143\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"143\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"144\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"144\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"145\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"145\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"142\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"142\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"143\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"144\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"145\",\"type\": {\"op\": \"Int\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"142\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x135","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<string,string>"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"149","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"150","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"150","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x@0: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"151","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"152","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"151","type": {"op": "Top"}},"annotation": "genTest: normal: (x@0@0: string) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"151\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x@0@0"}}]},"annotation": "genBranch: [(@pat@1@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"150\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"151\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"151\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"152\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"152\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"150\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"151\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"152\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"150","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x@0: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x153","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x153","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}}]},"annotation": "genBranch: [(@pat@4@0,{\"op\": \"Var\",\"id\": \"@x153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x153","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"154","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"154","type": {"op": "Top"}},"annotation": "genTest: normal: (x@1@0: string) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"154\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x@1@0"}}]},"annotation": "genBranch: [(@pat@0@3@0,{\"op\": \"Var\",\"id\": \"@x153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"154\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"154\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"154\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n     -> x@1@0;\n}"}}]},"annotation": "genBranch: [(@pat@1@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"150\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"150\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@x@0) {\n  ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n     -> x@0@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n         -> x@1@0;\n    });\n}"}}]},"annotation": "genBranch: [(@pat@2@0@0,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"149\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"149\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"150\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"149\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n     -> (match (@x@0) {\n      ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n         -> x@0@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n         -> (match ((std/core/types/Nothing<string>)) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n             -> \"\";\n          ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n             -> x@1@0;\n        });\n    });\n}"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}]},"annotation": "genExpr: std/core/types/Tuple2<string,string>((match (p) {\n    ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n       -> (match (@x@0) {\n        ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n           -> x@0@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n               -> x@1@0;\n          });\n      });\n  }), \"\")"}}]},"annotation": "genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"@x135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x135\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/sslice/find-last((match (p) {\n    ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n       -> (match (@x) {\n        ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n           -> x@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n               -> x@1;\n          });\n      });\n  }), \".\"))) {\n  ((std/core/types/Just(((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as slice: sslice/sslice) : sslice/sslice) : (maybe :: V -> V)<sslice/sslice> ) as @pat: ((maybe :: V -> V)<sslice/sslice>))\n     -> std/core/types/Tuple2<string,string>((std/core/sslice/string((match (slice) {\n        ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n           -> std/core/sslice/Sslice(s, 0, start);\n      }))), (std/core/sslice/string((std/core/sslice/after(slice)))));\n  ((@skip std/core/types/Nothing() : (maybe :: V -> V)<sslice/sslice> ) as @pat@3@0: ((maybe :: V -> V)<sslice/sslice>))\n     -> std/core/types/Tuple2<string,string>((match (p) {\n        ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n           -> (match (@x@0) {\n            ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n               -> x@0@0;\n            ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n               -> (match ((std/core/types/Nothing<string>)) {\n                ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n                   -> \"\";\n                ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n                   -> x@1@0;\n              });\n          });\n      }), \"\");\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"tuple2@10074\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}"},"export_as": ["tuple2@10074"]}, {"name": {"op": "Var","id": "basename@0@10076","type": {"op": "String"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "stemname@0","type": {"op": "String"}},"annotation": "genExpr: stemname@0"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x155","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixEq(String, String): Boolean","args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "tuple2@10074","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"156","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"157","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"157","type": {"op": "Top"}},"annotation": "genTest: normal: (@x@0@0: string) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"157\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x@0@0"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"tuple2@10074\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@pat@0@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"156\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@4: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"156\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"157\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"157\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"tuple2@10074\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"156\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"157\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (tuple2@10074) {\n  ((@skip std/core/types/Tuple2((@pat@0@4: string) : string, (@x@0@0: string) : string) : (string, string) ) as @pat@5: (string, string))\n     -> @x@0@0;\n}"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/string/(==)((match (tuple2@10074) {\n    ((@skip std/core/types/Tuple2((@pat@0@4: string) : string, (@x@0@0: string) : string) : (string, string) ) as @pat@5: (string, string))\n       -> @x@0@0;\n  }), \"\")"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x155","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}}]},"annotation": "genBranch: [(@pat@3@1,{\"op\": \"Var\",\"id\": \"@x155\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x155","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "."},"annotation": "genExpr: \".\""}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "tuple2@10074","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"158","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"159","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"159","type": {"op": "Top"}},"annotation": "genTest: normal: (@x@0@1: string) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"159\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x@0@1"}}]},"annotation": "genBranch: [(@pat@5@0,{\"op\": \"Var\",\"id\": \"tuple2@10074\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@pat@0@4@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"158\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@4@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"158\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"159\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"159\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"tuple2@10074\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"158\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"159\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (tuple2@10074) {\n  ((@skip std/core/types/Tuple2((@pat@0@4@0: string) : string, (@x@0@1: string) : string) : (string, string) ) as @pat@5@0: (string, string))\n     -> @x@0@1;\n}"}]},"annotation": "genExpr: std/core/types/(++)(\".\", (match (tuple2@10074) {\n    ((@skip std/core/types/Tuple2((@pat@0@4@0: string) : string, (@x@0@1: string) : string) : (string, string) ) as @pat@5@0: (string, string))\n       -> @x@0@1;\n  }))"}}]},"annotation": "genBranch: [(@pat@0@2@0,{\"op\": \"Var\",\"id\": \"@x155\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/string/(==)((match (tuple2@10074) {\n    ((@skip std/core/types/Tuple2((@pat@0@4: string) : string, (@x@0@0: string) : string) : (string, string) ) as @pat@5: (string, string))\n       -> @x@0@0;\n  }), \"\"))) {\n  ((std/core/types/True() : bool ) as @pat@3@1: bool)\n     -> \"\";\n  ((@skip std/core/types/False() : bool ) as @pat@0@2@0: bool)\n     -> std/core/types/(++)(\".\", (match (tuple2@10074) {\n        ((@skip std/core/types/Tuple2((@pat@0@4@0: string) : string, (@x@0@1: string) : string) : (string, string) ) as @pat@5@0: (string, string))\n           -> @x@0@1;\n      }));\n}"}]},"annotation": "genExpr: std/core/types/(++)(stemname@0, (match ((std/core/string/(==)((match (tuple2@10074) {\n      ((@skip std/core/types/Tuple2((@pat@0@4: string) : string, (@x@0@0: string) : string) : (string, string) ) as @pat@5: (string, string))\n         -> @x@0@0;\n    }), \"\"))) {\n    ((std/core/types/True() : bool ) as @pat@3@1: bool)\n       -> \"\";\n    ((@skip std/core/types/False() : bool ) as @pat@0@2@0: bool)\n       -> std/core/types/(++)(\".\", (match (tuple2@10074) {\n          ((@skip std/core/types/Tuple2((@pat@0@4@0: string) : string, (@x@0@1: string) : string) : (string, string) ) as @pat@5@0: (string, string))\n             -> @x@0@1;\n        }));\n  }))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"basename@0@10076\",\"type\": {\"op\": \"String\"}}"},"export_as": ["basename@0@10076"]}, {"name": {"op": "Var","id": "q","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/Path","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/Path"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x160","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"value": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x160","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"161","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"161","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-root@108: string) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"161\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-root@108"}}]},"annotation": "genBranch: [(@pat@3@2,{\"op\": \"Var\",\"id\": \"@x160\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-root@108,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"161\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-root@108: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"161\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x160\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"161\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x160","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"162","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"163","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"root\"162","type": {"op": "String"}},"annotation": "genTest: normal: (@x@0@0@0: string) -> {\"op\": \"Var\",\"id\": \"@\\\"root\\\"162\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: @x@0@0@0"}}]},"annotation": "genBranch: [(@pat@4@0@0,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"162\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x@0@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"162\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@2@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"163\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@2@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"163\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"162\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"163\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p) {\n  ((@skip std/os/path/Path((@x@0@0@0: string) : string, (@pat@0@2@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4@0@0: std/os/path/path)\n     -> @x@0@0@0;\n}"}}]},"annotation": "genBranch: [(@pat@0@1@0@0,{\"op\": \"Var\",\"id\": \"@x160\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x160\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/types/@None<string>)) {\n  ((std/core/types/@Optional((@uniq-root@108: string) : string) : ? string ) as @pat@3@2: ? string)\n     -> @uniq-root@108;\n  ((@skip std/core/types/@None() : ? string ) as @pat@0@1@0@0: ? string)\n     -> (match (p) {\n      ((@skip std/os/path/Path((@x@0@0@0: string) : string, (@pat@0@2@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4@0@0: std/os/path/path)\n         -> @x@0@0@0;\n    });\n}"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"164","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"165","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"165","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x@1: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"165\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"166","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"167","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"167","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (xx: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"167\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: xx"}}]},"annotation": "genBranch: [(@pat@6,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"165\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"165\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(@pat@0@5,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"166\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@5: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"166\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(xx,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"167\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (xx: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"167\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"165\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"165\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"166\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"167\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"165","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x@1: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"165\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<string>"}}]},"annotation": "genBranch: [(@pat@1@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"165\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"165\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"165\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"165\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@x@1) {\n  ((std/core/types/Cons((@pat@0@5: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@6: ((list :: V -> V)<string>))\n     -> xx;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1: ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}"}}]},"annotation": "genBranch: [(@pat@2@1,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"164\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"164\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"165\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"165\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"164\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"165\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@0@1: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@1: std/os/path/path)\n     -> (match (@x@1) {\n      ((std/core/types/Cons((@pat@0@5: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@6: ((list :: V -> V)<string>))\n         -> xx;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1: ((list :: V -> V)<string>))\n         -> std/core/types/Nil<string>;\n    });\n}"}]},"annotation": "genExpr: std/os/path/Path((match ((std/core/types/@None<string>)) {\n    ((std/core/types/@Optional((@uniq-root@108: string) : string) : ? string ) as @pat@3@2: ? string)\n       -> @uniq-root@108;\n    ((@skip std/core/types/@None() : ? string ) as @pat@0@1@0@0: ? string)\n       -> (match (p) {\n        ((@skip std/os/path/Path((@x@0@0@0: string) : string, (@pat@0@2@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4@0@0: std/os/path/path)\n           -> @x@0@0@0;\n      });\n  }), (match (p) {\n    ((@skip std/os/path/Path((@pat@0@0@1: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@1: std/os/path/path)\n       -> (match (@x@1) {\n        ((std/core/types/Cons((@pat@0@5: string) : string, (xx: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@6: ((list :: V -> V)<string>))\n           -> xx;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@1: ((list :: V -> V)<string>))\n           -> std/core/types/Nil<string>;\n      });\n  }))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"q\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}"},"export_as": ["q"]}, {"name": {"op": "Var","id": "v@10012","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/string/splitv","args": [{"op": "Var","id": "basename@0@10076","type": {"op": "String"}}, {"op": "Literal","type": {"op": "String"},"value": "/"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}},"annotation": "genExpr: std/core/string/splitv(basename@0@10076, \"/\")"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"v@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}}"},"export_as": ["v@10012"]}, {"name": {"op": "Var","id": "parts","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/push-parts","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/push-parts"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/vector","type": {"op": "Ptr"}},"name": "std/core/vector/vlist","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"vector\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/vector/vlist<string>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "v@10012","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: v@10012"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"annotation": "genExpr: std/core/types/@None<(list :: V -> V)<string>>"}]},"annotation": "genExpr: std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>))"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "q","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"168","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"169","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"169","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x@1@0: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"169\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: @x@1@0"}}]},"annotation": "genBranch: [(@pat@2@2,{\"op\": \"Var\",\"id\": \"q\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"168\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"168\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"169\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"169\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"q\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"168\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"169\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (q) {\n  ((@skip std/os/path/Path((@pat@0@1@1: string) : string, (@x@1@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@2: std/os/path/path)\n     -> @x@1@0;\n}"}]},"annotation": "genExpr: std/os/path/push-parts((std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>))), (match (q) {\n    ((@skip std/os/path/Path((@pat@0@1@1: string) : string, (@x@1@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@2: std/os/path/path)\n       -> @x@1@0;\n  }))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"parts\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"export_as": ["parts"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/Path","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/Path"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "q","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"135","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"136","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"root\"135","type": {"op": "String"}},"annotation": "genTest: normal: (@x@0@1@0: string) -> {\"op\": \"Var\",\"id\": \"@\\\"root\\\"135\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: @x@0@1@0"}}]},"annotation": "genBranch: [(@pat@1@3,{\"op\": \"Var\",\"id\": \"q\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x@0@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"135\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x@0@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"135\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"136\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@2: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"136\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"q\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"135\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"136\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (q) {\n  ((@skip std/os/path/Path((@x@0@1@0: string) : string, (@pat@0@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@1@3: std/os/path/path)\n     -> @x@0@1@0;\n}"}, {"op": "DebugWrap","inner": {"op": "Var","id": "parts","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: parts"}]},"annotation": "genExpr: std/os/path/Path((match (q) {\n    ((@skip std/os/path/Path((@x@0@1@0: string) : string, (@pat@0@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@1@3: std/os/path/path)\n       -> @x@0@1@0;\n  }), parts)"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(p: std/os/path/path, stemname@0: string){\n  val tuple2@10074 : (string, string);\n  val basename@0@10076 : string;\n  val q : std/os/path/path;\n  val v@10012 : (vector :: V -> V)<string>;\n  val parts : (list :: V -> V)<string>;\n  std/os/path/Path((match (q) {\n      ((@skip std/os/path/Path((@x@0@1@0: string) : string, (@pat@0@0@2: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@1@3: std/os/path/path)\n         -> @x@0@1@0;\n    }), parts);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/change-stem\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}, {\"op\": \"String\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/change-stem"]}, {"name": {"op": "Var","id": "std/os/path/pathstring/(/)","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/os/path/path"}, {"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "p1","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}}, {"op": "Var","id": "p2","type": {"op": "String"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "p2@0@10125","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/path","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/path"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "p2","type": {"op": "String"}},"annotation": "genExpr: p2"}]},"annotation": "genExpr: std/os/path/path(p2)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"p2@0@10125\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}"},"export_as": ["p2@0@10125"]}, {"name": {"op": "Var","id": "parts@10056","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@Optional","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"@optional\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/@Optional<(list :: V -> V)<string>>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/push-parts","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/push-parts"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/list","type": {"op": "Ptr"}},"name": "std/core/list/@lift-reverse-append@4790","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-reverse-append@4790<string>"},"args": [{"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<string>"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p2@0@10125","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"137","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"138","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"138","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x@0: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"138\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: @x@0"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"p2@0@10125\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"137\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"137\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"138\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"138\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p2@0@10125\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"137\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"138\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p2@0@10125) {\n  ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n     -> @x@0;\n}"}]},"annotation": "genExpr: std/core/list/@lift-reverse-append@4790<string>((std/core/types/Nil<string>), (match (p2@0@10125) {\n    ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n       -> @x@0;\n  }))"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p1","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"139","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"140","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"140","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x@1: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"140\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: @x@1"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"p1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"139\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"139\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"140\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"140\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"139\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"140\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p1) {\n  ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@5: std/os/path/path)\n     -> @x@1;\n}"}]},"annotation": "genExpr: std/os/path/push-parts((std/core/list/@lift-reverse-append@4790<string>((std/core/types/Nil<string>), (match (p2@0@10125) {\n      ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n         -> @x@0;\n    }))), (match (p1) {\n    ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@5: std/os/path/path)\n       -> @x@1;\n  }))"}]},"annotation": "genExpr: std/core/types/@Optional<(list :: V -> V)<string>>((std/os/path/push-parts((std/core/list/@lift-reverse-append@4790<string>((std/core/types/Nil<string>), (match (p2@0@10125) {\n      ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n         -> @x@0;\n    }))), (match (p1) {\n    ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@5: std/os/path/path)\n       -> @x@1;\n  }))))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}"},"export_as": ["parts@10056"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/Path","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/Path"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p1","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"137","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"138","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"root\"137","type": {"op": "String"}},"annotation": "genTest: normal: (@x: string) -> {\"op\": \"Var\",\"id\": \"@\\\"root\\\"137\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"p1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"137\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"137\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"138\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"138\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p1\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"137\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"138\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p1) {\n  ((@skip std/os/path/Path((@x: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n     -> @x;\n}"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "parts@10056","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"139","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"139","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-parts@807: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"139\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-parts@807"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-parts@807,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"139\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-parts@807: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"139\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"139\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "parts@10056","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<string>"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (parts@10056) {\n  ((std/core/types/@Optional((@uniq-parts@807: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1: ? ((list :: V -> V)<string>))\n     -> @uniq-parts@807;\n  ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}"}]},"annotation": "genExpr: std/os/path/Path((match (p1) {\n    ((@skip std/os/path/Path((@x: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n       -> @x;\n  }), (match (parts@10056) {\n    ((std/core/types/@Optional((@uniq-parts@807: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1: ? ((list :: V -> V)<string>))\n       -> @uniq-parts@807;\n    ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n       -> std/core/types/Nil<string>;\n  }))"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(p1: std/os/path/path, p2: string){\n  val p2@0@10125 : std/os/path/path;\n  val parts@10056 : ? ((list :: V -> V)<string>);\n  std/os/path/Path((match (p1) {\n      ((@skip std/os/path/Path((@x: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n         -> @x;\n    }), (match (parts@10056) {\n      ((std/core/types/@Optional((@uniq-parts@807: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1: ? ((list :: V -> V)<string>))\n         -> @uniq-parts@807;\n      ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n         -> std/core/types/Nil<string>;\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/pathstring/(/)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}, {\"op\": \"String\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/pathstring/(/)"]}, {"name": {"op": "Var","id": "std/os/path/string/(/)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "p1","type": {"op": "String"}}, {"op": "Var","id": "p2","type": {"op": "String"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "p1@0@10126","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/path","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/path"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "p1","type": {"op": "String"}},"annotation": "genExpr: p1"}]},"annotation": "genExpr: std/os/path/path(p1)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"p1@0@10126\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}"},"export_as": ["p1@0@10126"]}, {"name": {"op": "Var","id": "p2@0@10127","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/path","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/path"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "p2","type": {"op": "String"}},"annotation": "genExpr: p2"}]},"annotation": "genExpr: std/os/path/path(p2)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"p2@0@10127\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}"},"export_as": ["p2@0@10127"]}, {"name": {"op": "Var","id": "parts@10056","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@Optional","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"@optional\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/@Optional<(list :: V -> V)<string>>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/push-parts","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/push-parts"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/list","type": {"op": "Ptr"}},"name": "std/core/list/@lift-reverse-append@4790","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/@lift-reverse-append@4790<string>"},"args": [{"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<string>"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p2@0@10127","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"140","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"141","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"141","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x@0: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"141\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: @x@0"}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"p2@0@10127\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"140\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"140\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"141\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"141\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p2@0@10127\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"140\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"141\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p2@0@10127) {\n  ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n     -> @x@0;\n}"}]},"annotation": "genExpr: std/core/list/@lift-reverse-append@4790<string>((std/core/types/Nil<string>), (match (p2@0@10127) {\n    ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n       -> @x@0;\n  }))"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p1@0@10126","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"142","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"143","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"143","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x@1: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"143\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: @x@1"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"p1@0@10126\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"142\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@2: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"142\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"143\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@1: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"143\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p1@0@10126\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"142\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"143\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p1@0@10126) {\n  ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@5: std/os/path/path)\n     -> @x@1;\n}"}]},"annotation": "genExpr: std/os/path/push-parts((std/core/list/@lift-reverse-append@4790<string>((std/core/types/Nil<string>), (match (p2@0@10127) {\n      ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n         -> @x@0;\n    }))), (match (p1@0@10126) {\n    ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@5: std/os/path/path)\n       -> @x@1;\n  }))"}]},"annotation": "genExpr: std/core/types/@Optional<(list :: V -> V)<string>>((std/os/path/push-parts((std/core/list/@lift-reverse-append@4790<string>((std/core/types/Nil<string>), (match (p2@0@10127) {\n      ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@4: std/os/path/path)\n         -> @x@0;\n    }))), (match (p1@0@10126) {\n    ((@skip std/os/path/Path((@pat@0@2: string) : string, (@x@1: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@5: std/os/path/path)\n       -> @x@1;\n  }))))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}"},"export_as": ["parts@10056"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/Path","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/Path"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p1@0@10126","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"140","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"141","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"root\"140","type": {"op": "String"}},"annotation": "genTest: normal: (@x: string) -> {\"op\": \"Var\",\"id\": \"@\\\"root\\\"140\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"p1@0@10126\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"140\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"140\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"141\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"141\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p1@0@10126\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"140\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"141\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p1@0@10126) {\n  ((@skip std/os/path/Path((@x: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n     -> @x;\n}"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "parts@10056","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"142","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"142","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-parts@807: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"142\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-parts@807"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-parts@807,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"142\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-parts@807: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"142\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"142\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "parts@10056","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<string>"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"parts@10056\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (parts@10056) {\n  ((std/core/types/@Optional((@uniq-parts@807: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1: ? ((list :: V -> V)<string>))\n     -> @uniq-parts@807;\n  ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}"}]},"annotation": "genExpr: std/os/path/Path((match (p1@0@10126) {\n    ((@skip std/os/path/Path((@x: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n       -> @x;\n  }), (match (parts@10056) {\n    ((std/core/types/@Optional((@uniq-parts@807: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1: ? ((list :: V -> V)<string>))\n       -> @uniq-parts@807;\n    ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n       -> std/core/types/Nil<string>;\n  }))"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(p1: string, p2: string){\n  val p1@0@10126 : std/os/path/path;\n  val p2@0@10127 : std/os/path/path;\n  val parts@10056 : ? ((list :: V -> V)<string>);\n  std/os/path/Path((match (p1@0@10126) {\n      ((@skip std/os/path/Path((@x: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@3: std/os/path/path)\n         -> @x;\n    }), (match (parts@10056) {\n      ((std/core/types/@Optional((@uniq-parts@807: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1: ? ((list :: V -> V)<string>))\n         -> @uniq-parts@807;\n      ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n         -> std/core/types/Nil<string>;\n    }));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/string/(/)\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}, {\"op\": \"String\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/string/(/)"]}, {"name": {"op": "Var","id": "std/os/path/combine","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "ps","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ps","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/Path","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/Path"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x143","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"value": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x143","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"144","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"144","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-root@801: string) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"144\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-root@801"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"@x143\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-root@801,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"144\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-root@801: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"144\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x143\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"144\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x143","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}}]},"annotation": "genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"@x143\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x143\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/types/@None<string>)) {\n  ((std/core/types/@Optional((@uniq-root@801: string) : string) : ? string ) as @pat@0: ? string)\n     -> @uniq-root@801;\n  ((@skip std/core/types/@None() : ? string ) as @pat@0@0: ? string)\n     -> \"\";\n}"}, {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x145","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"value": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x145","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@Optional","params": [{"op": "Var","id": "@\"value\"146","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"146","type": {"op": "Top"}},"annotation": "genTest: normal: (@uniq-parts@807: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"146\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @uniq-parts@807"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x145\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}),(@uniq-parts@807,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"146\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@uniq-parts@807: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"146\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x145\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@Optional\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"146\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x145","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"type_tag": "std/core/types/@optional","clauses": [{"tag": "std/core/types/@None","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<string>"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"@x145\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x145\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"@optional\\\"\"}}: \"std/core/types/@optional\".\"std/core/types/@None\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/types/@None<(list :: V -> V)<string>>)) {\n  ((std/core/types/@Optional((@uniq-parts@807: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1: ? ((list :: V -> V)<string>))\n     -> @uniq-parts@807;\n  ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n     -> std/core/types/Nil<string>;\n}"}]},"annotation": "genExpr: std/os/path/Path((match ((std/core/types/@None<string>)) {\n    ((std/core/types/@Optional((@uniq-root@801: string) : string) : ? string ) as @pat@0: ? string)\n       -> @uniq-root@801;\n    ((@skip std/core/types/@None() : ? string ) as @pat@0@0: ? string)\n       -> \"\";\n  }), (match ((std/core/types/@None<(list :: V -> V)<string>>)) {\n    ((std/core/types/@Optional((@uniq-parts@807: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1: ? ((list :: V -> V)<string>))\n       -> @uniq-parts@807;\n    ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n       -> std/core/types/Nil<string>;\n  }))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ps","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"147","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"148","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"147","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/os/path/Path((@pat@1@0: string), (@pat@2@0: list<string>)) : std/os/path/path ) as p: std/os/path/path) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"147\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"149","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"150","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/list","type": {"op": "Ptr"}},"name": "std/core/list/foldl","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}, {"op": "Top"}, {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/list/foldl<std/os/path/path,std/os/path/path,(total :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"148","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (pp: list<std/os/path/path>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"148\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: pp"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"147","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/os/path/Path((@pat@1@0: string), (@pat@2@0: list<string>)) : std/os/path/path ) as p: std/os/path/path) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"147\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: p"}, {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/(/)","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/os/path/path"}, {"op": "Ptr","extern_ptr_name": "std/os/path/path"}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/(/)"}]},"annotation": "genExpr: std/core/list/foldl<std/os/path/path,std/os/path/path,(total :: E)>(pp, p, std/os/path/(/))"}}]},"annotation": "genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(p,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"147\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/os/path/Path((@pat@1@0: string), (@pat@2@0: list<string>)) : std/os/path/path ) as p: std/os/path/path) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"147\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"149\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"149\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@2@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@2@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"150\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(pp,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"148\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (pp: list<std/os/path/path>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"148\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"147\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/os/path/Path((@pat@1@0: string), (@pat@2@0: list<string>)) : std/os/path/path ) as p: std/os/path/path) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"147\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"149\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"150\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"147\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"148\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(ps: (list :: V -> V)<std/os/path/path>){\n  match (ps) {\n    ((std/core/types/Nil() : (list :: V -> V)<std/os/path/path> ) as @pat: ((list :: V -> V)<std/os/path/path>))\n       -> std/os/path/Path((match ((std/core/types/@None<string>)) {\n          ((std/core/types/@Optional((@uniq-root@801: string) : string) : ? string ) as @pat@0: ? string)\n             -> @uniq-root@801;\n          ((@skip std/core/types/@None() : ? string ) as @pat@0@0: ? string)\n             -> \"\";\n        }), (match ((std/core/types/@None<(list :: V -> V)<string>>)) {\n          ((std/core/types/@Optional((@uniq-parts@807: (list :: V -> V)<string>) : (list :: V -> V)<string>) : ? ((list :: V -> V)<string>) ) as @pat@1: ? ((list :: V -> V)<string>))\n             -> @uniq-parts@807;\n          ((@skip std/core/types/@None() : ? ((list :: V -> V)<string>) ) as @pat@2: ? ((list :: V -> V)<string>))\n             -> std/core/types/Nil<string>;\n        }));\n    ((@skip std/core/types/Cons(((@skip std/os/path/Path((@pat@1@0: string) : string, (@pat@2@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as p: std/os/path/path) : std/os/path/path, (pp: (list :: V -> V)<std/os/path/path>) : (list :: V -> V)<std/os/path/path>) : (list :: V -> V)<std/os/path/path> ) as @pat@0@1: ((list :: V -> V)<std/os/path/path>))\n       -> std/core/list/foldl<std/os/path/path,std/os/path/path,(total :: E)>(pp, p, std/os/path/(/));\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/combine\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/combine"]}, {"name": {"op": "Var","id": "std/os/path/string/realpath","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x-x1@10152","type": {"op": "String"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/xrealpath","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/xrealpath"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s","type": {"op": "String"}},"annotation": "genExpr: s"}]},"annotation": "genExpr: std/os/path/xrealpath(s)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"@x-x1@10152\",\"type\": {\"op\": \"String\"}}"},"export_as": ["@x-x1@10152"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@open-none1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@open-none1<string,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/path","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/path"}, {"op": "DebugWrap","inner": {"op": "Var","id": "@x-x1@10152","type": {"op": "String"}},"annotation": "genExpr: @x-x1@10152"}]},"annotation": "genExpr: std/core/hnd/@open-none1<string,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>(std/os/path/path, @x-x1@10152)"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(io :: E)>(s: string){\n  val @x-x1@10152 : string\n        = std/os/path/xrealpath(s);\n  std/core/hnd/@open-none1<string,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>(std/os/path/path, @x-x1@10152);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/string/realpath\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/string/realpath"]}, {"name": {"op": "Var","id": "std/os/path/realpath","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/os/path/path"}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "s@10082","type": {"op": "String"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@open-none1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@open-none1<std/os/path/path,string,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/os/path/path"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/string"}, {"op": "DebugWrap","inner": {"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"annotation": "genExpr: p"}]},"annotation": "genExpr: std/core/hnd/@open-none1<std/os/path/path,string,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>(std/os/path/string, p)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"s@10082\",\"type\": {\"op\": \"String\"}}"},"export_as": ["s@10082"]}, {"name": {"op": "Var","id": "@x-x1@0@10154","type": {"op": "String"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/xrealpath","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/xrealpath"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "s@10082","type": {"op": "String"}},"annotation": "genExpr: s@10082"}]},"annotation": "genExpr: std/os/path/xrealpath(s@10082)"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"@x-x1@0@10154\",\"type\": {\"op\": \"String\"}}"},"export_as": ["@x-x1@0@10154"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@open-none1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@open-none1<string,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/path","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/path"}, {"op": "DebugWrap","inner": {"op": "Var","id": "@x-x1@0@10154","type": {"op": "String"}},"annotation": "genExpr: @x-x1@0@10154"}]},"annotation": "genExpr: std/core/hnd/@open-none1<string,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>(std/os/path/path, @x-x1@0@10154)"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(io :: E)>(p: std/os/path/path){\n  val s@10082 : string;\n  val @x-x1@0@10154 : string;\n  std/core/hnd/@open-none1<string,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>(std/os/path/path, @x-x1@0@10154);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/realpath\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/realpath"]}, {"name": {"op": "Var","id": "std/os/path/cwd","type": {"op": "Function","params": [],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x-x1@10155","type": {"op": "String"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/xrealpath","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/xrealpath"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "."},"annotation": "genExpr: \".\""}]},"annotation": "genExpr: std/os/path/xrealpath(\".\")"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"@x-x1@10155\",\"type\": {\"op\": \"String\"}}"},"export_as": ["@x-x1@10155"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@open-none1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@open-none1<string,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/path","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/path"}, {"op": "DebugWrap","inner": {"op": "Var","id": "@x-x1@10155","type": {"op": "String"}},"annotation": "genExpr: @x-x1@10155"}]},"annotation": "genExpr: std/core/hnd/@open-none1<string,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>(std/os/path/path, @x-x1@10155)"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>(){\n  val @x-x1@10155 : string\n        = std/os/path/xrealpath(\".\");\n  std/core/hnd/@open-none1<string,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>(std/os/path/path, @x-x1@10155);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/cwd\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/cwd"]}, {"name": {"op": "Var","id": "std/os/path/default-ext","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/os/path/path"}, {"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}}, {"op": "Var","id": "newext","type": {"op": "String"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "tuple2@10086","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x151","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/find-last","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/find-last"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"152","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"153","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"153","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"154","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"155","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"154","type": {"op": "Top"}},"annotation": "genTest: normal: (x@0: string) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"154\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x@0"}}]},"annotation": "genBranch: [(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"153\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"154\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"154\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"155\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"155\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"153\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"154\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"155\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"153","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x156","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x156","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"@x156\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x156\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x156","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"157","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"157","type": {"op": "Top"}},"annotation": "genTest: normal: (x@1: string) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"157\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x@1"}}]},"annotation": "genBranch: [(@pat@0@3,{\"op\": \"Var\",\"id\": \"@x156\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"157\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"157\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x156\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"157\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n     -> x@1;\n}"}}]},"annotation": "genBranch: [(@pat@1@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"153\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"153\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@x) {\n  ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n     -> x@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n         -> x@1;\n    });\n}"}}]},"annotation": "genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"152\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"152\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"153\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"152\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"153\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n     -> (match (@x) {\n      ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n         -> x@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n         -> (match ((std/core/types/Nothing<string>)) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n             -> \"\";\n          ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n             -> x@1;\n        });\n    });\n}"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "."},"annotation": "genExpr: \".\""}]},"annotation": "genExpr: std/core/sslice/find-last((match (p) {\n    ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n       -> (match (@x) {\n        ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n           -> x@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n               -> x@1;\n          });\n      });\n  }), \".\")"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x151","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"158","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"158","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"158\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"159","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"160","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"161","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<string,string>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/string"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"158","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"158\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"162","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"163","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"164","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/Sslice","type": {"op": "Function","params": [{"op": "String"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/Sslice"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"str\"162","type": {"op": "String"}},"annotation": "genTest: normal: (s: string) -> {\"op\": \"Var\",\"id\": \"@\\\"str\\\"162\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: s"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"start\"163","type": {"op": "Int"}},"annotation": "genTest: normal: (start: int) -> {\"op\": \"Var\",\"id\": \"@\\\"start\\\"163\",\"type\": {\"op\": \"Int\"}}"},"annotation": "genExpr: start"}]},"annotation": "genExpr: std/core/sslice/Sslice(s, 0, start)"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"158\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"158\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(s,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"162\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"162\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"163\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"163\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"164\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"164\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"158\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"158\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"162\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"163\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"164\",\"type\": {\"op\": \"Int\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (slice) {\n  ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n     -> std/core/sslice/Sslice(s, 0, start);\n}"}]},"annotation": "genExpr: std/core/sslice/string((match (slice) {\n  ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n     -> std/core/sslice/Sslice(s, 0, start);\n}))"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/string"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/after","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/after"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"158","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"158\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: slice"}]},"annotation": "genExpr: std/core/sslice/after(slice)"}]},"annotation": "genExpr: std/core/sslice/string((std/core/sslice/after(slice)))"}]},"annotation": "genExpr: std/core/types/Tuple2<string,string>((std/core/sslice/string((match (slice) {\n    ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n       -> std/core/sslice/Sslice(s, 0, start);\n  }))), (std/core/sslice/string((std/core/sslice/after(slice)))))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x151\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(slice,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"158\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"158\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"159\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"159\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"160\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"160\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"161\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"161\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"158\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"158\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"159\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"160\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"161\",\"type\": {\"op\": \"Int\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x151\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"158\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x151","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<string,string>"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"165","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"166","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"166","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x@0: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"166\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"167","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"168","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"167","type": {"op": "Top"}},"annotation": "genTest: normal: (x@0@0: string) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"167\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x@0@0"}}]},"annotation": "genBranch: [(@pat@1@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"166\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"166\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"167\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"167\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"168\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"168\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"166\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"166\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"167\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"168\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"166","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x@0: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"166\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x169","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x169","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}}]},"annotation": "genBranch: [(@pat@4@0,{\"op\": \"Var\",\"id\": \"@x169\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x169\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x169","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"170","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"170","type": {"op": "Top"}},"annotation": "genTest: normal: (x@1@0: string) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"170\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x@1@0"}}]},"annotation": "genBranch: [(@pat@0@3@0,{\"op\": \"Var\",\"id\": \"@x169\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"170\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"170\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x169\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"170\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n     -> x@1@0;\n}"}}]},"annotation": "genBranch: [(@pat@1@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"166\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"166\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"166\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"166\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@x@0) {\n  ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n     -> x@0@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n         -> x@1@0;\n    });\n}"}}]},"annotation": "genBranch: [(@pat@2@0@0,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"165\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"165\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"166\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"166\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"165\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"166\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n     -> (match (@x@0) {\n      ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n         -> x@0@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n         -> (match ((std/core/types/Nothing<string>)) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n             -> \"\";\n          ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n             -> x@1@0;\n        });\n    });\n}"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}]},"annotation": "genExpr: std/core/types/Tuple2<string,string>((match (p) {\n    ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n       -> (match (@x@0) {\n        ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n           -> x@0@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n               -> x@1@0;\n          });\n      });\n  }), \"\")"}}]},"annotation": "genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"@x151\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x151\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/sslice/find-last((match (p) {\n    ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n       -> (match (@x) {\n        ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n           -> x@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n               -> x@1;\n          });\n      });\n  }), \".\"))) {\n  ((std/core/types/Just(((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as slice: sslice/sslice) : sslice/sslice) : (maybe :: V -> V)<sslice/sslice> ) as @pat: ((maybe :: V -> V)<sslice/sslice>))\n     -> std/core/types/Tuple2<string,string>((std/core/sslice/string((match (slice) {\n        ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n           -> std/core/sslice/Sslice(s, 0, start);\n      }))), (std/core/sslice/string((std/core/sslice/after(slice)))));\n  ((@skip std/core/types/Nothing() : (maybe :: V -> V)<sslice/sslice> ) as @pat@3@0: ((maybe :: V -> V)<sslice/sslice>))\n     -> std/core/types/Tuple2<string,string>((match (p) {\n        ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n           -> (match (@x@0) {\n            ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n               -> x@0@0;\n            ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n               -> (match ((std/core/types/Nothing<string>)) {\n                ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n                   -> \"\";\n                ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n                   -> x@1@0;\n              });\n          });\n      }), \"\");\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"tuple2@10086\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}"},"export_as": ["tuple2@10086"]}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x151","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixEq(String, String): Boolean","args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "tuple2@10086","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"152","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"153","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"snd\"153","type": {"op": "Top"}},"annotation": "genTest: normal: (@x@0@0: string) -> {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"153\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x@0@0"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"tuple2@10086\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@pat@0@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"152\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@4: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"152\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"153\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"153\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"tuple2@10086\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"152\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"153\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (tuple2@10086) {\n  ((@skip std/core/types/Tuple2((@pat@0@4: string) : string, (@x@0@0: string) : string) : (string, string) ) as @pat@5: (string, string))\n     -> @x@0@0;\n}"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/string/(==)((match (tuple2@10086) {\n    ((@skip std/core/types/Tuple2((@pat@0@4: string) : string, (@x@0@0: string) : string) : (string, string) ) as @pat@5: (string, string))\n       -> @x@0@0;\n  }), \"\")"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x151","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/change-ext","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/os/path/path"}, {"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/change-ext"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"annotation": "genExpr: p"}, {"op": "DebugWrap","inner": {"op": "Var","id": "newext","type": {"op": "String"}},"annotation": "genExpr: newext"}]},"annotation": "genExpr: std/os/path/change-ext(p, newext)"}}]},"annotation": "genBranch: [(@pat@1@1,{\"op\": \"Var\",\"id\": \"@x151\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "@x151","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"term": {"op": "DebugWrap","inner": {"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"annotation": "genExpr: p"}}]},"annotation": "genBranch: [(@pat@0@0@1,{\"op\": \"Var\",\"id\": \"@x151\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(p: std/os/path/path, newext: string){\n  val tuple2@10086 : (string, string)\n        = match ((std/core/sslice/find-last((match (p) {\n            ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n               -> (match (@x) {\n                ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n                   -> x@0;\n                ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n                   -> (match ((std/core/types/Nothing<string>)) {\n                    ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n                       -> \"\";\n                    ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n                       -> x@1;\n                  });\n              });\n          }), \".\"))) {\n          ((std/core/types/Just(((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as slice: sslice/sslice) : sslice/sslice) : (maybe :: V -> V)<sslice/sslice> ) as @pat: ((maybe :: V -> V)<sslice/sslice>))\n             -> std/core/types/Tuple2<string,string>((std/core/sslice/string((match (slice) {\n                ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n                   -> std/core/sslice/Sslice(s, 0, start);\n              }))), (std/core/sslice/string((std/core/sslice/after(slice)))));\n          ((@skip std/core/types/Nothing() : (maybe :: V -> V)<sslice/sslice> ) as @pat@3@0: ((maybe :: V -> V)<sslice/sslice>))\n             -> std/core/types/Tuple2<string,string>((match (p) {\n                ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n                   -> (match (@x@0) {\n                    ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n                       -> x@0@0;\n                    ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n                       -> (match ((std/core/types/Nothing<string>)) {\n                        ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n                           -> \"\";\n                        ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n                           -> x@1@0;\n                      });\n                  });\n              }), \"\");\n        };\n  match ((std/core/string/(==)((match (tuple2@10086) {\n      ((@skip std/core/types/Tuple2((@pat@0@4: string) : string, (@x@0@0: string) : string) : (string, string) ) as @pat@5: (string, string))\n         -> @x@0@0;\n    }), \"\"))) {\n    ((std/core/types/True() : bool ) as @pat@1@1: bool)\n       -> std/os/path/change-ext(p, newext);\n    ((@skip std/core/types/False() : bool ) as @pat@0@0@1: bool)\n       -> p;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/default-ext\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}, {\"op\": \"String\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/default-ext"]}, {"name": {"op": "Var","id": "std/os/path/homedir","type": {"op": "Function","params": [],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x-x1@10156","type": {"op": "String"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/xhomedir","type": {"op": "Function","params": [],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/xhomedir"},"args": []},"annotation": "genExpr: std/os/path/xhomedir()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"@x-x1@10156\",\"type\": {\"op\": \"String\"}}"},"export_as": ["@x-x1@10156"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@open-none1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@open-none1<string,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/path","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/path"}, {"op": "DebugWrap","inner": {"op": "Var","id": "@x-x1@10156","type": {"op": "String"}},"annotation": "genExpr: @x-x1@10156"}]},"annotation": "genExpr: std/core/hnd/@open-none1<string,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>(std/os/path/path, @x-x1@10156)"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(io :: E)>(){\n  val @x-x1@10156 : string\n        = std/os/path/xhomedir();\n  std/core/hnd/@open-none1<string,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>(std/os/path/path, @x-x1@10156);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/homedir\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/homedir"]}, {"name": {"op": "Var","id": "std/os/path/is-relative","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/os/path/path"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}}],"body": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixEq(String, String): Boolean","args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"154","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"155","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"root\"154","type": {"op": "String"}},"annotation": "genTest: normal: (@x: string) -> {\"op\": \"Var\",\"id\": \"@\\\"root\\\"154\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"154\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"154\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"155\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"155\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"154\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"155\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p) {\n  ((@skip std/os/path/Path((@x: string) : string, (@pat@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat: std/os/path/path)\n     -> @x;\n}"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/string/(==)((match (p) {\n    ((@skip std/os/path/Path((@x: string) : string, (@pat@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat: std/os/path/path)\n       -> @x;\n  }), \"\")"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(p: std/os/path/path){\n  std/core/string/(==)((match (p) {\n      ((@skip std/os/path/Path((@x: string) : string, (@pat@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat: std/os/path/path)\n         -> @x;\n    }), \"\");\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/is-relative\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/is-relative"]}, {"name": {"op": "Var","id": "std/os/path/is-absolute","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/os/path/path"}],"return": {"op": "Bool"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "b@10089","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixEq(String, String): Boolean","args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"156","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"157","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"root\"156","type": {"op": "String"}},"annotation": "genTest: normal: (@x: string) -> {\"op\": \"Var\",\"id\": \"@\\\"root\\\"156\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: @x"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"156\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@x: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"156\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"157\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"157\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"156\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"157\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p) {\n  ((@skip std/os/path/Path((@x: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@1: std/os/path/path)\n     -> @x;\n}"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/string/(==)((match (p) {\n    ((@skip std/os/path/Path((@x: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@1: std/os/path/path)\n       -> @x;\n  }), \"\")"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"b@10089\",\"type\": {\"op\": \"Bool\"}}"},"export_as": ["b@10089"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "b@10089","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"b@10089\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "b@10089","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": true,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/True"}}]},"annotation": "genBranch: [(@pat@0,{\"op\": \"Var\",\"id\": \"b@10089\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(p: std/os/path/path){\n  val b@10089 : bool\n        = std/core/string/(==)((match (p) {\n            ((@skip std/os/path/Path((@x: string) : string, (@pat@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@1: std/os/path/path)\n               -> @x;\n          }), \"\");\n  match (b@10089) {\n    ((std/core/types/True() : bool ) as @pat: bool)\n       -> std/core/types/False;\n    ((@skip std/core/types/False() : bool ) as @pat@0: bool)\n       -> std/core/types/True;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/is-absolute\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}],\"return\": {\"op\": \"Bool\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/is-absolute"]}, {"name": {"op": "Var","id": "std/os/path/noext","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/os/path/path"}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/change-ext","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/os/path/path"}, {"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/change-ext"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"annotation": "genExpr: p"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}]},"annotation": "genExpr: std/os/path/change-ext(p, \"\")"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(p: std/os/path/path){\n  std/os/path/change-ext(p, \"\");\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/noext\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/noext"]}, {"name": {"op": "Var","id": "std/os/path/paths-collect","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "ps","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ps","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"156","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"157","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"157","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: ((std/core/types/Cons((part: string), (rest: list<string>)) : list<string> ) as @pat@0: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"157\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"158","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"159","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x160","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixEq(Int, Int): Boolean","args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/string","type": {"op": "Ptr"}},"name": "std/core/string/count","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Int"},"purity": "Effectful"}},"annotation": "genExpr: std/core/string/count"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"156","type": {"op": "Top"}},"annotation": "genTest: normal: (root: string) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"156\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: root"}]},"annotation": "genExpr: std/core/string/count(root)"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 1},"annotation": "genExpr: 1"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/int/(==)((std/core/string/count(root)), 1)"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x160","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "m@10093","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/foreach-while","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}, {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/foreach-while<char,(total :: E)>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/Sslice","type": {"op": "Function","params": [{"op": "String"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/Sslice"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"156","type": {"op": "Top"}},"annotation": "genTest: normal: (root: string) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"156\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: root"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}, {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/sslice/length","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"156","type": {"op": "Top"}},"annotation": "genTest: normal: (root: string) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"156\",\"type\": {\"op\": \"Top\"}}"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Int"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Int"}}},"annotation": "genExpr: std/core/sslice/length(root)"}]},"annotation": "genExpr: std/core/sslice/Sslice(root, 0, (std/core/sslice/length(root)))"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Just","type": {"op": "Function","params": [{"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Just<char>"}]},"annotation": "genExpr: std/core/sslice/foreach-while<char,(total :: E)>((std/core/sslice/Sslice(root, 0, (std/core/sslice/length(root)))), (std/core/types/Just<char>))"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"m@10093\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}"},"export_as": ["m@10093"]}],"body": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x161","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/char","type": {"op": "Ptr"}},"name": "std/core/char/is-alpha","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"char\""}],"return": {"op": "Bool"},"purity": "Effectful"}},"annotation": "genExpr: std/core/char/is-alpha"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "m@10093","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"char\""},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": " "},"annotation": "genExpr: ' '"}}]},"annotation": "genBranch: [(@pat@2,{\"op\": \"Var\",\"id\": \"m@10093\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"m@10093\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "m@10093","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"162","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"char\""},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"162","type": {"op": "Top"}},"annotation": "genTest: normal: (x: char) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"162\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x"}}]},"annotation": "genBranch: [(@pat@0@0,{\"op\": \"Var\",\"id\": \"m@10093\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"162\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x: char) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"162\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"m@10093\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"162\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (m@10093) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<char> ) as @pat@2: ((maybe :: V -> V)<char>))\n     -> ' ';\n  ((@skip std/core/types/Just((x: char) : char) : (maybe :: V -> V)<char> ) as @pat@0@0: ((maybe :: V -> V)<char>))\n     -> x;\n}"}]},"annotation": "genExpr: std/core/char/is-alpha((match (m@10093) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<char> ) as @pat@2: ((maybe :: V -> V)<char>))\n     -> ' ';\n  ((@skip std/core/types/Just((x: char) : char) : (maybe :: V -> V)<char> ) as @pat@0@0: ((maybe :: V -> V)<char>))\n     -> x;\n}))"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "@x161","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "b@10096","type": {"op": "Bool"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "infixEq(String, String): Boolean","args": [{"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"158","type": {"op": "Top"}},"annotation": "genTest: normal: (part: string) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"158\",\"type\": {\"op\": \"Top\"}}"}, {"op": "Literal","type": {"op": "String"},"value": ""}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/string/(==)(part, \"\")"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"b@10096\",\"type\": {\"op\": \"Bool\"}}"},"export_as": ["b@10096"]}],"body": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "Switch","scrutinee": {"op": "Var","id": "b@10096","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"Var\",\"id\": \"b@10096\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Switch","scrutinee": {"op": "Var","id": "b@10096","type": {"op": "Bool"}},"cases": [{"value": {"type": {"op": "Bool"},"value": false},"then": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/string/contains","args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "/\\"},"annotation": "genExpr: \"/\\x5C\""}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/head","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/head"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"158","type": {"op": "Top"}},"annotation": "genTest: normal: (part: string) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"158\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: part"}]},"annotation": "genExpr: std/core/sslice/head(part)"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bool"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bool"}}},"annotation": "genExpr: std/core/string/contains(\"/\\x5C\", (std/core/sslice/head(part)))"}}]},"annotation": "genBranch: [(@pat@0@1,{\"op\": \"Var\",\"id\": \"b@10096\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (b@10096) {\n  ((std/core/types/True() : bool ) as @pat@3: bool)\n     -> std/core/types/False;\n  ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n     -> std/core/string/contains(\"/\\x5C\", (std/core/sslice/head(part)));\n}"}},"annotation": "genExpr: val b@10096 : bool\n      = std/core/string/(==)(part, \"\");\nmatch (b@10096) {\n  ((std/core/types/True() : bool ) as @pat@3: bool)\n     -> std/core/types/False;\n  ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n     -> std/core/string/contains(\"/\\x5C\", (std/core/sslice/head(part)));\n}"}}]},"annotation": "genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"@x161\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"@x161\",\"type\": {\"op\": \"Bool\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/char/is-alpha((match (m@10093) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<char> ) as @pat@2: ((maybe :: V -> V)<char>))\n     -> ' ';\n  ((@skip std/core/types/Just((x: char) : char) : (maybe :: V -> V)<char> ) as @pat@0@0: ((maybe :: V -> V)<char>))\n     -> x;\n})))) {\n  ((std/core/types/True() : bool ) as @pat@2@0: bool)\n     -> val b@10096 : bool\n              = std/core/string/(==)(part, \"\");\n    (match (b@10096) {\n      ((std/core/types/True() : bool ) as @pat@3: bool)\n         -> std/core/types/False;\n      ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n         -> std/core/string/contains(\"/\\x5C\", (std/core/sslice/head(part)));\n    });\n  (@pat@5: bool)\n     -> std/core/types/False;\n}"}},"annotation": "genExpr: val m@10093 : (maybe :: V -> V)<char>\n      = std/core/sslice/foreach-while<char,(total :: E)>((std/core/sslice/Sslice(root, 0, (std/core/sslice/length(root)))), (std/core/types/Just<char>));\nmatch ((std/core/char/is-alpha((match (m@10093) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<char> ) as @pat@2: ((maybe :: V -> V)<char>))\n     -> ' ';\n  ((@skip std/core/types/Just((x: char) : char) : (maybe :: V -> V)<char> ) as @pat@0@0: ((maybe :: V -> V)<char>))\n     -> x;\n})))) {\n  ((std/core/types/True() : bool ) as @pat@2@0: bool)\n     -> val b@10096 : bool\n              = std/core/string/(==)(part, \"\");\n    (match (b@10096) {\n      ((std/core/types/True() : bool ) as @pat@3: bool)\n         -> std/core/types/False;\n      ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n         -> std/core/string/contains(\"/\\x5C\", (std/core/sslice/head(part)));\n    });\n  (@pat@5: bool)\n     -> std/core/types/False;\n}"}}]},"annotation": "genBranch: [(@pat@1,{\"op\": \"Var\",\"id\": \"@x160\",\"type\": {\"op\": \"Bool\"}})]"}}],"default": {"op": "AlternativeFail"}}, {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Bool"},"term": {"op": "DebugWrap","inner": {"op": "Literal","value": false,"type": {"op": "Bool"}},"annotation": "genExpr: std/core/types/False"}}]},"annotation": "genBranch: [(@pat@6,{\"op\": \"Var\",\"id\": \"@x160\",\"type\": {\"op\": \"Bool\"}})]"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/int/(==)((std/core/string/count(root)), 1))) {\n  ((std/core/types/True() : bool ) as @pat@1: bool)\n     -> val m@10093 : (maybe :: V -> V)<char>\n              = std/core/sslice/foreach-while<char,(total :: E)>((std/core/sslice/Sslice(root, 0, (std/core/sslice/length(root)))), (std/core/types/Just<char>));\n    (match ((std/core/char/is-alpha((match (m@10093) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<char> ) as @pat@2: ((maybe :: V -> V)<char>))\n         -> ' ';\n      ((@skip std/core/types/Just((x: char) : char) : (maybe :: V -> V)<char> ) as @pat@0@0: ((maybe :: V -> V)<char>))\n         -> x;\n    })))) {\n      ((std/core/types/True() : bool ) as @pat@2@0: bool)\n         -> val b@10096 : bool\n                  = std/core/string/(==)(part, \"\");\n        (match (b@10096) {\n          ((std/core/types/True() : bool ) as @pat@3: bool)\n             -> std/core/types/False;\n          ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n             -> std/core/string/contains(\"/\\x5C\", (std/core/sslice/head(part)));\n        });\n      (@pat@5: bool)\n         -> std/core/types/False;\n    });\n  (@pat@6: bool)\n     -> std/core/types/False;\n}"},"cases": [{"value": {"type": {"op": "Bool"},"value": true},"then": {"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<std/os/path/path>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/path","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/path"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"156","type": {"op": "Top"}},"annotation": "genTest: normal: (root: string) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"156\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: root"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/(++)","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/(++)"},"args": [{"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ":"},"annotation": "genExpr: \":\""}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"158","type": {"op": "Top"}},"annotation": "genTest: normal: (part: string) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"158\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: part"}]},"annotation": "genExpr: std/core/types/(++)(\":\", part)"}]},"annotation": "genExpr: std/core/types/(++)(root, (std/core/types/(++)(\":\", part)))"}]},"annotation": "genExpr: std/os/path/path((std/core/types/(++)(root, (std/core/types/(++)(\":\", part)))))"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/paths-collect","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/paths-collect"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"159","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (rest: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"159\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: rest"}]},"annotation": "genExpr: std/os/path/paths-collect(rest)"}]},"annotation": "genExpr: std/core/types/Cons<std/os/path/path>((std/os/path/path((std/core/types/(++)(root, (std/core/types/(++)(\":\", part)))))), (std/os/path/paths-collect(rest)))"}}}],"default": {"op": "AlternativeFail"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(root,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"156\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (root: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"156\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"157\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: ((std/core/types/Cons((part: string), (rest: list<string>)) : list<string> ) as @pat@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"157\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(part,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"158\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (part: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"158\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"159\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (rest: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"159\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"157\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: ((std/core/types/Cons((part: string), (rest: list<string>)) : list<string> ) as @pat@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"157\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"158\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"159\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"156\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"157\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ps","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"163","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"164","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Cons","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Cons<std/os/path/path>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/path","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/path"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"163","type": {"op": "Top"}},"annotation": "genTest: normal: (part@0: string) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"163\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: part@0"}]},"annotation": "genExpr: std/os/path/path(part@0)"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/paths-collect","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/paths-collect"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"tail\"164","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (rest@0: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"164\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"annotation": "genExpr: rest@0"}]},"annotation": "genExpr: std/os/path/paths-collect(rest@0)"}]},"annotation": "genExpr: std/core/types/Cons<std/os/path/path>((std/os/path/path(part@0)), (std/os/path/paths-collect(rest@0)))"}}]},"annotation": "genBranch: [(@pat@7,{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}),(part@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"163\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (part@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"163\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(rest@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"164\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (rest@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"164\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"163\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"164\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "ps","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"list\""},"term": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nil","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genExpr: std/core/types/Nil<std/os/path/path>"}}]},"annotation": "genBranch: [(@pat@8,{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"ps\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(ps: (list :: V -> V)<string>){\n  match (ps) {\n    ((std/core/types/Cons((root: string) : string, ((std/core/types/Cons((part: string) : string, (rest: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat: ((list :: V -> V)<string>))\n       | (match ((std/core/int/(==)((std/core/string/count(root)), 1))) {\n        ((std/core/types/True() : bool ) as @pat@1: bool)\n           -> val m@10093 : (maybe :: V -> V)<char>\n                    = std/core/sslice/foreach-while<char,(total :: E)>((std/core/sslice/Sslice(root, 0, (std/core/sslice/length(root)))), (std/core/types/Just<char>));\n          (match ((std/core/char/is-alpha((match (m@10093) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<char> ) as @pat@2: ((maybe :: V -> V)<char>))\n               -> ' ';\n            ((@skip std/core/types/Just((x: char) : char) : (maybe :: V -> V)<char> ) as @pat@0@0: ((maybe :: V -> V)<char>))\n               -> x;\n          })))) {\n            ((std/core/types/True() : bool ) as @pat@2@0: bool)\n               -> val b@10096 : bool\n                        = std/core/string/(==)(part, \"\");\n              (match (b@10096) {\n                ((std/core/types/True() : bool ) as @pat@3: bool)\n                   -> std/core/types/False;\n                ((@skip std/core/types/False() : bool ) as @pat@0@1: bool)\n                   -> std/core/string/contains(\"/\\x5C\", (std/core/sslice/head(part)));\n              });\n            (@pat@5: bool)\n               -> std/core/types/False;\n          });\n        (@pat@6: bool)\n           -> std/core/types/False;\n      }) -> std/core/types/Cons<std/os/path/path>((std/os/path/path((std/core/types/(++)(root, (std/core/types/(++)(\":\", part)))))), (std/os/path/paths-collect(rest)));\n    ((std/core/types/Cons((part@0: string) : string, (rest@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@7: ((list :: V -> V)<string>))\n       -> std/core/types/Cons<std/os/path/path>((std/os/path/path(part@0)), (std/os/path/paths-collect(rest@0)));\n    ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@8: ((list :: V -> V)<string>))\n       -> std/core/types/Nil<std/os/path/path>;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/paths-collect\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/paths-collect"]}, {"name": {"op": "Var","id": "std/os/path/paths","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "s","type": {"op": "String"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "s@0@10098","type": {"op": "String"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/string/replace-all","args": [{"op": "Var","id": "s","type": {"op": "String"}}, {"op": "Literal","type": {"op": "String"},"value": ";"}, {"op": "Literal","type": {"op": "String"},"value": ":"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "String"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "String"}}},"annotation": "genExpr: std/core/string/replace-all(s, \";\", \":\")"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"s@0@10098\",\"type\": {\"op\": \"String\"}}"},"export_as": ["s@0@10098"]}, {"name": {"op": "Var","id": "v@10012","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Primitive","name": "!undefined: std/core/string/splitv","args": [{"op": "Var","id": "s@0@10098","type": {"op": "String"}}, {"op": "Literal","type": {"op": "String"},"value": ":"}],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}}},"annotation": "genExpr: std/core/string/splitv(s@0@10098, \":\")"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"v@10012\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"vector\\\"\"}}"},"export_as": ["v@10012"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/paths-collect","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/paths-collect"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/vector","type": {"op": "Ptr"}},"name": "std/core/vector/vlist","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "\"vector\""}, {"op": "Ptr","extern_ptr_name": "\"@optional\""}],"return": {"op": "Ptr","extern_ptr_name": "\"list\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/vector/vlist<string>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "v@10012","type": {"op": "Ptr","extern_ptr_name": "\"vector\""}},"annotation": "genExpr: v@10012"}, {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/@None","type": {"op": "Ptr","extern_ptr_name": "\"@optional\""}},"annotation": "genExpr: std/core/types/@None<(list :: V -> V)<string>>"}]},"annotation": "genExpr: std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>))"}]},"annotation": "genExpr: std/os/path/paths-collect((std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>))))"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(s: string){\n  val s@0@10098 : string;\n  val v@10012 : (vector :: V -> V)<string>;\n  std/os/path/paths-collect((std/core/vector/vlist<string>(v@10012, (std/core/types/@None<(list :: V -> V)<string>>))));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/paths\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"String\"}],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/paths"]}, {"name": {"op": "Var","id": "std/os/path/show","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/os/path/path"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/show","type": {"op": "Ptr"}},"name": "std/core/show/string/show","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/show/string/show"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/os/path/path"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/string"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"annotation": "genExpr: p"}]},"annotation": "genExpr: std/os/path/string(p)"}]},"annotation": "genExpr: std/core/show/string/show((std/os/path/string(p)))"}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(p: std/os/path/path){\n  std/core/show/string/show((std/os/path/string(p)));\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/show\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/show"]}, {"name": {"op": "Var","id": "std/os/path/stemname","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/os/path/path"}],"return": {"op": "String"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}}],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "tuple2@10100","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x165","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/find-last","type": {"op": "Function","params": [{"op": "String"}, {"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "\"maybe\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/find-last"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"166","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"167","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"167","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"167\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"168","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"169","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"168","type": {"op": "Top"}},"annotation": "genTest: normal: (x@0: string) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"168\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x@0"}}]},"annotation": "genBranch: [(@pat@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"167\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"167\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"168\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"168\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"169\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"169\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"167\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"167\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"168\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"169\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"167","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"167\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x170","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x170","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}}]},"annotation": "genBranch: [(@pat@4,{\"op\": \"Var\",\"id\": \"@x170\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x170\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x170","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"171","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"171","type": {"op": "Top"}},"annotation": "genTest: normal: (x@1: string) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"171\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x@1"}}]},"annotation": "genBranch: [(@pat@0@3,{\"op\": \"Var\",\"id\": \"@x170\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"171\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"171\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x170\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"171\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n     -> x@1;\n}"}}]},"annotation": "genBranch: [(@pat@1@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"167\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"167\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"167\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"167\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@x) {\n  ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n     -> x@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n         -> x@1;\n    });\n}"}}]},"annotation": "genBranch: [(@pat@2@0,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"166\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"166\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"167\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"167\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"166\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"167\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n     -> (match (@x) {\n      ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n         -> x@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n         -> (match ((std/core/types/Nothing<string>)) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n             -> \"\";\n          ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n             -> x@1;\n        });\n    });\n}"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": "."},"annotation": "genExpr: \".\""}]},"annotation": "genExpr: std/core/sslice/find-last((match (p) {\n    ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n       -> (match (@x) {\n        ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n           -> x@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n               -> x@1;\n          });\n      });\n  }), \".\")"}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x165","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"172","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"172","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"172\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"173","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"174","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"175","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<string,string>"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/string"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"172","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"172\",\"type\": {\"op\": \"Top\"}}"},"type_tag": "std/core/sslice/sslice","clauses": [{"tag": "std/core/sslice/Sslice","params": [{"op": "Var","id": "@\"str\"176","type": {"op": "String"}}, {"op": "Var","id": "@\"start\"177","type": {"op": "Int"}}, {"op": "Var","id": "@\"len\"178","type": {"op": "Int"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/Sslice","type": {"op": "Function","params": [{"op": "String"}, {"op": "Int"}, {"op": "Int"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/Sslice"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"str\"176","type": {"op": "String"}},"annotation": "genTest: normal: (s: string) -> {\"op\": \"Var\",\"id\": \"@\\\"str\\\"176\",\"type\": {\"op\": \"String\"}}"},"annotation": "genExpr: s"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "Int"},"value": 0},"annotation": "genExpr: 0"}, {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"start\"177","type": {"op": "Int"}},"annotation": "genTest: normal: (start: int) -> {\"op\": \"Var\",\"id\": \"@\\\"start\\\"177\",\"type\": {\"op\": \"Int\"}}"},"annotation": "genExpr: start"}]},"annotation": "genExpr: std/core/sslice/Sslice(s, 0, start)"}}]},"annotation": "genBranch: [(@pat@3,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"172\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"172\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(s,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"176\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (s: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"176\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(start,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"177\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (start: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"177\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"178\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@0@0: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"178\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"172\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"172\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"176\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"177\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"178\",\"type\": {\"op\": \"Int\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (slice) {\n  ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n     -> std/core/sslice/Sslice(s, 0, start);\n}"}]},"annotation": "genExpr: std/core/sslice/string((match (slice) {\n  ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n     -> std/core/sslice/Sslice(s, 0, start);\n}))"}, {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/string","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/string"},"args": [{"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/sslice","type": {"op": "Ptr"}},"name": "std/core/sslice/after","type": {"op": "Function","params": [{"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"}],"return": {"op": "Ptr","extern_ptr_name": "std/core/sslice/sslice"},"purity": "Effectful"}},"annotation": "genExpr: std/core/sslice/after"},"args": [{"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"172","type": {"op": "Top"}},"annotation": "genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"172\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: slice"}]},"annotation": "genExpr: std/core/sslice/after(slice)"}]},"annotation": "genExpr: std/core/sslice/string((std/core/sslice/after(slice)))"}]},"annotation": "genExpr: std/core/types/Tuple2<string,string>((std/core/sslice/string((match (slice) {\n    ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n       -> std/core/sslice/Sslice(s, 0, start);\n  }))), (std/core/sslice/string((std/core/sslice/after(slice)))))"}}]},"annotation": "genBranch: [(@pat,{\"op\": \"Var\",\"id\": \"@x165\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(slice,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"172\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"172\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"str\\\"173\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"str\\\\\\\"173\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@pat@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"start\\\"174\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@1: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"start\\\\\\\"174\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"}),(@pat@2,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"len\\\"175\",\"type\": {\"op\": \"Int\"}},\"annotation\": \"genTest: normal: (@pat@2: int) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"len\\\\\\\"175\\\",\\\"type\\\": {\\\"op\\\": \\\"Int\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"172\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: ((@skip std/core/sslice/Sslice((@pat@0: string), (@pat@1: int), (@pat@2: int)) : sslice/sslice ) as slice: sslice/sslice) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"172\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}: \"std/core/sslice/sslice\".\"std/core/sslice/Sslice\"(({\"op\": \"Var\",\"id\": \"@\\\"str\\\"173\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"start\\\"174\",\"type\": {\"op\": \"Int\"}}, {\"op\": \"Var\",\"id\": \"@\\\"len\\\"175\",\"type\": {\"op\": \"Int\"}}))"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x165\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"172\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x165","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"term": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Tuple2","type": {"op": "Function","params": [{"op": "Top"}, {"op": "Top"}],"return": {"op": "Ptr","extern_ptr_name": "\"tuple2\""},"purity": "Effectful"}},"annotation": "genExpr: std/core/types/Tuple2<string,string>"},"args": [{"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "p","type": {"op": "Ptr","extern_ptr_name": "std/os/path/path"}},"type_tag": "std/os/path/path","clauses": [{"tag": "std/os/path/Path","params": [{"op": "Var","id": "@\"root\"179","type": {"op": "String"}}, {"op": "Var","id": "@\"parts\"180","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"180","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x@0: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"180\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Cons","params": [{"op": "Var","id": "@\"head\"181","type": {"op": "Top"}}, {"op": "Var","id": "@\"tail\"182","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"head\"181","type": {"op": "Top"}},"annotation": "genTest: normal: (x@0@0: string) -> {\"op\": \"Var\",\"id\": \"@\\\"head\\\"181\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x@0@0"}}]},"annotation": "genBranch: [(@pat@1@0@1,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"180\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"180\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}),(x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"head\\\"181\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"head\\\\\\\"181\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"182\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@pat@0@0@0@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"tail\\\\\\\"182\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"180\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"180\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Cons\"(({\"op\": \"Var\",\"id\": \"@\\\"head\\\"181\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"tail\\\"182\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"parts\"180","type": {"op": "Ptr","extern_ptr_name": "\"list\""}},"annotation": "genTest: normal: (@x@0: list<string>) -> {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"180\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}"},"type_tag": "std/core/types/list","clauses": [{"tag": "std/core/types/Nil","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x183","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"value": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/types","type": {"op": "Ptr"}},"name": "std/core/types/Nothing","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}}}],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x183","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Nothing","params": [],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}}]},"annotation": "genBranch: [(@pat@4@0,{\"op\": \"Var\",\"id\": \"@x183\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x183\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "@x183","type": {"op": "Ptr","extern_ptr_name": "\"maybe\""}},"type_tag": "std/core/types/maybe","clauses": [{"tag": "std/core/types/Just","params": [{"op": "Var","id": "@\"value\"184","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"value\"184","type": {"op": "Top"}},"annotation": "genTest: normal: (x@1@0: string) -> {\"op\": \"Var\",\"id\": \"@\\\"value\\\"184\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: x@1@0"}}]},"annotation": "genBranch: [(@pat@0@3@0,{\"op\": \"Var\",\"id\": \"@x183\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}),(x@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"value\\\"184\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (x@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"value\\\\\\\"184\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x183\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Just\"(({\"op\": \"Var\",\"id\": \"@\\\"value\\\"184\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/types/Nothing<string>)) {\n  ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n     -> \"\";\n  ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n     -> x@1@0;\n}"}}]},"annotation": "genBranch: [(@pat@1@0@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"180\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"180\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"180\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"180\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"}: \"std/core/types/list\".\"std/core/types/Nil\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match (@x@0) {\n  ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n     -> x@0@0;\n  ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n     -> (match ((std/core/types/Nothing<string>)) {\n      ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n         -> \"\";\n      ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n         -> x@1@0;\n    });\n}"}}]},"annotation": "genBranch: [(@pat@2@0@0,{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}),(@pat@0@1@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"root\\\"179\",\"type\": {\"op\": \"String\"}},\"annotation\": \"genTest: normal: (@pat@0@1@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"root\\\\\\\"179\\\",\\\"type\\\": {\\\"op\\\": \\\"String\\\"}}\"}),(@x@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"180\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}},\"annotation\": \"genTest: normal: (@x@0: list<string>) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"parts\\\\\\\"180\\\",\\\"type\\\": {\\\"op\\\": \\\"Ptr\\\",\\\"extern_ptr_name\\\": \\\"\\\\\\\"list\\\\\\\"\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"p\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}}: \"std/os/path/path\".\"std/os/path/Path\"(({\"op\": \"Var\",\"id\": \"@\\\"root\\\"179\",\"type\": {\"op\": \"String\"}}, {\"op\": \"Var\",\"id\": \"@\\\"parts\\\"180\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"list\\\"\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}},"annotation": "genExpr: match (p) {\n  ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n     -> (match (@x@0) {\n      ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n         -> x@0@0;\n      ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n         -> (match ((std/core/types/Nothing<string>)) {\n          ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n             -> \"\";\n          ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n             -> x@1@0;\n        });\n    });\n}"}, {"op": "DebugWrap","inner": {"op": "Literal","type": {"op": "String"},"value": ""},"annotation": "genExpr: \"\""}]},"annotation": "genExpr: std/core/types/Tuple2<string,string>((match (p) {\n    ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n       -> (match (@x@0) {\n        ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n           -> x@0@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n               -> x@1@0;\n          });\n      });\n  }), \"\")"}}]},"annotation": "genBranch: [(@pat@3@0,{\"op\": \"Var\",\"id\": \"@x165\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"@x165\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"maybe\\\"\"}}: \"std/core/types/maybe\".\"std/core/types/Nothing\"(())"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: guard-free case"},"annotation": "genMatch"}},"annotation": "genExpr: match ((std/core/sslice/find-last((match (p) {\n    ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n       -> (match (@x) {\n        ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n           -> x@0;\n        ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n           -> (match ((std/core/types/Nothing<string>)) {\n            ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n               -> \"\";\n            ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n               -> x@1;\n          });\n      });\n  }), \".\"))) {\n  ((std/core/types/Just(((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as slice: sslice/sslice) : sslice/sslice) : (maybe :: V -> V)<sslice/sslice> ) as @pat: ((maybe :: V -> V)<sslice/sslice>))\n     -> std/core/types/Tuple2<string,string>((std/core/sslice/string((match (slice) {\n        ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n           -> std/core/sslice/Sslice(s, 0, start);\n      }))), (std/core/sslice/string((std/core/sslice/after(slice)))));\n  ((@skip std/core/types/Nothing() : (maybe :: V -> V)<sslice/sslice> ) as @pat@3@0: ((maybe :: V -> V)<sslice/sslice>))\n     -> std/core/types/Tuple2<string,string>((match (p) {\n        ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n           -> (match (@x@0) {\n            ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n               -> x@0@0;\n            ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n               -> (match ((std/core/types/Nothing<string>)) {\n                ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n                   -> \"\";\n                ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n                   -> x@1@0;\n              });\n          });\n      }), \"\");\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"tuple2@10100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}"},"export_as": ["tuple2@10100"]}],"body": {"op": "LetRec","definitions": [],"body": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "DebugWrap","inner": {"op": "Match","scrutinee": {"op": "Var","id": "tuple2@10100","type": {"op": "Ptr","extern_ptr_name": "\"tuple2\""}},"type_tag": "std/core/types/tuple2","clauses": [{"tag": "std/core/types/Tuple2","params": [{"op": "Var","id": "@\"fst\"165","type": {"op": "Top"}}, {"op": "Var","id": "@\"snd\"166","type": {"op": "Top"}}],"body": {"op": "DebugWrap","inner": {"op": "AlternativeChoice","choices": [{"op": "The","type": {"op": "String"},"term": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Var","id": "@\"fst\"165","type": {"op": "Top"}},"annotation": "genTest: normal: (@x@0@0: string) -> {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"165\",\"type\": {\"op\": \"Top\"}}"},"annotation": "genExpr: @x@0@0"}}]},"annotation": "genBranch: [(@pat@5,{\"op\": \"Var\",\"id\": \"tuple2@10100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}),(@x@0@0,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"fst\\\"165\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@x@0@0: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"fst\\\\\\\"165\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"}),(@pat@0@4,{\"op\": \"DebugWrap\",\"inner\": {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"166\",\"type\": {\"op\": \"Top\"}},\"annotation\": \"genTest: normal: (@pat@0@4: string) -> {\\\"op\\\": \\\"Var\\\",\\\"id\\\": \\\"@\\\\\\\"snd\\\\\\\"166\\\",\\\"type\\\": {\\\"op\\\": \\\"Top\\\"}}\"})]"}}],"default_clause": {"params": [],"body": {"op": "AlternativeFail"}}},"annotation": "ifCon@{\"op\": \"Var\",\"id\": \"tuple2@10100\",\"type\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"\\\"tuple2\\\"\"}}: \"std/core/types/tuple2\".\"std/core/types/Tuple2\"(({\"op\": \"Var\",\"id\": \"@\\\"fst\\\"165\",\"type\": {\"op\": \"Top\"}}, {\"op\": \"Var\",\"id\": \"@\\\"snd\\\"166\",\"type\": {\"op\": \"Top\"}}))"}, {"op": "Primitive","name": "non-exhaustive match","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Bottom"}}}]},"annotation": "genMatch: one case"},"annotation": "genMatch"}}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn(p: std/os/path/path){\n  val tuple2@10100 : (string, string)\n        = match ((std/core/sslice/find-last((match (p) {\n            ((@skip std/os/path/Path((@pat@0@1: string) : string, (@x: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0: std/os/path/path)\n               -> (match (@x) {\n                ((std/core/types/Cons((x@0: string) : string, (@pat@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0: ((list :: V -> V)<string>))\n                   -> x@0;\n                ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0: ((list :: V -> V)<string>))\n                   -> (match ((std/core/types/Nothing<string>)) {\n                    ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4: ((maybe :: V -> V)<string>))\n                       -> \"\";\n                    ((@skip std/core/types/Just((x@1: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3: ((maybe :: V -> V)<string>))\n                       -> x@1;\n                  });\n              });\n          }), \".\"))) {\n          ((std/core/types/Just(((@skip std/core/sslice/Sslice((@pat@0: string) : string, (@pat@1: int) : int, (@pat@2: int) : int) : sslice/sslice ) as slice: sslice/sslice) : sslice/sslice) : (maybe :: V -> V)<sslice/sslice> ) as @pat: ((maybe :: V -> V)<sslice/sslice>))\n             -> std/core/types/Tuple2<string,string>((std/core/sslice/string((match (slice) {\n                ((@skip std/core/sslice/Sslice((s: string) : string, (start: int) : int, (@pat@0@0: int) : int) : sslice/sslice ) as @pat@3: sslice/sslice)\n                   -> std/core/sslice/Sslice(s, 0, start);\n              }))), (std/core/sslice/string((std/core/sslice/after(slice)))));\n          ((@skip std/core/types/Nothing() : (maybe :: V -> V)<sslice/sslice> ) as @pat@3@0: ((maybe :: V -> V)<sslice/sslice>))\n             -> std/core/types/Tuple2<string,string>((match (p) {\n                ((@skip std/os/path/Path((@pat@0@1@0: string) : string, (@x@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : std/os/path/path ) as @pat@2@0@0: std/os/path/path)\n                   -> (match (@x@0) {\n                    ((std/core/types/Cons((x@0@0: string) : string, (@pat@0@0@0@0: (list :: V -> V)<string>) : (list :: V -> V)<string>) : (list :: V -> V)<string> ) as @pat@1@0@1: ((list :: V -> V)<string>))\n                       -> x@0@0;\n                    ((@skip std/core/types/Nil() : (list :: V -> V)<string> ) as @pat@1@0@0@0: ((list :: V -> V)<string>))\n                       -> (match ((std/core/types/Nothing<string>)) {\n                        ((std/core/types/Nothing() : (maybe :: V -> V)<string> ) as @pat@4@0: ((maybe :: V -> V)<string>))\n                           -> \"\";\n                        ((@skip std/core/types/Just((x@1@0: string) : string) : (maybe :: V -> V)<string> ) as @pat@0@3@0: ((maybe :: V -> V)<string>))\n                           -> x@1@0;\n                      });\n                  });\n              }), \"\");\n        };\n  match (tuple2@10100) {\n    ((@skip std/core/types/Tuple2((@x@0@0: string) : string, (@pat@0@4: string) : string) : (string, string) ) as @pat@5: (string, string))\n       -> @x@0@0;\n  };\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/stemname\",\"type\": {\"op\": \"Function\",\"params\": [{\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"}],\"return\": {\"op\": \"String\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/stemname"]}, {"name": {"op": "Var","id": "std/os/path/tempdir","type": {"op": "Function","params": [],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "Abs","params": [],"body": {"op": "LetRec","definitions": [{"name": {"op": "Var","id": "@x-x1@10157","type": {"op": "String"}},"value": {"op": "DebugWrap","inner": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/xtempdir","type": {"op": "Function","params": [],"return": {"op": "String"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/xtempdir"},"args": []},"annotation": "genExpr: std/os/path/xtempdir()"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"@x-x1@10157\",\"type\": {\"op\": \"String\"}}"},"export_as": ["@x-x1@10157"]}],"body": {"op": "DebugWrap","inner": {"op": "App","fn": {"op": "DebugWrap","inner": {"op": "Qualified","lib": {"op": "Var","id": "import$std/core/hnd","type": {"op": "Ptr"}},"name": "std/core/hnd/@open-none1","type": {"op": "Function","params": [{"op": "Function","params": [{"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}, {"op": "Top"}],"return": {"op": "Top"},"purity": "Effectful"}},"annotation": "genExpr: std/core/hnd/@open-none1<string,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>"},"args": [{"op": "DebugWrap","inner": {"op": "Var","id": "std/os/path/path","type": {"op": "Function","params": [{"op": "String"}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"annotation": "genExpr: std/os/path/path"}, {"op": "DebugWrap","inner": {"op": "Var","id": "@x-x1@10157","type": {"op": "String"}},"annotation": "genExpr: @x-x1@10157"}]},"annotation": "genExpr: std/core/hnd/@open-none1<string,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>(std/os/path/path, @x-x1@10157)"}}},"annotation": "genPure: pure lambda in core code"},"annotation": "genExpr: fn<(io :: E)>(){\n  val @x-x1@10157 : string\n        = std/os/path/xtempdir();\n  std/core/hnd/@open-none1<string,std/os/path/path,(total :: E),<(alloc :: H -> X)<(global :: H)>,(console/console :: X),(div :: X),(exn :: (E, V) -> V),(fsys :: X),(ndet :: X),(net :: X),(read :: H -> X)<(global :: H)>,(ui :: X),(write :: H -> X)<(global :: H)>>>(std/os/path/path, @x-x1@10157);\n}"},"annotation": "Def of {\"op\": \"Var\",\"id\": \"std/os/path/tempdir\",\"type\": {\"op\": \"Function\",\"params\": [],\"return\": {\"op\": \"Ptr\",\"extern_ptr_name\": \"std/os/path/path\"},\"purity\": \"Effectful\"}}"},"export_as": ["std/os/path/tempdir"]}, {"name": {"op": "Var","id": "std/os/path/Path","type": {"op": "Function","params": [{"op": "String"}, {"op": "Ptr","extern_ptr_name": "\"list\""}],"return": {"op": "Ptr","extern_ptr_name": "std/os/path/path"},"purity": "Effectful"}},"value": {"op": "DebugWrap","inner": {"op": "Abs","params": [{"op": "Var","id": "root","type": {"op": "String"}}, {"op": "Var","id": "parts","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}],"body": {"op": "Construct","type_tag": "std/os/path/path","tag": "std/os/path/Path","args": [{"op": "Var","id": "root","type": {"op": "String"}}, {"op": "Var","id": "parts","type": {"op": "Ptr","extern_ptr_name": "\"list\""}}]}},"annotation": "genConstr"},"export_as": ["std/os/path/Path"]}],"main": {"op": "Primitive","name": "!undefined:is a library","args": [],"returns": [{"op": "Var","id": "primitive_result","type": {"op": "Unit"}}],"rest": {"op": "Var","id": "primitive_result","type": {"op": "Unit"}}}}