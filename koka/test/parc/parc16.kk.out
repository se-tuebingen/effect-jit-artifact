module parc/parc16
import std/core/types = std/core/types pub = "";
import std/core/hnd = std/core/hnd pub = "";
import std/core/exn = std/core/exn pub = "";
import std/core/bool = std/core/bool pub = "";
import std/core/order = std/core/order pub = "";
import std/core/char = std/core/char pub = "";
import std/core/int = std/core/int pub = "";
import std/core/vector = std/core/vector pub = "";
import std/core/string = std/core/string pub = "";
import std/core/sslice = std/core/sslice pub = "";
import std/core/list = std/core/list pub = "";
import std/core/maybe = std/core/maybe pub = "";
import std/core/either = std/core/either pub = "";
import std/core/tuple = std/core/tuple pub = "";
import std/core/show = std/core/show pub = "";
import std/core/debug = std/core/debug pub = "";
import std/core/delayed = std/core/delayed pub = "";
import std/core/console = std/core/console pub = "";
import std/core = std/core = "";
pub fun test : (xs : list<int>, y : int, z : int) -> int
 = fn(xs: list<int>, y: int, z: int){
 val _ : ()
 = std/core/types/@drop(z);
 match (xs) {
 (std/core/types/Cons(((@skip std/core/types/@Box((x: int)) : @Box ) as @box-xxx: @Box), (@pat@xxx: list<int>)) : list<int> )
 -> val _ : int
 = std/core/types/@dup(x);
 val _ : ()
 = std/core/types/@drop(y);
 (match (xs) {
 (std/core/types/Cons(((@skip std/core/types/@Box((@pat@xxx: int)) : @Box ) as @box-xxx: @Box), (@pat@xxx: list<int>)) : list<int> )
 -> val _ : ()
 = (match ((std/core/types/@is-unique(xs))) {
 (std/core/types/True() : bool )
 -> val _ : ()
 = val _ : ()
 = std/core/types/@drop(@pat@xxx);
 val _ : ()
 = std/core/types/@drop(@box-xxx);
 std/core/types/Unit;
 std/core/types/@free(xs);
 _
 -> val _ : ()
 = std/core/types/Unit;
 val _ : ()
 = std/core/types/@dec-ref(xs);
 std/core/types/Unit;
 });
 x;
 (@skip std/core/types/Nil() : (list<int>) )
 -> val _ : ()
 = std/core/types/@drop(x);
 2;
 });
 (std/core/types/Cons(((@skip std/core/types/@Box((@pat@xxx: int)) : @Box ) as @box-xxx: @Box), (@pat@xxx: list<int>)) : list<int> )
 -> val _ : ()
 = std/core/types/@drop(y);
 val _ : ()
 = (match ((std/core/types/@is-unique(xs))) {
 (std/core/types/True() : bool )
 -> val _ : ()
 = val _ : ()
 = std/core/types/@drop(@pat@xxx);
 val _ : ()
 = std/core/types/@drop(@box-xxx);
 std/core/types/Unit;
 std/core/types/@free(xs);
 _
 -> val _ : ()
 = std/core/types/Unit;
 val _ : ()
 = std/core/types/@dec-ref(xs);
 std/core/types/Unit;
 });
 2;
 (@skip std/core/types/Nil() : (list<int>) )
 -> y;
 };
 };