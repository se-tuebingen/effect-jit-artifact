module parc/parc18
import std/core/types = std/core/types pub = "";
import std/core/hnd = std/core/hnd pub = "";
import std/core/exn = std/core/exn pub = "";
import std/core/bool = std/core/bool pub = "";
import std/core/order = std/core/order pub = "";
import std/core/char = std/core/char pub = "";
import std/core/int = std/core/int pub = "";
import std/core/vector = std/core/vector pub = "";
import std/core/string = std/core/string pub = "";
import std/core/sslice = std/core/sslice pub = "";
import std/core/list = std/core/list pub = "";
import std/core/maybe = std/core/maybe pub = "";
import std/core/either = std/core/either pub = "";
import std/core/tuple = std/core/tuple pub = "";
import std/core/show = std/core/show pub = "";
import std/core/debug = std/core/debug pub = "";
import std/core/delayed = std/core/delayed pub = "";
import std/core/console = std/core/console pub = "";
import std/core = std/core = "";
pub fun test : forall<a> (xs : list<a>, ys : list<a>) -> list<a>
 = fn(xs: list<0>, ys: list<0>){
 match (xs) {
 (std/core/types/Cons((z: 47), (@pat@xxx: list<0>)) : list<a> )
 -> (match (ys) {
 (std/core/types/Cons((z@xxx: 47), (@pat@xxx: list<0>)) : list<a> )
 -> val _ : ()
 = (match ((std/core/types/@is-unique(ys))) {
 (std/core/types/True() : bool )
 -> val _ : ()
 = val _ : ()
 = std/core/types/@drop(@pat@xxx);
 std/core/types/Unit;
 std/core/types/@free(ys);
 _
 -> val _ : ()
 = val _ : a
 = std/core/types/@dup(z@xxx);
 std/core/types/Unit;
 val _ : ()
 = std/core/types/@dec-ref(ys);
 std/core/types/Unit;
 });
 val @ru-x1 : @reuse
 = std/core/types/@no-reuse();
 val _ : ()
 = (match ((std/core/types/@is-unique(xs))) {
 (std/core/types/True() : bool )
 -> val _ : ()
 = val _ : ()
 = std/core/types/@drop(z);
 val _ : ()
 = std/core/types/@drop(@pat@xxx);
 std/core/types/Unit;
 std/core/types/@assign-reuse(@ru-x1, (std/core/types/@reuse(xs)));
 _
 -> val _ : ()
 = std/core/types/Unit;
 val _ : ()
 = std/core/types/@dec-ref(xs);
 std/core/types/Unit;
 });
 std/core/types/@alloc-at(@ru-x1, (std/core/types/Cons(z@xxx, std/core/types/Nil)));
 (@skip std/core/types/Nil() : (list<a>) )
 -> xs;
 });
 (@skip std/core/types/Nil() : (list<a>) )
 -> ys;
 };
 };
test/parc/parc18@kk(4,23): type warning: z shadows an earlier local definition or parameter
test/parc/parc18@kk(3, 5): type warning: pattern variable z is unused (or a wrongly spelled constructor?)
 hint: prepend an underscore to make it a wildcard pattern