(** Prelude *)
type Int    = extern "helium_Int"
data Bool = False | True
type String = extern "helium_String"
data Unit = ()
let ( <  ) = extern "helium_ltInt"  : Int -> Int -> Bool
let ( + ) = extern "helium_addInt" : Int -> Int -> Int
let ( - ) = extern "helium_subInt" : Int -> Int -> Int
effect IO = effect []
let stringOfInt = extern "helium_string_of_int" : Int -> String
let printStr = extern "helium_printStr" : String ->[IO] Unit

(* main *)
let rec fib n = if (n < 2) then n else (fib(n - 1) + fib(n - 2))
let main = printStr (stringOfInt (fib 10))
